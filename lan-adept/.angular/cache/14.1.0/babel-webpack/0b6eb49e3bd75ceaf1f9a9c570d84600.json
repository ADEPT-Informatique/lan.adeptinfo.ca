{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Felix/Desktop/lan.adeptinfo.ca/lan-adept/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { getApp, _getProvider, _registerComponent, registerVersion } from '@firebase/app';\nimport { Component } from '@firebase/component';\nimport { ErrorFactory, FirebaseError } from '@firebase/util';\nimport { openDB } from 'idb';\nconst name = \"@firebase/installations\";\nconst version = \"0.5.12\";\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nconst PENDING_TIMEOUT_MS = 10000;\nconst PACKAGE_VERSION = `w:${version}`;\nconst INTERNAL_AUTH_VERSION = 'FIS_v2';\nconst INSTALLATIONS_API_URL = 'https://firebaseinstallations.googleapis.com/v1';\nconst TOKEN_EXPIRATION_BUFFER = 60 * 60 * 1000; // One hour\n\nconst SERVICE = 'installations';\nconst SERVICE_NAME = 'Installations';\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nconst ERROR_DESCRIPTION_MAP = {\n  [\"missing-app-config-values\"\n  /* MISSING_APP_CONFIG_VALUES */\n  ]: 'Missing App configuration value: \"{$valueName}\"',\n  [\"not-registered\"\n  /* NOT_REGISTERED */\n  ]: 'Firebase Installation is not registered.',\n  [\"installation-not-found\"\n  /* INSTALLATION_NOT_FOUND */\n  ]: 'Firebase Installation not found.',\n  [\"request-failed\"\n  /* REQUEST_FAILED */\n  ]: '{$requestName} request failed with error \"{$serverCode} {$serverStatus}: {$serverMessage}\"',\n  [\"app-offline\"\n  /* APP_OFFLINE */\n  ]: 'Could not process request. Application offline.',\n  [\"delete-pending-registration\"\n  /* DELETE_PENDING_REGISTRATION */\n  ]: \"Can't delete installation while there is a pending registration request.\"\n};\nconst ERROR_FACTORY = new ErrorFactory(SERVICE, SERVICE_NAME, ERROR_DESCRIPTION_MAP);\n/** Returns true if error is a FirebaseError that is based on an error from the server. */\n\nfunction isServerError(error) {\n  return error instanceof FirebaseError && error.code.includes(\"request-failed\"\n  /* REQUEST_FAILED */\n  );\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction getInstallationsEndpoint({\n  projectId\n}) {\n  return `${INSTALLATIONS_API_URL}/projects/${projectId}/installations`;\n}\n\nfunction extractAuthTokenInfoFromResponse(response) {\n  return {\n    token: response.token,\n    requestStatus: 2\n    /* COMPLETED */\n    ,\n    expiresIn: getExpiresInFromResponseExpiresIn(response.expiresIn),\n    creationTime: Date.now()\n  };\n}\n\nfunction getErrorFromResponse(_x, _x2) {\n  return _getErrorFromResponse.apply(this, arguments);\n}\n\nfunction _getErrorFromResponse() {\n  _getErrorFromResponse = _asyncToGenerator(function* (requestName, response) {\n    const responseJson = yield response.json();\n    const errorData = responseJson.error;\n    return ERROR_FACTORY.create(\"request-failed\"\n    /* REQUEST_FAILED */\n    , {\n      requestName,\n      serverCode: errorData.code,\n      serverMessage: errorData.message,\n      serverStatus: errorData.status\n    });\n  });\n  return _getErrorFromResponse.apply(this, arguments);\n}\n\nfunction getHeaders({\n  apiKey\n}) {\n  return new Headers({\n    'Content-Type': 'application/json',\n    Accept: 'application/json',\n    'x-goog-api-key': apiKey\n  });\n}\n\nfunction getHeadersWithAuth(appConfig, {\n  refreshToken\n}) {\n  const headers = getHeaders(appConfig);\n  headers.append('Authorization', getAuthorizationHeader(refreshToken));\n  return headers;\n}\n/**\r\n * Calls the passed in fetch wrapper and returns the response.\r\n * If the returned response has a status of 5xx, re-runs the function once and\r\n * returns the response.\r\n */\n\n\nfunction retryIfServerError(_x3) {\n  return _retryIfServerError.apply(this, arguments);\n}\n\nfunction _retryIfServerError() {\n  _retryIfServerError = _asyncToGenerator(function* (fn) {\n    const result = yield fn();\n\n    if (result.status >= 500 && result.status < 600) {\n      // Internal Server Error. Retry request.\n      return fn();\n    }\n\n    return result;\n  });\n  return _retryIfServerError.apply(this, arguments);\n}\n\nfunction getExpiresInFromResponseExpiresIn(responseExpiresIn) {\n  // This works because the server will never respond with fractions of a second.\n  return Number(responseExpiresIn.replace('s', '000'));\n}\n\nfunction getAuthorizationHeader(refreshToken) {\n  return `${INTERNAL_AUTH_VERSION} ${refreshToken}`;\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction createInstallationRequest(_x4, _x5) {\n  return _createInstallationRequest.apply(this, arguments);\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/** Returns a promise that resolves after given time passes. */\n\n\nfunction _createInstallationRequest() {\n  _createInstallationRequest = _asyncToGenerator(function* ({\n    appConfig,\n    heartbeatServiceProvider\n  }, {\n    fid\n  }) {\n    const endpoint = getInstallationsEndpoint(appConfig);\n    const headers = getHeaders(appConfig); // If heartbeat service exists, add the heartbeat string to the header.\n\n    const heartbeatService = heartbeatServiceProvider.getImmediate({\n      optional: true\n    });\n\n    if (heartbeatService) {\n      const heartbeatsHeader = yield heartbeatService.getHeartbeatsHeader();\n\n      if (heartbeatsHeader) {\n        headers.append('x-firebase-client', heartbeatsHeader);\n      }\n    }\n\n    const body = {\n      fid,\n      authVersion: INTERNAL_AUTH_VERSION,\n      appId: appConfig.appId,\n      sdkVersion: PACKAGE_VERSION\n    };\n    const request = {\n      method: 'POST',\n      headers,\n      body: JSON.stringify(body)\n    };\n    const response = yield retryIfServerError(() => fetch(endpoint, request));\n\n    if (response.ok) {\n      const responseValue = yield response.json();\n      const registeredInstallationEntry = {\n        fid: responseValue.fid || fid,\n        registrationStatus: 2\n        /* COMPLETED */\n        ,\n        refreshToken: responseValue.refreshToken,\n        authToken: extractAuthTokenInfoFromResponse(responseValue.authToken)\n      };\n      return registeredInstallationEntry;\n    } else {\n      throw yield getErrorFromResponse('Create Installation', response);\n    }\n  });\n  return _createInstallationRequest.apply(this, arguments);\n}\n\nfunction sleep(ms) {\n  return new Promise(resolve => {\n    setTimeout(resolve, ms);\n  });\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction bufferToBase64UrlSafe(array) {\n  const b64 = btoa(String.fromCharCode(...array));\n  return b64.replace(/\\+/g, '-').replace(/\\//g, '_');\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nconst VALID_FID_PATTERN = /^[cdef][\\w-]{21}$/;\nconst INVALID_FID = '';\n/**\r\n * Generates a new FID using random values from Web Crypto API.\r\n * Returns an empty string if FID generation fails for any reason.\r\n */\n\nfunction generateFid() {\n  try {\n    // A valid FID has exactly 22 base64 characters, which is 132 bits, or 16.5\n    // bytes. our implementation generates a 17 byte array instead.\n    const fidByteArray = new Uint8Array(17);\n    const crypto = self.crypto || self.msCrypto;\n    crypto.getRandomValues(fidByteArray); // Replace the first 4 random bits with the constant FID header of 0b0111.\n\n    fidByteArray[0] = 0b01110000 + fidByteArray[0] % 0b00010000;\n    const fid = encode(fidByteArray);\n    return VALID_FID_PATTERN.test(fid) ? fid : INVALID_FID;\n  } catch (_a) {\n    // FID generation errored\n    return INVALID_FID;\n  }\n}\n/** Converts a FID Uint8Array to a base64 string representation. */\n\n\nfunction encode(fidByteArray) {\n  const b64String = bufferToBase64UrlSafe(fidByteArray); // Remove the 23rd character that was added because of the extra 4 bits at the\n  // end of our 17 byte array, and the '=' padding.\n\n  return b64String.substr(0, 22);\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/** Returns a string key that can be used to identify the app. */\n\n\nfunction getKey(appConfig) {\n  return `${appConfig.appName}!${appConfig.appId}`;\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nconst fidChangeCallbacks = new Map();\n/**\r\n * Calls the onIdChange callbacks with the new FID value, and broadcasts the\r\n * change to other tabs.\r\n */\n\nfunction fidChanged(appConfig, fid) {\n  const key = getKey(appConfig);\n  callFidChangeCallbacks(key, fid);\n  broadcastFidChange(key, fid);\n}\n\nfunction addCallback(appConfig, callback) {\n  // Open the broadcast channel if it's not already open,\n  // to be able to listen to change events from other tabs.\n  getBroadcastChannel();\n  const key = getKey(appConfig);\n  let callbackSet = fidChangeCallbacks.get(key);\n\n  if (!callbackSet) {\n    callbackSet = new Set();\n    fidChangeCallbacks.set(key, callbackSet);\n  }\n\n  callbackSet.add(callback);\n}\n\nfunction removeCallback(appConfig, callback) {\n  const key = getKey(appConfig);\n  const callbackSet = fidChangeCallbacks.get(key);\n\n  if (!callbackSet) {\n    return;\n  }\n\n  callbackSet.delete(callback);\n\n  if (callbackSet.size === 0) {\n    fidChangeCallbacks.delete(key);\n  } // Close broadcast channel if there are no more callbacks.\n\n\n  closeBroadcastChannel();\n}\n\nfunction callFidChangeCallbacks(key, fid) {\n  const callbacks = fidChangeCallbacks.get(key);\n\n  if (!callbacks) {\n    return;\n  }\n\n  for (const callback of callbacks) {\n    callback(fid);\n  }\n}\n\nfunction broadcastFidChange(key, fid) {\n  const channel = getBroadcastChannel();\n\n  if (channel) {\n    channel.postMessage({\n      key,\n      fid\n    });\n  }\n\n  closeBroadcastChannel();\n}\n\nlet broadcastChannel = null;\n/** Opens and returns a BroadcastChannel if it is supported by the browser. */\n\nfunction getBroadcastChannel() {\n  if (!broadcastChannel && 'BroadcastChannel' in self) {\n    broadcastChannel = new BroadcastChannel('[Firebase] FID Change');\n\n    broadcastChannel.onmessage = e => {\n      callFidChangeCallbacks(e.data.key, e.data.fid);\n    };\n  }\n\n  return broadcastChannel;\n}\n\nfunction closeBroadcastChannel() {\n  if (fidChangeCallbacks.size === 0 && broadcastChannel) {\n    broadcastChannel.close();\n    broadcastChannel = null;\n  }\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nconst DATABASE_NAME = 'firebase-installations-database';\nconst DATABASE_VERSION = 1;\nconst OBJECT_STORE_NAME = 'firebase-installations-store';\nlet dbPromise = null;\n\nfunction getDbPromise() {\n  if (!dbPromise) {\n    dbPromise = openDB(DATABASE_NAME, DATABASE_VERSION, {\n      upgrade: (db, oldVersion) => {\n        // We don't use 'break' in this switch statement, the fall-through\n        // behavior is what we want, because if there are multiple versions between\n        // the old version and the current version, we want ALL the migrations\n        // that correspond to those versions to run, not only the last one.\n        // eslint-disable-next-line default-case\n        switch (oldVersion) {\n          case 0:\n            db.createObjectStore(OBJECT_STORE_NAME);\n        }\n      }\n    });\n  }\n\n  return dbPromise;\n}\n/** Assigns or overwrites the record for the given key with the given value. */\n\n\nfunction set(_x6, _x7) {\n  return _set.apply(this, arguments);\n}\n/** Removes record(s) from the objectStore that match the given key. */\n\n\nfunction _set() {\n  _set = _asyncToGenerator(function* (appConfig, value) {\n    const key = getKey(appConfig);\n    const db = yield getDbPromise();\n    const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n    const objectStore = tx.objectStore(OBJECT_STORE_NAME);\n    const oldValue = yield objectStore.get(key);\n    yield objectStore.put(value, key);\n    yield tx.done;\n\n    if (!oldValue || oldValue.fid !== value.fid) {\n      fidChanged(appConfig, value.fid);\n    }\n\n    return value;\n  });\n  return _set.apply(this, arguments);\n}\n\nfunction remove(_x8) {\n  return _remove.apply(this, arguments);\n}\n/**\r\n * Atomically updates a record with the result of updateFn, which gets\r\n * called with the current value. If newValue is undefined, the record is\r\n * deleted instead.\r\n * @return Updated value\r\n */\n\n\nfunction _remove() {\n  _remove = _asyncToGenerator(function* (appConfig) {\n    const key = getKey(appConfig);\n    const db = yield getDbPromise();\n    const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n    yield tx.objectStore(OBJECT_STORE_NAME).delete(key);\n    yield tx.done;\n  });\n  return _remove.apply(this, arguments);\n}\n\nfunction update(_x9, _x10) {\n  return _update.apply(this, arguments);\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Updates and returns the InstallationEntry from the database.\r\n * Also triggers a registration request if it is necessary and possible.\r\n */\n\n\nfunction _update() {\n  _update = _asyncToGenerator(function* (appConfig, updateFn) {\n    const key = getKey(appConfig);\n    const db = yield getDbPromise();\n    const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n    const store = tx.objectStore(OBJECT_STORE_NAME);\n    const oldValue = yield store.get(key);\n    const newValue = updateFn(oldValue);\n\n    if (newValue === undefined) {\n      yield store.delete(key);\n    } else {\n      yield store.put(newValue, key);\n    }\n\n    yield tx.done;\n\n    if (newValue && (!oldValue || oldValue.fid !== newValue.fid)) {\n      fidChanged(appConfig, newValue.fid);\n    }\n\n    return newValue;\n  });\n  return _update.apply(this, arguments);\n}\n\nfunction getInstallationEntry(_x11) {\n  return _getInstallationEntry.apply(this, arguments);\n}\n/**\r\n * Creates a new Installation Entry if one does not exist.\r\n * Also clears timed out pending requests.\r\n */\n\n\nfunction _getInstallationEntry() {\n  _getInstallationEntry = _asyncToGenerator(function* (installations) {\n    let registrationPromise;\n    const installationEntry = yield update(installations.appConfig, oldEntry => {\n      const installationEntry = updateOrCreateInstallationEntry(oldEntry);\n      const entryWithPromise = triggerRegistrationIfNecessary(installations, installationEntry);\n      registrationPromise = entryWithPromise.registrationPromise;\n      return entryWithPromise.installationEntry;\n    });\n\n    if (installationEntry.fid === INVALID_FID) {\n      // FID generation failed. Waiting for the FID from the server.\n      return {\n        installationEntry: yield registrationPromise\n      };\n    }\n\n    return {\n      installationEntry,\n      registrationPromise\n    };\n  });\n  return _getInstallationEntry.apply(this, arguments);\n}\n\nfunction updateOrCreateInstallationEntry(oldEntry) {\n  const entry = oldEntry || {\n    fid: generateFid(),\n    registrationStatus: 0\n    /* NOT_STARTED */\n\n  };\n  return clearTimedOutRequest(entry);\n}\n/**\r\n * If the Firebase Installation is not registered yet, this will trigger the\r\n * registration and return an InProgressInstallationEntry.\r\n *\r\n * If registrationPromise does not exist, the installationEntry is guaranteed\r\n * to be registered.\r\n */\n\n\nfunction triggerRegistrationIfNecessary(installations, installationEntry) {\n  if (installationEntry.registrationStatus === 0\n  /* NOT_STARTED */\n  ) {\n    if (!navigator.onLine) {\n      // Registration required but app is offline.\n      const registrationPromiseWithError = Promise.reject(ERROR_FACTORY.create(\"app-offline\"\n      /* APP_OFFLINE */\n      ));\n      return {\n        installationEntry,\n        registrationPromise: registrationPromiseWithError\n      };\n    } // Try registering. Change status to IN_PROGRESS.\n\n\n    const inProgressEntry = {\n      fid: installationEntry.fid,\n      registrationStatus: 1\n      /* IN_PROGRESS */\n      ,\n      registrationTime: Date.now()\n    };\n    const registrationPromise = registerInstallation(installations, inProgressEntry);\n    return {\n      installationEntry: inProgressEntry,\n      registrationPromise\n    };\n  } else if (installationEntry.registrationStatus === 1\n  /* IN_PROGRESS */\n  ) {\n    return {\n      installationEntry,\n      registrationPromise: waitUntilFidRegistration(installations)\n    };\n  } else {\n    return {\n      installationEntry\n    };\n  }\n}\n/** This will be executed only once for each new Firebase Installation. */\n\n\nfunction registerInstallation(_x12, _x13) {\n  return _registerInstallation.apply(this, arguments);\n}\n/** Call if FID registration is pending in another request. */\n\n\nfunction _registerInstallation() {\n  _registerInstallation = _asyncToGenerator(function* (installations, installationEntry) {\n    try {\n      const registeredInstallationEntry = yield createInstallationRequest(installations, installationEntry);\n      return set(installations.appConfig, registeredInstallationEntry);\n    } catch (e) {\n      if (isServerError(e) && e.customData.serverCode === 409) {\n        // Server returned a \"FID can not be used\" error.\n        // Generate a new ID next time.\n        yield remove(installations.appConfig);\n      } else {\n        // Registration failed. Set FID as not registered.\n        yield set(installations.appConfig, {\n          fid: installationEntry.fid,\n          registrationStatus: 0\n          /* NOT_STARTED */\n\n        });\n      }\n\n      throw e;\n    }\n  });\n  return _registerInstallation.apply(this, arguments);\n}\n\nfunction waitUntilFidRegistration(_x14) {\n  return _waitUntilFidRegistration.apply(this, arguments);\n}\n/**\r\n * Called only if there is a CreateInstallation request in progress.\r\n *\r\n * Updates the InstallationEntry in the DB based on the status of the\r\n * CreateInstallation request.\r\n *\r\n * Returns the updated InstallationEntry.\r\n */\n\n\nfunction _waitUntilFidRegistration() {\n  _waitUntilFidRegistration = _asyncToGenerator(function* (installations) {\n    // Unfortunately, there is no way of reliably observing when a value in\n    // IndexedDB changes (yet, see https://github.com/WICG/indexed-db-observers),\n    // so we need to poll.\n    let entry = yield updateInstallationRequest(installations.appConfig);\n\n    while (entry.registrationStatus === 1\n    /* IN_PROGRESS */\n    ) {\n      // createInstallation request still in progress.\n      yield sleep(100);\n      entry = yield updateInstallationRequest(installations.appConfig);\n    }\n\n    if (entry.registrationStatus === 0\n    /* NOT_STARTED */\n    ) {\n      // The request timed out or failed in a different call. Try again.\n      const {\n        installationEntry,\n        registrationPromise\n      } = yield getInstallationEntry(installations);\n\n      if (registrationPromise) {\n        return registrationPromise;\n      } else {\n        // if there is no registrationPromise, entry is registered.\n        return installationEntry;\n      }\n    }\n\n    return entry;\n  });\n  return _waitUntilFidRegistration.apply(this, arguments);\n}\n\nfunction updateInstallationRequest(appConfig) {\n  return update(appConfig, oldEntry => {\n    if (!oldEntry) {\n      throw ERROR_FACTORY.create(\"installation-not-found\"\n      /* INSTALLATION_NOT_FOUND */\n      );\n    }\n\n    return clearTimedOutRequest(oldEntry);\n  });\n}\n\nfunction clearTimedOutRequest(entry) {\n  if (hasInstallationRequestTimedOut(entry)) {\n    return {\n      fid: entry.fid,\n      registrationStatus: 0\n      /* NOT_STARTED */\n\n    };\n  }\n\n  return entry;\n}\n\nfunction hasInstallationRequestTimedOut(installationEntry) {\n  return installationEntry.registrationStatus === 1\n  /* IN_PROGRESS */\n  && installationEntry.registrationTime + PENDING_TIMEOUT_MS < Date.now();\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction generateAuthTokenRequest(_x15, _x16) {\n  return _generateAuthTokenRequest.apply(this, arguments);\n}\n\nfunction _generateAuthTokenRequest() {\n  _generateAuthTokenRequest = _asyncToGenerator(function* ({\n    appConfig,\n    heartbeatServiceProvider\n  }, installationEntry) {\n    const endpoint = getGenerateAuthTokenEndpoint(appConfig, installationEntry);\n    const headers = getHeadersWithAuth(appConfig, installationEntry); // If heartbeat service exists, add the heartbeat string to the header.\n\n    const heartbeatService = heartbeatServiceProvider.getImmediate({\n      optional: true\n    });\n\n    if (heartbeatService) {\n      const heartbeatsHeader = yield heartbeatService.getHeartbeatsHeader();\n\n      if (heartbeatsHeader) {\n        headers.append('x-firebase-client', heartbeatsHeader);\n      }\n    }\n\n    const body = {\n      installation: {\n        sdkVersion: PACKAGE_VERSION,\n        appId: appConfig.appId\n      }\n    };\n    const request = {\n      method: 'POST',\n      headers,\n      body: JSON.stringify(body)\n    };\n    const response = yield retryIfServerError(() => fetch(endpoint, request));\n\n    if (response.ok) {\n      const responseValue = yield response.json();\n      const completedAuthToken = extractAuthTokenInfoFromResponse(responseValue);\n      return completedAuthToken;\n    } else {\n      throw yield getErrorFromResponse('Generate Auth Token', response);\n    }\n  });\n  return _generateAuthTokenRequest.apply(this, arguments);\n}\n\nfunction getGenerateAuthTokenEndpoint(appConfig, {\n  fid\n}) {\n  return `${getInstallationsEndpoint(appConfig)}/${fid}/authTokens:generate`;\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Returns a valid authentication token for the installation. Generates a new\r\n * token if one doesn't exist, is expired or about to expire.\r\n *\r\n * Should only be called if the Firebase Installation is registered.\r\n */\n\n\nfunction refreshAuthToken(_x17) {\n  return _refreshAuthToken.apply(this, arguments);\n}\n/**\r\n * Call only if FID is registered and Auth Token request is in progress.\r\n *\r\n * Waits until the current pending request finishes. If the request times out,\r\n * tries once in this thread as well.\r\n */\n\n\nfunction _refreshAuthToken() {\n  _refreshAuthToken = _asyncToGenerator(function* (installations, forceRefresh = false) {\n    let tokenPromise;\n    const entry = yield update(installations.appConfig, oldEntry => {\n      if (!isEntryRegistered(oldEntry)) {\n        throw ERROR_FACTORY.create(\"not-registered\"\n        /* NOT_REGISTERED */\n        );\n      }\n\n      const oldAuthToken = oldEntry.authToken;\n\n      if (!forceRefresh && isAuthTokenValid(oldAuthToken)) {\n        // There is a valid token in the DB.\n        return oldEntry;\n      } else if (oldAuthToken.requestStatus === 1\n      /* IN_PROGRESS */\n      ) {\n        // There already is a token request in progress.\n        tokenPromise = waitUntilAuthTokenRequest(installations, forceRefresh);\n        return oldEntry;\n      } else {\n        // No token or token expired.\n        if (!navigator.onLine) {\n          throw ERROR_FACTORY.create(\"app-offline\"\n          /* APP_OFFLINE */\n          );\n        }\n\n        const inProgressEntry = makeAuthTokenRequestInProgressEntry(oldEntry);\n        tokenPromise = fetchAuthTokenFromServer(installations, inProgressEntry);\n        return inProgressEntry;\n      }\n    });\n    const authToken = tokenPromise ? yield tokenPromise : entry.authToken;\n    return authToken;\n  });\n  return _refreshAuthToken.apply(this, arguments);\n}\n\nfunction waitUntilAuthTokenRequest(_x18, _x19) {\n  return _waitUntilAuthTokenRequest.apply(this, arguments);\n}\n/**\r\n * Called only if there is a GenerateAuthToken request in progress.\r\n *\r\n * Updates the InstallationEntry in the DB based on the status of the\r\n * GenerateAuthToken request.\r\n *\r\n * Returns the updated InstallationEntry.\r\n */\n\n\nfunction _waitUntilAuthTokenRequest() {\n  _waitUntilAuthTokenRequest = _asyncToGenerator(function* (installations, forceRefresh) {\n    // Unfortunately, there is no way of reliably observing when a value in\n    // IndexedDB changes (yet, see https://github.com/WICG/indexed-db-observers),\n    // so we need to poll.\n    let entry = yield updateAuthTokenRequest(installations.appConfig);\n\n    while (entry.authToken.requestStatus === 1\n    /* IN_PROGRESS */\n    ) {\n      // generateAuthToken still in progress.\n      yield sleep(100);\n      entry = yield updateAuthTokenRequest(installations.appConfig);\n    }\n\n    const authToken = entry.authToken;\n\n    if (authToken.requestStatus === 0\n    /* NOT_STARTED */\n    ) {\n      // The request timed out or failed in a different call. Try again.\n      return refreshAuthToken(installations, forceRefresh);\n    } else {\n      return authToken;\n    }\n  });\n  return _waitUntilAuthTokenRequest.apply(this, arguments);\n}\n\nfunction updateAuthTokenRequest(appConfig) {\n  return update(appConfig, oldEntry => {\n    if (!isEntryRegistered(oldEntry)) {\n      throw ERROR_FACTORY.create(\"not-registered\"\n      /* NOT_REGISTERED */\n      );\n    }\n\n    const oldAuthToken = oldEntry.authToken;\n\n    if (hasAuthTokenRequestTimedOut(oldAuthToken)) {\n      return Object.assign(Object.assign({}, oldEntry), {\n        authToken: {\n          requestStatus: 0\n          /* NOT_STARTED */\n\n        }\n      });\n    }\n\n    return oldEntry;\n  });\n}\n\nfunction fetchAuthTokenFromServer(_x20, _x21) {\n  return _fetchAuthTokenFromServer.apply(this, arguments);\n}\n\nfunction _fetchAuthTokenFromServer() {\n  _fetchAuthTokenFromServer = _asyncToGenerator(function* (installations, installationEntry) {\n    try {\n      const authToken = yield generateAuthTokenRequest(installations, installationEntry);\n      const updatedInstallationEntry = Object.assign(Object.assign({}, installationEntry), {\n        authToken\n      });\n      yield set(installations.appConfig, updatedInstallationEntry);\n      return authToken;\n    } catch (e) {\n      if (isServerError(e) && (e.customData.serverCode === 401 || e.customData.serverCode === 404)) {\n        // Server returned a \"FID not found\" or a \"Invalid authentication\" error.\n        // Generate a new ID next time.\n        yield remove(installations.appConfig);\n      } else {\n        const updatedInstallationEntry = Object.assign(Object.assign({}, installationEntry), {\n          authToken: {\n            requestStatus: 0\n            /* NOT_STARTED */\n\n          }\n        });\n        yield set(installations.appConfig, updatedInstallationEntry);\n      }\n\n      throw e;\n    }\n  });\n  return _fetchAuthTokenFromServer.apply(this, arguments);\n}\n\nfunction isEntryRegistered(installationEntry) {\n  return installationEntry !== undefined && installationEntry.registrationStatus === 2\n  /* COMPLETED */\n  ;\n}\n\nfunction isAuthTokenValid(authToken) {\n  return authToken.requestStatus === 2\n  /* COMPLETED */\n  && !isAuthTokenExpired(authToken);\n}\n\nfunction isAuthTokenExpired(authToken) {\n  const now = Date.now();\n  return now < authToken.creationTime || authToken.creationTime + authToken.expiresIn < now + TOKEN_EXPIRATION_BUFFER;\n}\n/** Returns an updated InstallationEntry with an InProgressAuthToken. */\n\n\nfunction makeAuthTokenRequestInProgressEntry(oldEntry) {\n  const inProgressAuthToken = {\n    requestStatus: 1\n    /* IN_PROGRESS */\n    ,\n    requestTime: Date.now()\n  };\n  return Object.assign(Object.assign({}, oldEntry), {\n    authToken: inProgressAuthToken\n  });\n}\n\nfunction hasAuthTokenRequestTimedOut(authToken) {\n  return authToken.requestStatus === 1\n  /* IN_PROGRESS */\n  && authToken.requestTime + PENDING_TIMEOUT_MS < Date.now();\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Creates a Firebase Installation if there isn't one for the app and\r\n * returns the Installation ID.\r\n * @param installations - The `Installations` instance.\r\n *\r\n * @public\r\n */\n\n\nfunction getId(_x22) {\n  return _getId.apply(this, arguments);\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Returns a Firebase Installations auth token, identifying the current\r\n * Firebase Installation.\r\n * @param installations - The `Installations` instance.\r\n * @param forceRefresh - Force refresh regardless of token expiration.\r\n *\r\n * @public\r\n */\n\n\nfunction _getId() {\n  _getId = _asyncToGenerator(function* (installations) {\n    const installationsImpl = installations;\n    const {\n      installationEntry,\n      registrationPromise\n    } = yield getInstallationEntry(installationsImpl);\n\n    if (registrationPromise) {\n      registrationPromise.catch(console.error);\n    } else {\n      // If the installation is already registered, update the authentication\n      // token if needed.\n      refreshAuthToken(installationsImpl).catch(console.error);\n    }\n\n    return installationEntry.fid;\n  });\n  return _getId.apply(this, arguments);\n}\n\nfunction getToken(_x23) {\n  return _getToken.apply(this, arguments);\n}\n\nfunction _getToken() {\n  _getToken = _asyncToGenerator(function* (installations, forceRefresh = false) {\n    const installationsImpl = installations;\n    yield completeInstallationRegistration(installationsImpl); // At this point we either have a Registered Installation in the DB, or we've\n    // already thrown an error.\n\n    const authToken = yield refreshAuthToken(installationsImpl, forceRefresh);\n    return authToken.token;\n  });\n  return _getToken.apply(this, arguments);\n}\n\nfunction completeInstallationRegistration(_x24) {\n  return _completeInstallationRegistration.apply(this, arguments);\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction _completeInstallationRegistration() {\n  _completeInstallationRegistration = _asyncToGenerator(function* (installations) {\n    const {\n      registrationPromise\n    } = yield getInstallationEntry(installations);\n\n    if (registrationPromise) {\n      // A createInstallation request is in progress. Wait until it finishes.\n      yield registrationPromise;\n    }\n  });\n  return _completeInstallationRegistration.apply(this, arguments);\n}\n\nfunction deleteInstallationRequest(_x25, _x26) {\n  return _deleteInstallationRequest.apply(this, arguments);\n}\n\nfunction _deleteInstallationRequest() {\n  _deleteInstallationRequest = _asyncToGenerator(function* (appConfig, installationEntry) {\n    const endpoint = getDeleteEndpoint(appConfig, installationEntry);\n    const headers = getHeadersWithAuth(appConfig, installationEntry);\n    const request = {\n      method: 'DELETE',\n      headers\n    };\n    const response = yield retryIfServerError(() => fetch(endpoint, request));\n\n    if (!response.ok) {\n      throw yield getErrorFromResponse('Delete Installation', response);\n    }\n  });\n  return _deleteInstallationRequest.apply(this, arguments);\n}\n\nfunction getDeleteEndpoint(appConfig, {\n  fid\n}) {\n  return `${getInstallationsEndpoint(appConfig)}/${fid}`;\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Deletes the Firebase Installation and all associated data.\r\n * @param installations - The `Installations` instance.\r\n *\r\n * @public\r\n */\n\n\nfunction deleteInstallations(_x27) {\n  return _deleteInstallations.apply(this, arguments);\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Sets a new callback that will get called when Installation ID changes.\r\n * Returns an unsubscribe function that will remove the callback when called.\r\n * @param installations - The `Installations` instance.\r\n * @param callback - The callback function that is invoked when FID changes.\r\n * @returns A function that can be called to unsubscribe.\r\n *\r\n * @public\r\n */\n\n\nfunction _deleteInstallations() {\n  _deleteInstallations = _asyncToGenerator(function* (installations) {\n    const {\n      appConfig\n    } = installations;\n    const entry = yield update(appConfig, oldEntry => {\n      if (oldEntry && oldEntry.registrationStatus === 0\n      /* NOT_STARTED */\n      ) {\n        // Delete the unregistered entry without sending a deleteInstallation request.\n        return undefined;\n      }\n\n      return oldEntry;\n    });\n\n    if (entry) {\n      if (entry.registrationStatus === 1\n      /* IN_PROGRESS */\n      ) {\n        // Can't delete while trying to register.\n        throw ERROR_FACTORY.create(\"delete-pending-registration\"\n        /* DELETE_PENDING_REGISTRATION */\n        );\n      } else if (entry.registrationStatus === 2\n      /* COMPLETED */\n      ) {\n        if (!navigator.onLine) {\n          throw ERROR_FACTORY.create(\"app-offline\"\n          /* APP_OFFLINE */\n          );\n        } else {\n          yield deleteInstallationRequest(appConfig, entry);\n          yield remove(appConfig);\n        }\n      }\n    }\n  });\n  return _deleteInstallations.apply(this, arguments);\n}\n\nfunction onIdChange(installations, callback) {\n  const {\n    appConfig\n  } = installations;\n  addCallback(appConfig, callback);\n  return () => {\n    removeCallback(appConfig, callback);\n  };\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Returns an instance of {@link Installations} associated with the given\r\n * {@link @firebase/app#FirebaseApp} instance.\r\n * @param app - The {@link @firebase/app#FirebaseApp} instance.\r\n *\r\n * @public\r\n */\n\n\nfunction getInstallations(app = getApp()) {\n  const installationsImpl = _getProvider(app, 'installations').getImmediate();\n\n  return installationsImpl;\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction extractAppConfig(app) {\n  if (!app || !app.options) {\n    throw getMissingValueError('App Configuration');\n  }\n\n  if (!app.name) {\n    throw getMissingValueError('App Name');\n  } // Required app config keys\n\n\n  const configKeys = ['projectId', 'apiKey', 'appId'];\n\n  for (const keyName of configKeys) {\n    if (!app.options[keyName]) {\n      throw getMissingValueError(keyName);\n    }\n  }\n\n  return {\n    appName: app.name,\n    projectId: app.options.projectId,\n    apiKey: app.options.apiKey,\n    appId: app.options.appId\n  };\n}\n\nfunction getMissingValueError(valueName) {\n  return ERROR_FACTORY.create(\"missing-app-config-values\"\n  /* MISSING_APP_CONFIG_VALUES */\n  , {\n    valueName\n  });\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nconst INSTALLATIONS_NAME = 'installations';\nconst INSTALLATIONS_NAME_INTERNAL = 'installations-internal';\n\nconst publicFactory = container => {\n  const app = container.getProvider('app').getImmediate(); // Throws if app isn't configured properly.\n\n  const appConfig = extractAppConfig(app);\n\n  const heartbeatServiceProvider = _getProvider(app, 'heartbeat');\n\n  const installationsImpl = {\n    app,\n    appConfig,\n    heartbeatServiceProvider,\n    _delete: () => Promise.resolve()\n  };\n  return installationsImpl;\n};\n\nconst internalFactory = container => {\n  const app = container.getProvider('app').getImmediate(); // Internal FIS instance relies on public FIS instance.\n\n  const installations = _getProvider(app, INSTALLATIONS_NAME).getImmediate();\n\n  const installationsInternal = {\n    getId: () => getId(installations),\n    getToken: forceRefresh => getToken(installations, forceRefresh)\n  };\n  return installationsInternal;\n};\n\nfunction registerInstallations() {\n  _registerComponent(new Component(INSTALLATIONS_NAME, publicFactory, \"PUBLIC\"\n  /* PUBLIC */\n  ));\n\n  _registerComponent(new Component(INSTALLATIONS_NAME_INTERNAL, internalFactory, \"PRIVATE\"\n  /* PRIVATE */\n  ));\n}\n/**\r\n * Firebase Installations\r\n *\r\n * @packageDocumentation\r\n */\n\n\nregisterInstallations();\nregisterVersion(name, version); // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n\nregisterVersion(name, version, 'esm2017');\nexport { deleteInstallations, getId, getInstallations, getToken, onIdChange };","map":{"version":3,"names":["getApp","_getProvider","_registerComponent","registerVersion","Component","ErrorFactory","FirebaseError","openDB","name","version","PENDING_TIMEOUT_MS","PACKAGE_VERSION","INTERNAL_AUTH_VERSION","INSTALLATIONS_API_URL","TOKEN_EXPIRATION_BUFFER","SERVICE","SERVICE_NAME","ERROR_DESCRIPTION_MAP","ERROR_FACTORY","isServerError","error","code","includes","getInstallationsEndpoint","projectId","extractAuthTokenInfoFromResponse","response","token","requestStatus","expiresIn","getExpiresInFromResponseExpiresIn","creationTime","Date","now","getErrorFromResponse","requestName","responseJson","json","errorData","create","serverCode","serverMessage","message","serverStatus","status","getHeaders","apiKey","Headers","Accept","getHeadersWithAuth","appConfig","refreshToken","headers","append","getAuthorizationHeader","retryIfServerError","fn","result","responseExpiresIn","Number","replace","createInstallationRequest","heartbeatServiceProvider","fid","endpoint","heartbeatService","getImmediate","optional","heartbeatsHeader","getHeartbeatsHeader","body","authVersion","appId","sdkVersion","request","method","JSON","stringify","fetch","ok","responseValue","registeredInstallationEntry","registrationStatus","authToken","sleep","ms","Promise","resolve","setTimeout","bufferToBase64UrlSafe","array","b64","btoa","String","fromCharCode","VALID_FID_PATTERN","INVALID_FID","generateFid","fidByteArray","Uint8Array","crypto","self","msCrypto","getRandomValues","encode","test","_a","b64String","substr","getKey","appName","fidChangeCallbacks","Map","fidChanged","key","callFidChangeCallbacks","broadcastFidChange","addCallback","callback","getBroadcastChannel","callbackSet","get","Set","set","add","removeCallback","delete","size","closeBroadcastChannel","callbacks","channel","postMessage","broadcastChannel","BroadcastChannel","onmessage","e","data","close","DATABASE_NAME","DATABASE_VERSION","OBJECT_STORE_NAME","dbPromise","getDbPromise","upgrade","db","oldVersion","createObjectStore","value","tx","transaction","objectStore","oldValue","put","done","remove","update","updateFn","store","newValue","undefined","getInstallationEntry","installations","registrationPromise","installationEntry","oldEntry","updateOrCreateInstallationEntry","entryWithPromise","triggerRegistrationIfNecessary","entry","clearTimedOutRequest","navigator","onLine","registrationPromiseWithError","reject","inProgressEntry","registrationTime","registerInstallation","waitUntilFidRegistration","customData","updateInstallationRequest","hasInstallationRequestTimedOut","generateAuthTokenRequest","getGenerateAuthTokenEndpoint","installation","completedAuthToken","refreshAuthToken","forceRefresh","tokenPromise","isEntryRegistered","oldAuthToken","isAuthTokenValid","waitUntilAuthTokenRequest","makeAuthTokenRequestInProgressEntry","fetchAuthTokenFromServer","updateAuthTokenRequest","hasAuthTokenRequestTimedOut","Object","assign","updatedInstallationEntry","isAuthTokenExpired","inProgressAuthToken","requestTime","getId","installationsImpl","catch","console","getToken","completeInstallationRegistration","deleteInstallationRequest","getDeleteEndpoint","deleteInstallations","onIdChange","getInstallations","app","extractAppConfig","options","getMissingValueError","configKeys","keyName","valueName","INSTALLATIONS_NAME","INSTALLATIONS_NAME_INTERNAL","publicFactory","container","getProvider","_delete","internalFactory","installationsInternal","registerInstallations"],"sources":["C:/Users/Felix/Desktop/lan.adeptinfo.ca/lan-adept/node_modules/@firebase/installations/dist/esm/index.esm2017.js"],"sourcesContent":["import { getApp, _getProvider, _registerComponent, registerVersion } from '@firebase/app';\nimport { Component } from '@firebase/component';\nimport { ErrorFactory, FirebaseError } from '@firebase/util';\nimport { openDB } from 'idb';\n\nconst name = \"@firebase/installations\";\nconst version = \"0.5.12\";\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst PENDING_TIMEOUT_MS = 10000;\r\nconst PACKAGE_VERSION = `w:${version}`;\r\nconst INTERNAL_AUTH_VERSION = 'FIS_v2';\r\nconst INSTALLATIONS_API_URL = 'https://firebaseinstallations.googleapis.com/v1';\r\nconst TOKEN_EXPIRATION_BUFFER = 60 * 60 * 1000; // One hour\r\nconst SERVICE = 'installations';\r\nconst SERVICE_NAME = 'Installations';\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst ERROR_DESCRIPTION_MAP = {\r\n    [\"missing-app-config-values\" /* MISSING_APP_CONFIG_VALUES */]: 'Missing App configuration value: \"{$valueName}\"',\r\n    [\"not-registered\" /* NOT_REGISTERED */]: 'Firebase Installation is not registered.',\r\n    [\"installation-not-found\" /* INSTALLATION_NOT_FOUND */]: 'Firebase Installation not found.',\r\n    [\"request-failed\" /* REQUEST_FAILED */]: '{$requestName} request failed with error \"{$serverCode} {$serverStatus}: {$serverMessage}\"',\r\n    [\"app-offline\" /* APP_OFFLINE */]: 'Could not process request. Application offline.',\r\n    [\"delete-pending-registration\" /* DELETE_PENDING_REGISTRATION */]: \"Can't delete installation while there is a pending registration request.\"\r\n};\r\nconst ERROR_FACTORY = new ErrorFactory(SERVICE, SERVICE_NAME, ERROR_DESCRIPTION_MAP);\r\n/** Returns true if error is a FirebaseError that is based on an error from the server. */\r\nfunction isServerError(error) {\r\n    return (error instanceof FirebaseError &&\r\n        error.code.includes(\"request-failed\" /* REQUEST_FAILED */));\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction getInstallationsEndpoint({ projectId }) {\r\n    return `${INSTALLATIONS_API_URL}/projects/${projectId}/installations`;\r\n}\r\nfunction extractAuthTokenInfoFromResponse(response) {\r\n    return {\r\n        token: response.token,\r\n        requestStatus: 2 /* COMPLETED */,\r\n        expiresIn: getExpiresInFromResponseExpiresIn(response.expiresIn),\r\n        creationTime: Date.now()\r\n    };\r\n}\r\nasync function getErrorFromResponse(requestName, response) {\r\n    const responseJson = await response.json();\r\n    const errorData = responseJson.error;\r\n    return ERROR_FACTORY.create(\"request-failed\" /* REQUEST_FAILED */, {\r\n        requestName,\r\n        serverCode: errorData.code,\r\n        serverMessage: errorData.message,\r\n        serverStatus: errorData.status\r\n    });\r\n}\r\nfunction getHeaders({ apiKey }) {\r\n    return new Headers({\r\n        'Content-Type': 'application/json',\r\n        Accept: 'application/json',\r\n        'x-goog-api-key': apiKey\r\n    });\r\n}\r\nfunction getHeadersWithAuth(appConfig, { refreshToken }) {\r\n    const headers = getHeaders(appConfig);\r\n    headers.append('Authorization', getAuthorizationHeader(refreshToken));\r\n    return headers;\r\n}\r\n/**\r\n * Calls the passed in fetch wrapper and returns the response.\r\n * If the returned response has a status of 5xx, re-runs the function once and\r\n * returns the response.\r\n */\r\nasync function retryIfServerError(fn) {\r\n    const result = await fn();\r\n    if (result.status >= 500 && result.status < 600) {\r\n        // Internal Server Error. Retry request.\r\n        return fn();\r\n    }\r\n    return result;\r\n}\r\nfunction getExpiresInFromResponseExpiresIn(responseExpiresIn) {\r\n    // This works because the server will never respond with fractions of a second.\r\n    return Number(responseExpiresIn.replace('s', '000'));\r\n}\r\nfunction getAuthorizationHeader(refreshToken) {\r\n    return `${INTERNAL_AUTH_VERSION} ${refreshToken}`;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nasync function createInstallationRequest({ appConfig, heartbeatServiceProvider }, { fid }) {\r\n    const endpoint = getInstallationsEndpoint(appConfig);\r\n    const headers = getHeaders(appConfig);\r\n    // If heartbeat service exists, add the heartbeat string to the header.\r\n    const heartbeatService = heartbeatServiceProvider.getImmediate({\r\n        optional: true\r\n    });\r\n    if (heartbeatService) {\r\n        const heartbeatsHeader = await heartbeatService.getHeartbeatsHeader();\r\n        if (heartbeatsHeader) {\r\n            headers.append('x-firebase-client', heartbeatsHeader);\r\n        }\r\n    }\r\n    const body = {\r\n        fid,\r\n        authVersion: INTERNAL_AUTH_VERSION,\r\n        appId: appConfig.appId,\r\n        sdkVersion: PACKAGE_VERSION\r\n    };\r\n    const request = {\r\n        method: 'POST',\r\n        headers,\r\n        body: JSON.stringify(body)\r\n    };\r\n    const response = await retryIfServerError(() => fetch(endpoint, request));\r\n    if (response.ok) {\r\n        const responseValue = await response.json();\r\n        const registeredInstallationEntry = {\r\n            fid: responseValue.fid || fid,\r\n            registrationStatus: 2 /* COMPLETED */,\r\n            refreshToken: responseValue.refreshToken,\r\n            authToken: extractAuthTokenInfoFromResponse(responseValue.authToken)\r\n        };\r\n        return registeredInstallationEntry;\r\n    }\r\n    else {\r\n        throw await getErrorFromResponse('Create Installation', response);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/** Returns a promise that resolves after given time passes. */\r\nfunction sleep(ms) {\r\n    return new Promise(resolve => {\r\n        setTimeout(resolve, ms);\r\n    });\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction bufferToBase64UrlSafe(array) {\r\n    const b64 = btoa(String.fromCharCode(...array));\r\n    return b64.replace(/\\+/g, '-').replace(/\\//g, '_');\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst VALID_FID_PATTERN = /^[cdef][\\w-]{21}$/;\r\nconst INVALID_FID = '';\r\n/**\r\n * Generates a new FID using random values from Web Crypto API.\r\n * Returns an empty string if FID generation fails for any reason.\r\n */\r\nfunction generateFid() {\r\n    try {\r\n        // A valid FID has exactly 22 base64 characters, which is 132 bits, or 16.5\r\n        // bytes. our implementation generates a 17 byte array instead.\r\n        const fidByteArray = new Uint8Array(17);\r\n        const crypto = self.crypto || self.msCrypto;\r\n        crypto.getRandomValues(fidByteArray);\r\n        // Replace the first 4 random bits with the constant FID header of 0b0111.\r\n        fidByteArray[0] = 0b01110000 + (fidByteArray[0] % 0b00010000);\r\n        const fid = encode(fidByteArray);\r\n        return VALID_FID_PATTERN.test(fid) ? fid : INVALID_FID;\r\n    }\r\n    catch (_a) {\r\n        // FID generation errored\r\n        return INVALID_FID;\r\n    }\r\n}\r\n/** Converts a FID Uint8Array to a base64 string representation. */\r\nfunction encode(fidByteArray) {\r\n    const b64String = bufferToBase64UrlSafe(fidByteArray);\r\n    // Remove the 23rd character that was added because of the extra 4 bits at the\r\n    // end of our 17 byte array, and the '=' padding.\r\n    return b64String.substr(0, 22);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/** Returns a string key that can be used to identify the app. */\r\nfunction getKey(appConfig) {\r\n    return `${appConfig.appName}!${appConfig.appId}`;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst fidChangeCallbacks = new Map();\r\n/**\r\n * Calls the onIdChange callbacks with the new FID value, and broadcasts the\r\n * change to other tabs.\r\n */\r\nfunction fidChanged(appConfig, fid) {\r\n    const key = getKey(appConfig);\r\n    callFidChangeCallbacks(key, fid);\r\n    broadcastFidChange(key, fid);\r\n}\r\nfunction addCallback(appConfig, callback) {\r\n    // Open the broadcast channel if it's not already open,\r\n    // to be able to listen to change events from other tabs.\r\n    getBroadcastChannel();\r\n    const key = getKey(appConfig);\r\n    let callbackSet = fidChangeCallbacks.get(key);\r\n    if (!callbackSet) {\r\n        callbackSet = new Set();\r\n        fidChangeCallbacks.set(key, callbackSet);\r\n    }\r\n    callbackSet.add(callback);\r\n}\r\nfunction removeCallback(appConfig, callback) {\r\n    const key = getKey(appConfig);\r\n    const callbackSet = fidChangeCallbacks.get(key);\r\n    if (!callbackSet) {\r\n        return;\r\n    }\r\n    callbackSet.delete(callback);\r\n    if (callbackSet.size === 0) {\r\n        fidChangeCallbacks.delete(key);\r\n    }\r\n    // Close broadcast channel if there are no more callbacks.\r\n    closeBroadcastChannel();\r\n}\r\nfunction callFidChangeCallbacks(key, fid) {\r\n    const callbacks = fidChangeCallbacks.get(key);\r\n    if (!callbacks) {\r\n        return;\r\n    }\r\n    for (const callback of callbacks) {\r\n        callback(fid);\r\n    }\r\n}\r\nfunction broadcastFidChange(key, fid) {\r\n    const channel = getBroadcastChannel();\r\n    if (channel) {\r\n        channel.postMessage({ key, fid });\r\n    }\r\n    closeBroadcastChannel();\r\n}\r\nlet broadcastChannel = null;\r\n/** Opens and returns a BroadcastChannel if it is supported by the browser. */\r\nfunction getBroadcastChannel() {\r\n    if (!broadcastChannel && 'BroadcastChannel' in self) {\r\n        broadcastChannel = new BroadcastChannel('[Firebase] FID Change');\r\n        broadcastChannel.onmessage = e => {\r\n            callFidChangeCallbacks(e.data.key, e.data.fid);\r\n        };\r\n    }\r\n    return broadcastChannel;\r\n}\r\nfunction closeBroadcastChannel() {\r\n    if (fidChangeCallbacks.size === 0 && broadcastChannel) {\r\n        broadcastChannel.close();\r\n        broadcastChannel = null;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst DATABASE_NAME = 'firebase-installations-database';\r\nconst DATABASE_VERSION = 1;\r\nconst OBJECT_STORE_NAME = 'firebase-installations-store';\r\nlet dbPromise = null;\r\nfunction getDbPromise() {\r\n    if (!dbPromise) {\r\n        dbPromise = openDB(DATABASE_NAME, DATABASE_VERSION, {\r\n            upgrade: (db, oldVersion) => {\r\n                // We don't use 'break' in this switch statement, the fall-through\r\n                // behavior is what we want, because if there are multiple versions between\r\n                // the old version and the current version, we want ALL the migrations\r\n                // that correspond to those versions to run, not only the last one.\r\n                // eslint-disable-next-line default-case\r\n                switch (oldVersion) {\r\n                    case 0:\r\n                        db.createObjectStore(OBJECT_STORE_NAME);\r\n                }\r\n            }\r\n        });\r\n    }\r\n    return dbPromise;\r\n}\r\n/** Assigns or overwrites the record for the given key with the given value. */\r\nasync function set(appConfig, value) {\r\n    const key = getKey(appConfig);\r\n    const db = await getDbPromise();\r\n    const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\r\n    const objectStore = tx.objectStore(OBJECT_STORE_NAME);\r\n    const oldValue = (await objectStore.get(key));\r\n    await objectStore.put(value, key);\r\n    await tx.done;\r\n    if (!oldValue || oldValue.fid !== value.fid) {\r\n        fidChanged(appConfig, value.fid);\r\n    }\r\n    return value;\r\n}\r\n/** Removes record(s) from the objectStore that match the given key. */\r\nasync function remove(appConfig) {\r\n    const key = getKey(appConfig);\r\n    const db = await getDbPromise();\r\n    const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\r\n    await tx.objectStore(OBJECT_STORE_NAME).delete(key);\r\n    await tx.done;\r\n}\r\n/**\r\n * Atomically updates a record with the result of updateFn, which gets\r\n * called with the current value. If newValue is undefined, the record is\r\n * deleted instead.\r\n * @return Updated value\r\n */\r\nasync function update(appConfig, updateFn) {\r\n    const key = getKey(appConfig);\r\n    const db = await getDbPromise();\r\n    const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\r\n    const store = tx.objectStore(OBJECT_STORE_NAME);\r\n    const oldValue = (await store.get(key));\r\n    const newValue = updateFn(oldValue);\r\n    if (newValue === undefined) {\r\n        await store.delete(key);\r\n    }\r\n    else {\r\n        await store.put(newValue, key);\r\n    }\r\n    await tx.done;\r\n    if (newValue && (!oldValue || oldValue.fid !== newValue.fid)) {\r\n        fidChanged(appConfig, newValue.fid);\r\n    }\r\n    return newValue;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Updates and returns the InstallationEntry from the database.\r\n * Also triggers a registration request if it is necessary and possible.\r\n */\r\nasync function getInstallationEntry(installations) {\r\n    let registrationPromise;\r\n    const installationEntry = await update(installations.appConfig, oldEntry => {\r\n        const installationEntry = updateOrCreateInstallationEntry(oldEntry);\r\n        const entryWithPromise = triggerRegistrationIfNecessary(installations, installationEntry);\r\n        registrationPromise = entryWithPromise.registrationPromise;\r\n        return entryWithPromise.installationEntry;\r\n    });\r\n    if (installationEntry.fid === INVALID_FID) {\r\n        // FID generation failed. Waiting for the FID from the server.\r\n        return { installationEntry: await registrationPromise };\r\n    }\r\n    return {\r\n        installationEntry,\r\n        registrationPromise\r\n    };\r\n}\r\n/**\r\n * Creates a new Installation Entry if one does not exist.\r\n * Also clears timed out pending requests.\r\n */\r\nfunction updateOrCreateInstallationEntry(oldEntry) {\r\n    const entry = oldEntry || {\r\n        fid: generateFid(),\r\n        registrationStatus: 0 /* NOT_STARTED */\r\n    };\r\n    return clearTimedOutRequest(entry);\r\n}\r\n/**\r\n * If the Firebase Installation is not registered yet, this will trigger the\r\n * registration and return an InProgressInstallationEntry.\r\n *\r\n * If registrationPromise does not exist, the installationEntry is guaranteed\r\n * to be registered.\r\n */\r\nfunction triggerRegistrationIfNecessary(installations, installationEntry) {\r\n    if (installationEntry.registrationStatus === 0 /* NOT_STARTED */) {\r\n        if (!navigator.onLine) {\r\n            // Registration required but app is offline.\r\n            const registrationPromiseWithError = Promise.reject(ERROR_FACTORY.create(\"app-offline\" /* APP_OFFLINE */));\r\n            return {\r\n                installationEntry,\r\n                registrationPromise: registrationPromiseWithError\r\n            };\r\n        }\r\n        // Try registering. Change status to IN_PROGRESS.\r\n        const inProgressEntry = {\r\n            fid: installationEntry.fid,\r\n            registrationStatus: 1 /* IN_PROGRESS */,\r\n            registrationTime: Date.now()\r\n        };\r\n        const registrationPromise = registerInstallation(installations, inProgressEntry);\r\n        return { installationEntry: inProgressEntry, registrationPromise };\r\n    }\r\n    else if (installationEntry.registrationStatus === 1 /* IN_PROGRESS */) {\r\n        return {\r\n            installationEntry,\r\n            registrationPromise: waitUntilFidRegistration(installations)\r\n        };\r\n    }\r\n    else {\r\n        return { installationEntry };\r\n    }\r\n}\r\n/** This will be executed only once for each new Firebase Installation. */\r\nasync function registerInstallation(installations, installationEntry) {\r\n    try {\r\n        const registeredInstallationEntry = await createInstallationRequest(installations, installationEntry);\r\n        return set(installations.appConfig, registeredInstallationEntry);\r\n    }\r\n    catch (e) {\r\n        if (isServerError(e) && e.customData.serverCode === 409) {\r\n            // Server returned a \"FID can not be used\" error.\r\n            // Generate a new ID next time.\r\n            await remove(installations.appConfig);\r\n        }\r\n        else {\r\n            // Registration failed. Set FID as not registered.\r\n            await set(installations.appConfig, {\r\n                fid: installationEntry.fid,\r\n                registrationStatus: 0 /* NOT_STARTED */\r\n            });\r\n        }\r\n        throw e;\r\n    }\r\n}\r\n/** Call if FID registration is pending in another request. */\r\nasync function waitUntilFidRegistration(installations) {\r\n    // Unfortunately, there is no way of reliably observing when a value in\r\n    // IndexedDB changes (yet, see https://github.com/WICG/indexed-db-observers),\r\n    // so we need to poll.\r\n    let entry = await updateInstallationRequest(installations.appConfig);\r\n    while (entry.registrationStatus === 1 /* IN_PROGRESS */) {\r\n        // createInstallation request still in progress.\r\n        await sleep(100);\r\n        entry = await updateInstallationRequest(installations.appConfig);\r\n    }\r\n    if (entry.registrationStatus === 0 /* NOT_STARTED */) {\r\n        // The request timed out or failed in a different call. Try again.\r\n        const { installationEntry, registrationPromise } = await getInstallationEntry(installations);\r\n        if (registrationPromise) {\r\n            return registrationPromise;\r\n        }\r\n        else {\r\n            // if there is no registrationPromise, entry is registered.\r\n            return installationEntry;\r\n        }\r\n    }\r\n    return entry;\r\n}\r\n/**\r\n * Called only if there is a CreateInstallation request in progress.\r\n *\r\n * Updates the InstallationEntry in the DB based on the status of the\r\n * CreateInstallation request.\r\n *\r\n * Returns the updated InstallationEntry.\r\n */\r\nfunction updateInstallationRequest(appConfig) {\r\n    return update(appConfig, oldEntry => {\r\n        if (!oldEntry) {\r\n            throw ERROR_FACTORY.create(\"installation-not-found\" /* INSTALLATION_NOT_FOUND */);\r\n        }\r\n        return clearTimedOutRequest(oldEntry);\r\n    });\r\n}\r\nfunction clearTimedOutRequest(entry) {\r\n    if (hasInstallationRequestTimedOut(entry)) {\r\n        return {\r\n            fid: entry.fid,\r\n            registrationStatus: 0 /* NOT_STARTED */\r\n        };\r\n    }\r\n    return entry;\r\n}\r\nfunction hasInstallationRequestTimedOut(installationEntry) {\r\n    return (installationEntry.registrationStatus === 1 /* IN_PROGRESS */ &&\r\n        installationEntry.registrationTime + PENDING_TIMEOUT_MS < Date.now());\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nasync function generateAuthTokenRequest({ appConfig, heartbeatServiceProvider }, installationEntry) {\r\n    const endpoint = getGenerateAuthTokenEndpoint(appConfig, installationEntry);\r\n    const headers = getHeadersWithAuth(appConfig, installationEntry);\r\n    // If heartbeat service exists, add the heartbeat string to the header.\r\n    const heartbeatService = heartbeatServiceProvider.getImmediate({\r\n        optional: true\r\n    });\r\n    if (heartbeatService) {\r\n        const heartbeatsHeader = await heartbeatService.getHeartbeatsHeader();\r\n        if (heartbeatsHeader) {\r\n            headers.append('x-firebase-client', heartbeatsHeader);\r\n        }\r\n    }\r\n    const body = {\r\n        installation: {\r\n            sdkVersion: PACKAGE_VERSION,\r\n            appId: appConfig.appId\r\n        }\r\n    };\r\n    const request = {\r\n        method: 'POST',\r\n        headers,\r\n        body: JSON.stringify(body)\r\n    };\r\n    const response = await retryIfServerError(() => fetch(endpoint, request));\r\n    if (response.ok) {\r\n        const responseValue = await response.json();\r\n        const completedAuthToken = extractAuthTokenInfoFromResponse(responseValue);\r\n        return completedAuthToken;\r\n    }\r\n    else {\r\n        throw await getErrorFromResponse('Generate Auth Token', response);\r\n    }\r\n}\r\nfunction getGenerateAuthTokenEndpoint(appConfig, { fid }) {\r\n    return `${getInstallationsEndpoint(appConfig)}/${fid}/authTokens:generate`;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns a valid authentication token for the installation. Generates a new\r\n * token if one doesn't exist, is expired or about to expire.\r\n *\r\n * Should only be called if the Firebase Installation is registered.\r\n */\r\nasync function refreshAuthToken(installations, forceRefresh = false) {\r\n    let tokenPromise;\r\n    const entry = await update(installations.appConfig, oldEntry => {\r\n        if (!isEntryRegistered(oldEntry)) {\r\n            throw ERROR_FACTORY.create(\"not-registered\" /* NOT_REGISTERED */);\r\n        }\r\n        const oldAuthToken = oldEntry.authToken;\r\n        if (!forceRefresh && isAuthTokenValid(oldAuthToken)) {\r\n            // There is a valid token in the DB.\r\n            return oldEntry;\r\n        }\r\n        else if (oldAuthToken.requestStatus === 1 /* IN_PROGRESS */) {\r\n            // There already is a token request in progress.\r\n            tokenPromise = waitUntilAuthTokenRequest(installations, forceRefresh);\r\n            return oldEntry;\r\n        }\r\n        else {\r\n            // No token or token expired.\r\n            if (!navigator.onLine) {\r\n                throw ERROR_FACTORY.create(\"app-offline\" /* APP_OFFLINE */);\r\n            }\r\n            const inProgressEntry = makeAuthTokenRequestInProgressEntry(oldEntry);\r\n            tokenPromise = fetchAuthTokenFromServer(installations, inProgressEntry);\r\n            return inProgressEntry;\r\n        }\r\n    });\r\n    const authToken = tokenPromise\r\n        ? await tokenPromise\r\n        : entry.authToken;\r\n    return authToken;\r\n}\r\n/**\r\n * Call only if FID is registered and Auth Token request is in progress.\r\n *\r\n * Waits until the current pending request finishes. If the request times out,\r\n * tries once in this thread as well.\r\n */\r\nasync function waitUntilAuthTokenRequest(installations, forceRefresh) {\r\n    // Unfortunately, there is no way of reliably observing when a value in\r\n    // IndexedDB changes (yet, see https://github.com/WICG/indexed-db-observers),\r\n    // so we need to poll.\r\n    let entry = await updateAuthTokenRequest(installations.appConfig);\r\n    while (entry.authToken.requestStatus === 1 /* IN_PROGRESS */) {\r\n        // generateAuthToken still in progress.\r\n        await sleep(100);\r\n        entry = await updateAuthTokenRequest(installations.appConfig);\r\n    }\r\n    const authToken = entry.authToken;\r\n    if (authToken.requestStatus === 0 /* NOT_STARTED */) {\r\n        // The request timed out or failed in a different call. Try again.\r\n        return refreshAuthToken(installations, forceRefresh);\r\n    }\r\n    else {\r\n        return authToken;\r\n    }\r\n}\r\n/**\r\n * Called only if there is a GenerateAuthToken request in progress.\r\n *\r\n * Updates the InstallationEntry in the DB based on the status of the\r\n * GenerateAuthToken request.\r\n *\r\n * Returns the updated InstallationEntry.\r\n */\r\nfunction updateAuthTokenRequest(appConfig) {\r\n    return update(appConfig, oldEntry => {\r\n        if (!isEntryRegistered(oldEntry)) {\r\n            throw ERROR_FACTORY.create(\"not-registered\" /* NOT_REGISTERED */);\r\n        }\r\n        const oldAuthToken = oldEntry.authToken;\r\n        if (hasAuthTokenRequestTimedOut(oldAuthToken)) {\r\n            return Object.assign(Object.assign({}, oldEntry), { authToken: { requestStatus: 0 /* NOT_STARTED */ } });\r\n        }\r\n        return oldEntry;\r\n    });\r\n}\r\nasync function fetchAuthTokenFromServer(installations, installationEntry) {\r\n    try {\r\n        const authToken = await generateAuthTokenRequest(installations, installationEntry);\r\n        const updatedInstallationEntry = Object.assign(Object.assign({}, installationEntry), { authToken });\r\n        await set(installations.appConfig, updatedInstallationEntry);\r\n        return authToken;\r\n    }\r\n    catch (e) {\r\n        if (isServerError(e) &&\r\n            (e.customData.serverCode === 401 || e.customData.serverCode === 404)) {\r\n            // Server returned a \"FID not found\" or a \"Invalid authentication\" error.\r\n            // Generate a new ID next time.\r\n            await remove(installations.appConfig);\r\n        }\r\n        else {\r\n            const updatedInstallationEntry = Object.assign(Object.assign({}, installationEntry), { authToken: { requestStatus: 0 /* NOT_STARTED */ } });\r\n            await set(installations.appConfig, updatedInstallationEntry);\r\n        }\r\n        throw e;\r\n    }\r\n}\r\nfunction isEntryRegistered(installationEntry) {\r\n    return (installationEntry !== undefined &&\r\n        installationEntry.registrationStatus === 2 /* COMPLETED */);\r\n}\r\nfunction isAuthTokenValid(authToken) {\r\n    return (authToken.requestStatus === 2 /* COMPLETED */ &&\r\n        !isAuthTokenExpired(authToken));\r\n}\r\nfunction isAuthTokenExpired(authToken) {\r\n    const now = Date.now();\r\n    return (now < authToken.creationTime ||\r\n        authToken.creationTime + authToken.expiresIn < now + TOKEN_EXPIRATION_BUFFER);\r\n}\r\n/** Returns an updated InstallationEntry with an InProgressAuthToken. */\r\nfunction makeAuthTokenRequestInProgressEntry(oldEntry) {\r\n    const inProgressAuthToken = {\r\n        requestStatus: 1 /* IN_PROGRESS */,\r\n        requestTime: Date.now()\r\n    };\r\n    return Object.assign(Object.assign({}, oldEntry), { authToken: inProgressAuthToken });\r\n}\r\nfunction hasAuthTokenRequestTimedOut(authToken) {\r\n    return (authToken.requestStatus === 1 /* IN_PROGRESS */ &&\r\n        authToken.requestTime + PENDING_TIMEOUT_MS < Date.now());\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Creates a Firebase Installation if there isn't one for the app and\r\n * returns the Installation ID.\r\n * @param installations - The `Installations` instance.\r\n *\r\n * @public\r\n */\r\nasync function getId(installations) {\r\n    const installationsImpl = installations;\r\n    const { installationEntry, registrationPromise } = await getInstallationEntry(installationsImpl);\r\n    if (registrationPromise) {\r\n        registrationPromise.catch(console.error);\r\n    }\r\n    else {\r\n        // If the installation is already registered, update the authentication\r\n        // token if needed.\r\n        refreshAuthToken(installationsImpl).catch(console.error);\r\n    }\r\n    return installationEntry.fid;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns a Firebase Installations auth token, identifying the current\r\n * Firebase Installation.\r\n * @param installations - The `Installations` instance.\r\n * @param forceRefresh - Force refresh regardless of token expiration.\r\n *\r\n * @public\r\n */\r\nasync function getToken(installations, forceRefresh = false) {\r\n    const installationsImpl = installations;\r\n    await completeInstallationRegistration(installationsImpl);\r\n    // At this point we either have a Registered Installation in the DB, or we've\r\n    // already thrown an error.\r\n    const authToken = await refreshAuthToken(installationsImpl, forceRefresh);\r\n    return authToken.token;\r\n}\r\nasync function completeInstallationRegistration(installations) {\r\n    const { registrationPromise } = await getInstallationEntry(installations);\r\n    if (registrationPromise) {\r\n        // A createInstallation request is in progress. Wait until it finishes.\r\n        await registrationPromise;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nasync function deleteInstallationRequest(appConfig, installationEntry) {\r\n    const endpoint = getDeleteEndpoint(appConfig, installationEntry);\r\n    const headers = getHeadersWithAuth(appConfig, installationEntry);\r\n    const request = {\r\n        method: 'DELETE',\r\n        headers\r\n    };\r\n    const response = await retryIfServerError(() => fetch(endpoint, request));\r\n    if (!response.ok) {\r\n        throw await getErrorFromResponse('Delete Installation', response);\r\n    }\r\n}\r\nfunction getDeleteEndpoint(appConfig, { fid }) {\r\n    return `${getInstallationsEndpoint(appConfig)}/${fid}`;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Deletes the Firebase Installation and all associated data.\r\n * @param installations - The `Installations` instance.\r\n *\r\n * @public\r\n */\r\nasync function deleteInstallations(installations) {\r\n    const { appConfig } = installations;\r\n    const entry = await update(appConfig, oldEntry => {\r\n        if (oldEntry && oldEntry.registrationStatus === 0 /* NOT_STARTED */) {\r\n            // Delete the unregistered entry without sending a deleteInstallation request.\r\n            return undefined;\r\n        }\r\n        return oldEntry;\r\n    });\r\n    if (entry) {\r\n        if (entry.registrationStatus === 1 /* IN_PROGRESS */) {\r\n            // Can't delete while trying to register.\r\n            throw ERROR_FACTORY.create(\"delete-pending-registration\" /* DELETE_PENDING_REGISTRATION */);\r\n        }\r\n        else if (entry.registrationStatus === 2 /* COMPLETED */) {\r\n            if (!navigator.onLine) {\r\n                throw ERROR_FACTORY.create(\"app-offline\" /* APP_OFFLINE */);\r\n            }\r\n            else {\r\n                await deleteInstallationRequest(appConfig, entry);\r\n                await remove(appConfig);\r\n            }\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Sets a new callback that will get called when Installation ID changes.\r\n * Returns an unsubscribe function that will remove the callback when called.\r\n * @param installations - The `Installations` instance.\r\n * @param callback - The callback function that is invoked when FID changes.\r\n * @returns A function that can be called to unsubscribe.\r\n *\r\n * @public\r\n */\r\nfunction onIdChange(installations, callback) {\r\n    const { appConfig } = installations;\r\n    addCallback(appConfig, callback);\r\n    return () => {\r\n        removeCallback(appConfig, callback);\r\n    };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns an instance of {@link Installations} associated with the given\r\n * {@link @firebase/app#FirebaseApp} instance.\r\n * @param app - The {@link @firebase/app#FirebaseApp} instance.\r\n *\r\n * @public\r\n */\r\nfunction getInstallations(app = getApp()) {\r\n    const installationsImpl = _getProvider(app, 'installations').getImmediate();\r\n    return installationsImpl;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction extractAppConfig(app) {\r\n    if (!app || !app.options) {\r\n        throw getMissingValueError('App Configuration');\r\n    }\r\n    if (!app.name) {\r\n        throw getMissingValueError('App Name');\r\n    }\r\n    // Required app config keys\r\n    const configKeys = [\r\n        'projectId',\r\n        'apiKey',\r\n        'appId'\r\n    ];\r\n    for (const keyName of configKeys) {\r\n        if (!app.options[keyName]) {\r\n            throw getMissingValueError(keyName);\r\n        }\r\n    }\r\n    return {\r\n        appName: app.name,\r\n        projectId: app.options.projectId,\r\n        apiKey: app.options.apiKey,\r\n        appId: app.options.appId\r\n    };\r\n}\r\nfunction getMissingValueError(valueName) {\r\n    return ERROR_FACTORY.create(\"missing-app-config-values\" /* MISSING_APP_CONFIG_VALUES */, {\r\n        valueName\r\n    });\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst INSTALLATIONS_NAME = 'installations';\r\nconst INSTALLATIONS_NAME_INTERNAL = 'installations-internal';\r\nconst publicFactory = (container) => {\r\n    const app = container.getProvider('app').getImmediate();\r\n    // Throws if app isn't configured properly.\r\n    const appConfig = extractAppConfig(app);\r\n    const heartbeatServiceProvider = _getProvider(app, 'heartbeat');\r\n    const installationsImpl = {\r\n        app,\r\n        appConfig,\r\n        heartbeatServiceProvider,\r\n        _delete: () => Promise.resolve()\r\n    };\r\n    return installationsImpl;\r\n};\r\nconst internalFactory = (container) => {\r\n    const app = container.getProvider('app').getImmediate();\r\n    // Internal FIS instance relies on public FIS instance.\r\n    const installations = _getProvider(app, INSTALLATIONS_NAME).getImmediate();\r\n    const installationsInternal = {\r\n        getId: () => getId(installations),\r\n        getToken: (forceRefresh) => getToken(installations, forceRefresh)\r\n    };\r\n    return installationsInternal;\r\n};\r\nfunction registerInstallations() {\r\n    _registerComponent(new Component(INSTALLATIONS_NAME, publicFactory, \"PUBLIC\" /* PUBLIC */));\r\n    _registerComponent(new Component(INSTALLATIONS_NAME_INTERNAL, internalFactory, \"PRIVATE\" /* PRIVATE */));\r\n}\n\n/**\r\n * Firebase Installations\r\n *\r\n * @packageDocumentation\r\n */\r\nregisterInstallations();\r\nregisterVersion(name, version);\r\n// BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\r\nregisterVersion(name, version, 'esm2017');\n\nexport { deleteInstallations, getId, getInstallations, getToken, onIdChange };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}