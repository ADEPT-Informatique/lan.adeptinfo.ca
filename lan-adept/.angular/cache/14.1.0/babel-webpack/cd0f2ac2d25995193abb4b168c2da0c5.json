{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * A container for all of the Logger instances\r\n */\nconst instances = [];\n/**\r\n * The JS SDK supports 5 log levels and also allows a user the ability to\r\n * silence the logs altogether.\r\n *\r\n * The order is a follows:\r\n * DEBUG < VERBOSE < INFO < WARN < ERROR\r\n *\r\n * All of the log types above the current log level will be captured (i.e. if\r\n * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and\r\n * `VERBOSE` logs will not)\r\n */\n\nvar LogLevel;\n\n(function (LogLevel) {\n  LogLevel[LogLevel[\"DEBUG\"] = 0] = \"DEBUG\";\n  LogLevel[LogLevel[\"VERBOSE\"] = 1] = \"VERBOSE\";\n  LogLevel[LogLevel[\"INFO\"] = 2] = \"INFO\";\n  LogLevel[LogLevel[\"WARN\"] = 3] = \"WARN\";\n  LogLevel[LogLevel[\"ERROR\"] = 4] = \"ERROR\";\n  LogLevel[LogLevel[\"SILENT\"] = 5] = \"SILENT\";\n})(LogLevel || (LogLevel = {}));\n\nconst levelStringToEnum = {\n  'debug': LogLevel.DEBUG,\n  'verbose': LogLevel.VERBOSE,\n  'info': LogLevel.INFO,\n  'warn': LogLevel.WARN,\n  'error': LogLevel.ERROR,\n  'silent': LogLevel.SILENT\n};\n/**\r\n * The default log level\r\n */\n\nconst defaultLogLevel = LogLevel.INFO;\n/**\r\n * By default, `console.debug` is not displayed in the developer console (in\r\n * chrome). To avoid forcing users to have to opt-in to these logs twice\r\n * (i.e. once for firebase, and once in the console), we are sending `DEBUG`\r\n * logs to the `console.log` function.\r\n */\n\nconst ConsoleMethod = {\n  [LogLevel.DEBUG]: 'log',\n  [LogLevel.VERBOSE]: 'log',\n  [LogLevel.INFO]: 'info',\n  [LogLevel.WARN]: 'warn',\n  [LogLevel.ERROR]: 'error'\n};\n/**\r\n * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR\r\n * messages on to their corresponding console counterparts (if the log method\r\n * is supported by the current log level)\r\n */\n\nconst defaultLogHandler = (instance, logType, ...args) => {\n  if (logType < instance.logLevel) {\n    return;\n  }\n\n  const now = new Date().toISOString();\n  const method = ConsoleMethod[logType];\n\n  if (method) {\n    console[method](`[${now}]  ${instance.name}:`, ...args);\n  } else {\n    throw new Error(`Attempted to log a message with an invalid logType (value: ${logType})`);\n  }\n};\n\nclass Logger {\n  /**\r\n   * Gives you an instance of a Logger to capture messages according to\r\n   * Firebase's logging scheme.\r\n   *\r\n   * @param name The name that the logs will be associated with\r\n   */\n  constructor(name) {\n    this.name = name;\n    /**\r\n     * The log level of the given Logger instance.\r\n     */\n\n    this._logLevel = defaultLogLevel;\n    /**\r\n     * The main (internal) log handler for the Logger instance.\r\n     * Can be set to a new function in internal package code but not by user.\r\n     */\n\n    this._logHandler = defaultLogHandler;\n    /**\r\n     * The optional, additional, user-defined log handler for the Logger instance.\r\n     */\n\n    this._userLogHandler = null;\n    /**\r\n     * Capture the current instance for later use\r\n     */\n\n    instances.push(this);\n  }\n\n  get logLevel() {\n    return this._logLevel;\n  }\n\n  set logLevel(val) {\n    if (!(val in LogLevel)) {\n      throw new TypeError(`Invalid value \"${val}\" assigned to \\`logLevel\\``);\n    }\n\n    this._logLevel = val;\n  } // Workaround for setter/getter having to be the same type.\n\n\n  setLogLevel(val) {\n    this._logLevel = typeof val === 'string' ? levelStringToEnum[val] : val;\n  }\n\n  get logHandler() {\n    return this._logHandler;\n  }\n\n  set logHandler(val) {\n    if (typeof val !== 'function') {\n      throw new TypeError('Value assigned to `logHandler` must be a function');\n    }\n\n    this._logHandler = val;\n  }\n\n  get userLogHandler() {\n    return this._userLogHandler;\n  }\n\n  set userLogHandler(val) {\n    this._userLogHandler = val;\n  }\n  /**\r\n   * The functions below are all based on the `console` interface\r\n   */\n\n\n  debug(...args) {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.DEBUG, ...args);\n\n    this._logHandler(this, LogLevel.DEBUG, ...args);\n  }\n\n  log(...args) {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.VERBOSE, ...args);\n\n    this._logHandler(this, LogLevel.VERBOSE, ...args);\n  }\n\n  info(...args) {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.INFO, ...args);\n\n    this._logHandler(this, LogLevel.INFO, ...args);\n  }\n\n  warn(...args) {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.WARN, ...args);\n\n    this._logHandler(this, LogLevel.WARN, ...args);\n  }\n\n  error(...args) {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.ERROR, ...args);\n\n    this._logHandler(this, LogLevel.ERROR, ...args);\n  }\n\n}\n\nfunction setLogLevel(level) {\n  instances.forEach(inst => {\n    inst.setLogLevel(level);\n  });\n}\n\nfunction setUserLogHandler(logCallback, options) {\n  for (const instance of instances) {\n    let customLogLevel = null;\n\n    if (options && options.level) {\n      customLogLevel = levelStringToEnum[options.level];\n    }\n\n    if (logCallback === null) {\n      instance.userLogHandler = null;\n    } else {\n      instance.userLogHandler = (instance, level, ...args) => {\n        const message = args.map(arg => {\n          if (arg == null) {\n            return null;\n          } else if (typeof arg === 'string') {\n            return arg;\n          } else if (typeof arg === 'number' || typeof arg === 'boolean') {\n            return arg.toString();\n          } else if (arg instanceof Error) {\n            return arg.message;\n          } else {\n            try {\n              return JSON.stringify(arg);\n            } catch (ignored) {\n              return null;\n            }\n          }\n        }).filter(arg => arg).join(' ');\n\n        if (level >= (customLogLevel !== null && customLogLevel !== void 0 ? customLogLevel : instance.logLevel)) {\n          logCallback({\n            level: LogLevel[level].toLowerCase(),\n            message,\n            args,\n            type: instance.name\n          });\n        }\n      };\n    }\n  }\n}\n\nexport { LogLevel, Logger, setLogLevel, setUserLogHandler };","map":{"version":3,"names":["instances","LogLevel","levelStringToEnum","DEBUG","VERBOSE","INFO","WARN","ERROR","SILENT","defaultLogLevel","ConsoleMethod","defaultLogHandler","instance","logType","args","logLevel","now","Date","toISOString","method","console","name","Error","Logger","constructor","_logLevel","_logHandler","_userLogHandler","push","val","TypeError","setLogLevel","logHandler","userLogHandler","debug","log","info","warn","error","level","forEach","inst","setUserLogHandler","logCallback","options","customLogLevel","message","map","arg","toString","JSON","stringify","ignored","filter","join","toLowerCase","type"],"sources":["C:/Users/Felix/Desktop/lan.adeptinfo.ca/lan-adept/node_modules/@firebase/logger/dist/esm/index.esm2017.js"],"sourcesContent":["/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A container for all of the Logger instances\r\n */\r\nconst instances = [];\r\n/**\r\n * The JS SDK supports 5 log levels and also allows a user the ability to\r\n * silence the logs altogether.\r\n *\r\n * The order is a follows:\r\n * DEBUG < VERBOSE < INFO < WARN < ERROR\r\n *\r\n * All of the log types above the current log level will be captured (i.e. if\r\n * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and\r\n * `VERBOSE` logs will not)\r\n */\r\nvar LogLevel;\r\n(function (LogLevel) {\r\n    LogLevel[LogLevel[\"DEBUG\"] = 0] = \"DEBUG\";\r\n    LogLevel[LogLevel[\"VERBOSE\"] = 1] = \"VERBOSE\";\r\n    LogLevel[LogLevel[\"INFO\"] = 2] = \"INFO\";\r\n    LogLevel[LogLevel[\"WARN\"] = 3] = \"WARN\";\r\n    LogLevel[LogLevel[\"ERROR\"] = 4] = \"ERROR\";\r\n    LogLevel[LogLevel[\"SILENT\"] = 5] = \"SILENT\";\r\n})(LogLevel || (LogLevel = {}));\r\nconst levelStringToEnum = {\r\n    'debug': LogLevel.DEBUG,\r\n    'verbose': LogLevel.VERBOSE,\r\n    'info': LogLevel.INFO,\r\n    'warn': LogLevel.WARN,\r\n    'error': LogLevel.ERROR,\r\n    'silent': LogLevel.SILENT\r\n};\r\n/**\r\n * The default log level\r\n */\r\nconst defaultLogLevel = LogLevel.INFO;\r\n/**\r\n * By default, `console.debug` is not displayed in the developer console (in\r\n * chrome). To avoid forcing users to have to opt-in to these logs twice\r\n * (i.e. once for firebase, and once in the console), we are sending `DEBUG`\r\n * logs to the `console.log` function.\r\n */\r\nconst ConsoleMethod = {\r\n    [LogLevel.DEBUG]: 'log',\r\n    [LogLevel.VERBOSE]: 'log',\r\n    [LogLevel.INFO]: 'info',\r\n    [LogLevel.WARN]: 'warn',\r\n    [LogLevel.ERROR]: 'error'\r\n};\r\n/**\r\n * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR\r\n * messages on to their corresponding console counterparts (if the log method\r\n * is supported by the current log level)\r\n */\r\nconst defaultLogHandler = (instance, logType, ...args) => {\r\n    if (logType < instance.logLevel) {\r\n        return;\r\n    }\r\n    const now = new Date().toISOString();\r\n    const method = ConsoleMethod[logType];\r\n    if (method) {\r\n        console[method](`[${now}]  ${instance.name}:`, ...args);\r\n    }\r\n    else {\r\n        throw new Error(`Attempted to log a message with an invalid logType (value: ${logType})`);\r\n    }\r\n};\r\nclass Logger {\r\n    /**\r\n     * Gives you an instance of a Logger to capture messages according to\r\n     * Firebase's logging scheme.\r\n     *\r\n     * @param name The name that the logs will be associated with\r\n     */\r\n    constructor(name) {\r\n        this.name = name;\r\n        /**\r\n         * The log level of the given Logger instance.\r\n         */\r\n        this._logLevel = defaultLogLevel;\r\n        /**\r\n         * The main (internal) log handler for the Logger instance.\r\n         * Can be set to a new function in internal package code but not by user.\r\n         */\r\n        this._logHandler = defaultLogHandler;\r\n        /**\r\n         * The optional, additional, user-defined log handler for the Logger instance.\r\n         */\r\n        this._userLogHandler = null;\r\n        /**\r\n         * Capture the current instance for later use\r\n         */\r\n        instances.push(this);\r\n    }\r\n    get logLevel() {\r\n        return this._logLevel;\r\n    }\r\n    set logLevel(val) {\r\n        if (!(val in LogLevel)) {\r\n            throw new TypeError(`Invalid value \"${val}\" assigned to \\`logLevel\\``);\r\n        }\r\n        this._logLevel = val;\r\n    }\r\n    // Workaround for setter/getter having to be the same type.\r\n    setLogLevel(val) {\r\n        this._logLevel = typeof val === 'string' ? levelStringToEnum[val] : val;\r\n    }\r\n    get logHandler() {\r\n        return this._logHandler;\r\n    }\r\n    set logHandler(val) {\r\n        if (typeof val !== 'function') {\r\n            throw new TypeError('Value assigned to `logHandler` must be a function');\r\n        }\r\n        this._logHandler = val;\r\n    }\r\n    get userLogHandler() {\r\n        return this._userLogHandler;\r\n    }\r\n    set userLogHandler(val) {\r\n        this._userLogHandler = val;\r\n    }\r\n    /**\r\n     * The functions below are all based on the `console` interface\r\n     */\r\n    debug(...args) {\r\n        this._userLogHandler && this._userLogHandler(this, LogLevel.DEBUG, ...args);\r\n        this._logHandler(this, LogLevel.DEBUG, ...args);\r\n    }\r\n    log(...args) {\r\n        this._userLogHandler &&\r\n            this._userLogHandler(this, LogLevel.VERBOSE, ...args);\r\n        this._logHandler(this, LogLevel.VERBOSE, ...args);\r\n    }\r\n    info(...args) {\r\n        this._userLogHandler && this._userLogHandler(this, LogLevel.INFO, ...args);\r\n        this._logHandler(this, LogLevel.INFO, ...args);\r\n    }\r\n    warn(...args) {\r\n        this._userLogHandler && this._userLogHandler(this, LogLevel.WARN, ...args);\r\n        this._logHandler(this, LogLevel.WARN, ...args);\r\n    }\r\n    error(...args) {\r\n        this._userLogHandler && this._userLogHandler(this, LogLevel.ERROR, ...args);\r\n        this._logHandler(this, LogLevel.ERROR, ...args);\r\n    }\r\n}\r\nfunction setLogLevel(level) {\r\n    instances.forEach(inst => {\r\n        inst.setLogLevel(level);\r\n    });\r\n}\r\nfunction setUserLogHandler(logCallback, options) {\r\n    for (const instance of instances) {\r\n        let customLogLevel = null;\r\n        if (options && options.level) {\r\n            customLogLevel = levelStringToEnum[options.level];\r\n        }\r\n        if (logCallback === null) {\r\n            instance.userLogHandler = null;\r\n        }\r\n        else {\r\n            instance.userLogHandler = (instance, level, ...args) => {\r\n                const message = args\r\n                    .map(arg => {\r\n                    if (arg == null) {\r\n                        return null;\r\n                    }\r\n                    else if (typeof arg === 'string') {\r\n                        return arg;\r\n                    }\r\n                    else if (typeof arg === 'number' || typeof arg === 'boolean') {\r\n                        return arg.toString();\r\n                    }\r\n                    else if (arg instanceof Error) {\r\n                        return arg.message;\r\n                    }\r\n                    else {\r\n                        try {\r\n                            return JSON.stringify(arg);\r\n                        }\r\n                        catch (ignored) {\r\n                            return null;\r\n                        }\r\n                    }\r\n                })\r\n                    .filter(arg => arg)\r\n                    .join(' ');\r\n                if (level >= (customLogLevel !== null && customLogLevel !== void 0 ? customLogLevel : instance.logLevel)) {\r\n                    logCallback({\r\n                        level: LogLevel[level].toLowerCase(),\r\n                        message,\r\n                        args,\r\n                        type: instance.name\r\n                    });\r\n                }\r\n            };\r\n        }\r\n    }\r\n}\n\nexport { LogLevel, Logger, setLogLevel, setUserLogHandler };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA,MAAMA,SAAS,GAAG,EAAlB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,QAAJ;;AACA,CAAC,UAAUA,QAAV,EAAoB;EACjBA,QAAQ,CAACA,QAAQ,CAAC,OAAD,CAAR,GAAoB,CAArB,CAAR,GAAkC,OAAlC;EACAA,QAAQ,CAACA,QAAQ,CAAC,SAAD,CAAR,GAAsB,CAAvB,CAAR,GAAoC,SAApC;EACAA,QAAQ,CAACA,QAAQ,CAAC,MAAD,CAAR,GAAmB,CAApB,CAAR,GAAiC,MAAjC;EACAA,QAAQ,CAACA,QAAQ,CAAC,MAAD,CAAR,GAAmB,CAApB,CAAR,GAAiC,MAAjC;EACAA,QAAQ,CAACA,QAAQ,CAAC,OAAD,CAAR,GAAoB,CAArB,CAAR,GAAkC,OAAlC;EACAA,QAAQ,CAACA,QAAQ,CAAC,QAAD,CAAR,GAAqB,CAAtB,CAAR,GAAmC,QAAnC;AACH,CAPD,EAOGA,QAAQ,KAAKA,QAAQ,GAAG,EAAhB,CAPX;;AAQA,MAAMC,iBAAiB,GAAG;EACtB,SAASD,QAAQ,CAACE,KADI;EAEtB,WAAWF,QAAQ,CAACG,OAFE;EAGtB,QAAQH,QAAQ,CAACI,IAHK;EAItB,QAAQJ,QAAQ,CAACK,IAJK;EAKtB,SAASL,QAAQ,CAACM,KALI;EAMtB,UAAUN,QAAQ,CAACO;AANG,CAA1B;AAQA;AACA;AACA;;AACA,MAAMC,eAAe,GAAGR,QAAQ,CAACI,IAAjC;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMK,aAAa,GAAG;EAClB,CAACT,QAAQ,CAACE,KAAV,GAAkB,KADA;EAElB,CAACF,QAAQ,CAACG,OAAV,GAAoB,KAFF;EAGlB,CAACH,QAAQ,CAACI,IAAV,GAAiB,MAHC;EAIlB,CAACJ,QAAQ,CAACK,IAAV,GAAiB,MAJC;EAKlB,CAACL,QAAQ,CAACM,KAAV,GAAkB;AALA,CAAtB;AAOA;AACA;AACA;AACA;AACA;;AACA,MAAMI,iBAAiB,GAAG,CAACC,QAAD,EAAWC,OAAX,EAAoB,GAAGC,IAAvB,KAAgC;EACtD,IAAID,OAAO,GAAGD,QAAQ,CAACG,QAAvB,EAAiC;IAC7B;EACH;;EACD,MAAMC,GAAG,GAAG,IAAIC,IAAJ,GAAWC,WAAX,EAAZ;EACA,MAAMC,MAAM,GAAGT,aAAa,CAACG,OAAD,CAA5B;;EACA,IAAIM,MAAJ,EAAY;IACRC,OAAO,CAACD,MAAD,CAAP,CAAiB,IAAGH,GAAI,MAAKJ,QAAQ,CAACS,IAAK,GAA3C,EAA+C,GAAGP,IAAlD;EACH,CAFD,MAGK;IACD,MAAM,IAAIQ,KAAJ,CAAW,8DAA6DT,OAAQ,GAAhF,CAAN;EACH;AACJ,CAZD;;AAaA,MAAMU,MAAN,CAAa;EACT;AACJ;AACA;AACA;AACA;AACA;EACIC,WAAW,CAACH,IAAD,EAAO;IACd,KAAKA,IAAL,GAAYA,IAAZ;IACA;AACR;AACA;;IACQ,KAAKI,SAAL,GAAiBhB,eAAjB;IACA;AACR;AACA;AACA;;IACQ,KAAKiB,WAAL,GAAmBf,iBAAnB;IACA;AACR;AACA;;IACQ,KAAKgB,eAAL,GAAuB,IAAvB;IACA;AACR;AACA;;IACQ3B,SAAS,CAAC4B,IAAV,CAAe,IAAf;EACH;;EACW,IAARb,QAAQ,GAAG;IACX,OAAO,KAAKU,SAAZ;EACH;;EACW,IAARV,QAAQ,CAACc,GAAD,EAAM;IACd,IAAI,EAAEA,GAAG,IAAI5B,QAAT,CAAJ,EAAwB;MACpB,MAAM,IAAI6B,SAAJ,CAAe,kBAAiBD,GAAI,4BAApC,CAAN;IACH;;IACD,KAAKJ,SAAL,GAAiBI,GAAjB;EACH,CAnCQ,CAoCT;;;EACAE,WAAW,CAACF,GAAD,EAAM;IACb,KAAKJ,SAAL,GAAiB,OAAOI,GAAP,KAAe,QAAf,GAA0B3B,iBAAiB,CAAC2B,GAAD,CAA3C,GAAmDA,GAApE;EACH;;EACa,IAAVG,UAAU,GAAG;IACb,OAAO,KAAKN,WAAZ;EACH;;EACa,IAAVM,UAAU,CAACH,GAAD,EAAM;IAChB,IAAI,OAAOA,GAAP,KAAe,UAAnB,EAA+B;MAC3B,MAAM,IAAIC,SAAJ,CAAc,mDAAd,CAAN;IACH;;IACD,KAAKJ,WAAL,GAAmBG,GAAnB;EACH;;EACiB,IAAdI,cAAc,GAAG;IACjB,OAAO,KAAKN,eAAZ;EACH;;EACiB,IAAdM,cAAc,CAACJ,GAAD,EAAM;IACpB,KAAKF,eAAL,GAAuBE,GAAvB;EACH;EACD;AACJ;AACA;;;EACIK,KAAK,CAAC,GAAGpB,IAAJ,EAAU;IACX,KAAKa,eAAL,IAAwB,KAAKA,eAAL,CAAqB,IAArB,EAA2B1B,QAAQ,CAACE,KAApC,EAA2C,GAAGW,IAA9C,CAAxB;;IACA,KAAKY,WAAL,CAAiB,IAAjB,EAAuBzB,QAAQ,CAACE,KAAhC,EAAuC,GAAGW,IAA1C;EACH;;EACDqB,GAAG,CAAC,GAAGrB,IAAJ,EAAU;IACT,KAAKa,eAAL,IACI,KAAKA,eAAL,CAAqB,IAArB,EAA2B1B,QAAQ,CAACG,OAApC,EAA6C,GAAGU,IAAhD,CADJ;;IAEA,KAAKY,WAAL,CAAiB,IAAjB,EAAuBzB,QAAQ,CAACG,OAAhC,EAAyC,GAAGU,IAA5C;EACH;;EACDsB,IAAI,CAAC,GAAGtB,IAAJ,EAAU;IACV,KAAKa,eAAL,IAAwB,KAAKA,eAAL,CAAqB,IAArB,EAA2B1B,QAAQ,CAACI,IAApC,EAA0C,GAAGS,IAA7C,CAAxB;;IACA,KAAKY,WAAL,CAAiB,IAAjB,EAAuBzB,QAAQ,CAACI,IAAhC,EAAsC,GAAGS,IAAzC;EACH;;EACDuB,IAAI,CAAC,GAAGvB,IAAJ,EAAU;IACV,KAAKa,eAAL,IAAwB,KAAKA,eAAL,CAAqB,IAArB,EAA2B1B,QAAQ,CAACK,IAApC,EAA0C,GAAGQ,IAA7C,CAAxB;;IACA,KAAKY,WAAL,CAAiB,IAAjB,EAAuBzB,QAAQ,CAACK,IAAhC,EAAsC,GAAGQ,IAAzC;EACH;;EACDwB,KAAK,CAAC,GAAGxB,IAAJ,EAAU;IACX,KAAKa,eAAL,IAAwB,KAAKA,eAAL,CAAqB,IAArB,EAA2B1B,QAAQ,CAACM,KAApC,EAA2C,GAAGO,IAA9C,CAAxB;;IACA,KAAKY,WAAL,CAAiB,IAAjB,EAAuBzB,QAAQ,CAACM,KAAhC,EAAuC,GAAGO,IAA1C;EACH;;AA9EQ;;AAgFb,SAASiB,WAAT,CAAqBQ,KAArB,EAA4B;EACxBvC,SAAS,CAACwC,OAAV,CAAkBC,IAAI,IAAI;IACtBA,IAAI,CAACV,WAAL,CAAiBQ,KAAjB;EACH,CAFD;AAGH;;AACD,SAASG,iBAAT,CAA2BC,WAA3B,EAAwCC,OAAxC,EAAiD;EAC7C,KAAK,MAAMhC,QAAX,IAAuBZ,SAAvB,EAAkC;IAC9B,IAAI6C,cAAc,GAAG,IAArB;;IACA,IAAID,OAAO,IAAIA,OAAO,CAACL,KAAvB,EAA8B;MAC1BM,cAAc,GAAG3C,iBAAiB,CAAC0C,OAAO,CAACL,KAAT,CAAlC;IACH;;IACD,IAAII,WAAW,KAAK,IAApB,EAA0B;MACtB/B,QAAQ,CAACqB,cAAT,GAA0B,IAA1B;IACH,CAFD,MAGK;MACDrB,QAAQ,CAACqB,cAAT,GAA0B,CAACrB,QAAD,EAAW2B,KAAX,EAAkB,GAAGzB,IAArB,KAA8B;QACpD,MAAMgC,OAAO,GAAGhC,IAAI,CACfiC,GADW,CACPC,GAAG,IAAI;UACZ,IAAIA,GAAG,IAAI,IAAX,EAAiB;YACb,OAAO,IAAP;UACH,CAFD,MAGK,IAAI,OAAOA,GAAP,KAAe,QAAnB,EAA6B;YAC9B,OAAOA,GAAP;UACH,CAFI,MAGA,IAAI,OAAOA,GAAP,KAAe,QAAf,IAA2B,OAAOA,GAAP,KAAe,SAA9C,EAAyD;YAC1D,OAAOA,GAAG,CAACC,QAAJ,EAAP;UACH,CAFI,MAGA,IAAID,GAAG,YAAY1B,KAAnB,EAA0B;YAC3B,OAAO0B,GAAG,CAACF,OAAX;UACH,CAFI,MAGA;YACD,IAAI;cACA,OAAOI,IAAI,CAACC,SAAL,CAAeH,GAAf,CAAP;YACH,CAFD,CAGA,OAAOI,OAAP,EAAgB;cACZ,OAAO,IAAP;YACH;UACJ;QACJ,CAtBe,EAuBXC,MAvBW,CAuBJL,GAAG,IAAIA,GAvBH,EAwBXM,IAxBW,CAwBN,GAxBM,CAAhB;;QAyBA,IAAIf,KAAK,KAAKM,cAAc,KAAK,IAAnB,IAA2BA,cAAc,KAAK,KAAK,CAAnD,GAAuDA,cAAvD,GAAwEjC,QAAQ,CAACG,QAAtF,CAAT,EAA0G;UACtG4B,WAAW,CAAC;YACRJ,KAAK,EAAEtC,QAAQ,CAACsC,KAAD,CAAR,CAAgBgB,WAAhB,EADC;YAERT,OAFQ;YAGRhC,IAHQ;YAIR0C,IAAI,EAAE5C,QAAQ,CAACS;UAJP,CAAD,CAAX;QAMH;MACJ,CAlCD;IAmCH;EACJ;AACJ;;AAED,SAASpB,QAAT,EAAmBsB,MAAnB,EAA2BQ,WAA3B,EAAwCW,iBAAxC"},"metadata":{},"sourceType":"module"}