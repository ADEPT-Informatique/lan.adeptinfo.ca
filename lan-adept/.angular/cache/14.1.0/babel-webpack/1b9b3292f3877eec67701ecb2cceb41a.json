{"ast":null,"code":"import { ɵgetAllInstancesOf, ɵgetDefaultInstanceOf, VERSION, ɵAngularFireSchedulers, ɵzoneWrap } from '@angular/fire';\nimport { timer, from } from 'rxjs';\nimport { concatMap, distinct } from 'rxjs/operators';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, isDevMode, Optional, PLATFORM_ID, NgModule, NgZone, Injector } from '@angular/core';\nimport { FirebaseApp, FirebaseApps } from '@angular/fire/app';\nimport { registerVersion } from 'firebase/app';\nimport { isPlatformServer } from '@angular/common';\nimport { getToken as getToken$1, initializeAppCheck as initializeAppCheck$1, onTokenChanged as onTokenChanged$1, setTokenAutoRefreshEnabled as setTokenAutoRefreshEnabled$1 } from 'firebase/app-check';\nexport * from 'firebase/app-check';\nconst APP_CHECK_PROVIDER_NAME = 'app-check';\n\nclass AppCheck {\n  constructor(appCheck) {\n    return appCheck;\n  }\n\n}\n\nclass AppCheckInstances {\n  constructor() {\n    return ɵgetAllInstancesOf(APP_CHECK_PROVIDER_NAME);\n  }\n\n}\n\nconst appCheckInstance$ = timer(0, 300).pipe(concatMap(() => from(ɵgetAllInstancesOf(APP_CHECK_PROVIDER_NAME))), distinct());\nconst PROVIDED_APP_CHECK_INSTANCES = new InjectionToken('angularfire2.app-check-instances');\nconst APP_CHECK_NAMESPACE_SYMBOL = Symbol('angularfire2.app-check.namespace');\n\nfunction defaultAppCheckInstanceFactory(provided, defaultApp) {\n  const defaultAppCheck = ɵgetDefaultInstanceOf(APP_CHECK_PROVIDER_NAME, provided, defaultApp);\n  return defaultAppCheck && new AppCheck(defaultAppCheck);\n}\n\nconst LOCALHOSTS = ['localhost', '0.0.0.0', '127.0.0.1'];\nconst isLocalhost = typeof window !== 'undefined' && LOCALHOSTS.includes(window.location.hostname);\n\nfunction appCheckInstanceFactory(fn) {\n  // tslint:disable-next-line:ban-types\n  return (zone, injector, platformId) => {\n    var _a; // Node should use admin token provider, browser devmode and localhost should use debug token\n\n\n    if (!isPlatformServer(platformId) && (isDevMode() || isLocalhost)) {\n      (_a = globalThis.FIREBASE_APPCHECK_DEBUG_TOKEN) !== null && _a !== void 0 ? _a : globalThis.FIREBASE_APPCHECK_DEBUG_TOKEN = true;\n    }\n\n    const appCheck = zone.runOutsideAngular(() => fn(injector));\n    return new AppCheck(appCheck);\n  };\n}\n\nconst APP_CHECK_INSTANCES_PROVIDER = {\n  provide: AppCheckInstances,\n  deps: [[new Optional(), PROVIDED_APP_CHECK_INSTANCES]]\n};\nconst DEFAULT_APP_CHECK_INSTANCE_PROVIDER = {\n  provide: AppCheck,\n  useFactory: defaultAppCheckInstanceFactory,\n  deps: [[new Optional(), PROVIDED_APP_CHECK_INSTANCES], FirebaseApp, PLATFORM_ID]\n};\n\nclass AppCheckModule {\n  constructor() {\n    registerVersion('angularfire', VERSION.full, 'app-check');\n  }\n\n}\n\nAppCheckModule.ɵfac = function AppCheckModule_Factory(t) {\n  return new (t || AppCheckModule)();\n};\n\nAppCheckModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: AppCheckModule\n});\nAppCheckModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [DEFAULT_APP_CHECK_INSTANCE_PROVIDER, APP_CHECK_INSTANCES_PROVIDER]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AppCheckModule, [{\n    type: NgModule,\n    args: [{\n      providers: [DEFAULT_APP_CHECK_INSTANCE_PROVIDER, APP_CHECK_INSTANCES_PROVIDER]\n    }]\n  }], function () {\n    return [];\n  }, null);\n})();\n\nfunction provideAppCheck(fn, ...deps) {\n  return {\n    ngModule: AppCheckModule,\n    providers: [{\n      provide: PROVIDED_APP_CHECK_INSTANCES,\n      useFactory: appCheckInstanceFactory(fn),\n      multi: true,\n      deps: [NgZone, Injector, PLATFORM_ID, ɵAngularFireSchedulers, FirebaseApps, ...deps]\n    }]\n  };\n} // DO NOT MODIFY, this file is autogenerated by tools/build.ts\n\n\nconst getToken = ɵzoneWrap(getToken$1, true);\nconst initializeAppCheck = ɵzoneWrap(initializeAppCheck$1, true);\nconst onTokenChanged = ɵzoneWrap(onTokenChanged$1, true);\nconst setTokenAutoRefreshEnabled = ɵzoneWrap(setTokenAutoRefreshEnabled$1, true);\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AppCheck, AppCheckInstances, AppCheckModule, appCheckInstance$, getToken, initializeAppCheck, onTokenChanged, provideAppCheck, setTokenAutoRefreshEnabled };","map":{"version":3,"names":["ɵgetAllInstancesOf","ɵgetDefaultInstanceOf","VERSION","ɵAngularFireSchedulers","ɵzoneWrap","timer","from","concatMap","distinct","i0","InjectionToken","isDevMode","Optional","PLATFORM_ID","NgModule","NgZone","Injector","FirebaseApp","FirebaseApps","registerVersion","isPlatformServer","getToken","getToken$1","initializeAppCheck","initializeAppCheck$1","onTokenChanged","onTokenChanged$1","setTokenAutoRefreshEnabled","setTokenAutoRefreshEnabled$1","APP_CHECK_PROVIDER_NAME","AppCheck","constructor","appCheck","AppCheckInstances","appCheckInstance$","pipe","PROVIDED_APP_CHECK_INSTANCES","APP_CHECK_NAMESPACE_SYMBOL","Symbol","defaultAppCheckInstanceFactory","provided","defaultApp","defaultAppCheck","LOCALHOSTS","isLocalhost","window","includes","location","hostname","appCheckInstanceFactory","fn","zone","injector","platformId","_a","globalThis","FIREBASE_APPCHECK_DEBUG_TOKEN","runOutsideAngular","APP_CHECK_INSTANCES_PROVIDER","provide","deps","DEFAULT_APP_CHECK_INSTANCE_PROVIDER","useFactory","AppCheckModule","full","ɵfac","ɵmod","ɵinj","type","args","providers","provideAppCheck","ngModule","multi"],"sources":["C:/Users/Felix/Desktop/lan.adeptinfo.ca/lan-adept/node_modules/@angular/fire/fesm2015/angular-fire-app-check.js"],"sourcesContent":["import { ɵgetAllInstancesOf, ɵgetDefaultInstanceOf, VERSION, ɵAngularFireSchedulers, ɵzoneWrap } from '@angular/fire';\nimport { timer, from } from 'rxjs';\nimport { concatMap, distinct } from 'rxjs/operators';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, isDevMode, Optional, PLATFORM_ID, NgModule, NgZone, Injector } from '@angular/core';\nimport { FirebaseApp, FirebaseApps } from '@angular/fire/app';\nimport { registerVersion } from 'firebase/app';\nimport { isPlatformServer } from '@angular/common';\nimport { getToken as getToken$1, initializeAppCheck as initializeAppCheck$1, onTokenChanged as onTokenChanged$1, setTokenAutoRefreshEnabled as setTokenAutoRefreshEnabled$1 } from 'firebase/app-check';\nexport * from 'firebase/app-check';\n\nconst APP_CHECK_PROVIDER_NAME = 'app-check';\nclass AppCheck {\n    constructor(appCheck) {\n        return appCheck;\n    }\n}\nclass AppCheckInstances {\n    constructor() {\n        return ɵgetAllInstancesOf(APP_CHECK_PROVIDER_NAME);\n    }\n}\nconst appCheckInstance$ = timer(0, 300).pipe(concatMap(() => from(ɵgetAllInstancesOf(APP_CHECK_PROVIDER_NAME))), distinct());\n\nconst PROVIDED_APP_CHECK_INSTANCES = new InjectionToken('angularfire2.app-check-instances');\nconst APP_CHECK_NAMESPACE_SYMBOL = Symbol('angularfire2.app-check.namespace');\nfunction defaultAppCheckInstanceFactory(provided, defaultApp) {\n    const defaultAppCheck = ɵgetDefaultInstanceOf(APP_CHECK_PROVIDER_NAME, provided, defaultApp);\n    return defaultAppCheck && new AppCheck(defaultAppCheck);\n}\nconst LOCALHOSTS = ['localhost', '0.0.0.0', '127.0.0.1'];\nconst isLocalhost = typeof window !== 'undefined' && LOCALHOSTS.includes(window.location.hostname);\nfunction appCheckInstanceFactory(fn) {\n    // tslint:disable-next-line:ban-types\n    return (zone, injector, platformId) => {\n        var _a;\n        // Node should use admin token provider, browser devmode and localhost should use debug token\n        if (!isPlatformServer(platformId) && (isDevMode() || isLocalhost)) {\n            (_a = globalThis.FIREBASE_APPCHECK_DEBUG_TOKEN) !== null && _a !== void 0 ? _a : (globalThis.FIREBASE_APPCHECK_DEBUG_TOKEN = true);\n        }\n        const appCheck = zone.runOutsideAngular(() => fn(injector));\n        return new AppCheck(appCheck);\n    };\n}\nconst APP_CHECK_INSTANCES_PROVIDER = {\n    provide: AppCheckInstances,\n    deps: [\n        [new Optional(), PROVIDED_APP_CHECK_INSTANCES],\n    ]\n};\nconst DEFAULT_APP_CHECK_INSTANCE_PROVIDER = {\n    provide: AppCheck,\n    useFactory: defaultAppCheckInstanceFactory,\n    deps: [\n        [new Optional(), PROVIDED_APP_CHECK_INSTANCES],\n        FirebaseApp,\n        PLATFORM_ID,\n    ]\n};\nclass AppCheckModule {\n    constructor() {\n        registerVersion('angularfire', VERSION.full, 'app-check');\n    }\n}\nAppCheckModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: AppCheckModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nAppCheckModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: AppCheckModule });\nAppCheckModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: AppCheckModule, providers: [\n        DEFAULT_APP_CHECK_INSTANCE_PROVIDER,\n        APP_CHECK_INSTANCES_PROVIDER,\n    ] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: AppCheckModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    providers: [\n                        DEFAULT_APP_CHECK_INSTANCE_PROVIDER,\n                        APP_CHECK_INSTANCES_PROVIDER,\n                    ]\n                }]\n        }], ctorParameters: function () { return []; } });\nfunction provideAppCheck(fn, ...deps) {\n    return {\n        ngModule: AppCheckModule,\n        providers: [{\n                provide: PROVIDED_APP_CHECK_INSTANCES,\n                useFactory: appCheckInstanceFactory(fn),\n                multi: true,\n                deps: [\n                    NgZone,\n                    Injector,\n                    PLATFORM_ID,\n                    ɵAngularFireSchedulers,\n                    FirebaseApps,\n                    ...deps,\n                ]\n            }]\n    };\n}\n\n// DO NOT MODIFY, this file is autogenerated by tools/build.ts\nconst getToken = ɵzoneWrap(getToken$1, true);\nconst initializeAppCheck = ɵzoneWrap(initializeAppCheck$1, true);\nconst onTokenChanged = ɵzoneWrap(onTokenChanged$1, true);\nconst setTokenAutoRefreshEnabled = ɵzoneWrap(setTokenAutoRefreshEnabled$1, true);\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AppCheck, AppCheckInstances, AppCheckModule, appCheckInstance$, getToken, initializeAppCheck, onTokenChanged, provideAppCheck, setTokenAutoRefreshEnabled };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}