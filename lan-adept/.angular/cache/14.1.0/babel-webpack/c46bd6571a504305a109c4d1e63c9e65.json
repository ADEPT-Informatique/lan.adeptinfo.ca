{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Felix/Desktop/lan.adeptinfo.ca/lan-adept/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { getApp, _getProvider, _registerComponent, registerVersion, SDK_VERSION } from '@firebase/app';\nimport { ErrorFactory, FirebaseError, getModularInstance, calculateBackoffMillis, isIndexedDBAvailable, validateIndexedDBOpenable } from '@firebase/util';\nimport { Component } from '@firebase/component';\nimport { LogLevel, Logger } from '@firebase/logger';\nimport '@firebase/installations';\nconst name = \"@firebase/remote-config\";\nconst version = \"0.3.11\";\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Shims a minimal AbortSignal.\r\n *\r\n * <p>AbortController's AbortSignal conveniently decouples fetch timeout logic from other aspects\r\n * of networking, such as retries. Firebase doesn't use AbortController enough to justify a\r\n * polyfill recommendation, like we do with the Fetch API, but this minimal shim can easily be\r\n * swapped out if/when we do.\r\n */\n\nclass RemoteConfigAbortSignal {\n  constructor() {\n    this.listeners = [];\n  }\n\n  addEventListener(listener) {\n    this.listeners.push(listener);\n  }\n\n  abort() {\n    this.listeners.forEach(listener => listener());\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nconst RC_COMPONENT_NAME = 'remote-config';\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nconst ERROR_DESCRIPTION_MAP = {\n  [\"registration-window\"\n  /* REGISTRATION_WINDOW */\n  ]: 'Undefined window object. This SDK only supports usage in a browser environment.',\n  [\"registration-project-id\"\n  /* REGISTRATION_PROJECT_ID */\n  ]: 'Undefined project identifier. Check Firebase app initialization.',\n  [\"registration-api-key\"\n  /* REGISTRATION_API_KEY */\n  ]: 'Undefined API key. Check Firebase app initialization.',\n  [\"registration-app-id\"\n  /* REGISTRATION_APP_ID */\n  ]: 'Undefined app identifier. Check Firebase app initialization.',\n  [\"storage-open\"\n  /* STORAGE_OPEN */\n  ]: 'Error thrown when opening storage. Original error: {$originalErrorMessage}.',\n  [\"storage-get\"\n  /* STORAGE_GET */\n  ]: 'Error thrown when reading from storage. Original error: {$originalErrorMessage}.',\n  [\"storage-set\"\n  /* STORAGE_SET */\n  ]: 'Error thrown when writing to storage. Original error: {$originalErrorMessage}.',\n  [\"storage-delete\"\n  /* STORAGE_DELETE */\n  ]: 'Error thrown when deleting from storage. Original error: {$originalErrorMessage}.',\n  [\"fetch-client-network\"\n  /* FETCH_NETWORK */\n  ]: 'Fetch client failed to connect to a network. Check Internet connection.' + ' Original error: {$originalErrorMessage}.',\n  [\"fetch-timeout\"\n  /* FETCH_TIMEOUT */\n  ]: 'The config fetch request timed out. ' + ' Configure timeout using \"fetchTimeoutMillis\" SDK setting.',\n  [\"fetch-throttle\"\n  /* FETCH_THROTTLE */\n  ]: 'The config fetch request timed out while in an exponential backoff state.' + ' Configure timeout using \"fetchTimeoutMillis\" SDK setting.' + ' Unix timestamp in milliseconds when fetch request throttling ends: {$throttleEndTimeMillis}.',\n  [\"fetch-client-parse\"\n  /* FETCH_PARSE */\n  ]: 'Fetch client could not parse response.' + ' Original error: {$originalErrorMessage}.',\n  [\"fetch-status\"\n  /* FETCH_STATUS */\n  ]: 'Fetch server returned an HTTP error status. HTTP status: {$httpStatus}.',\n  [\"indexed-db-unavailable\"\n  /* INDEXED_DB_UNAVAILABLE */\n  ]: 'Indexed DB is not supported by current browser'\n};\nconst ERROR_FACTORY = new ErrorFactory('remoteconfig'\n/* service */\n, 'Remote Config'\n/* service name */\n, ERROR_DESCRIPTION_MAP); // Note how this is like typeof/instanceof, but for ErrorCode.\n\nfunction hasErrorCode(e, errorCode) {\n  return e instanceof FirebaseError && e.code.indexOf(errorCode) !== -1;\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nconst DEFAULT_VALUE_FOR_BOOLEAN = false;\nconst DEFAULT_VALUE_FOR_STRING = '';\nconst DEFAULT_VALUE_FOR_NUMBER = 0;\nconst BOOLEAN_TRUTHY_VALUES = ['1', 'true', 't', 'yes', 'y', 'on'];\n\nclass Value {\n  constructor(_source, _value = DEFAULT_VALUE_FOR_STRING) {\n    this._source = _source;\n    this._value = _value;\n  }\n\n  asString() {\n    return this._value;\n  }\n\n  asBoolean() {\n    if (this._source === 'static') {\n      return DEFAULT_VALUE_FOR_BOOLEAN;\n    }\n\n    return BOOLEAN_TRUTHY_VALUES.indexOf(this._value.toLowerCase()) >= 0;\n  }\n\n  asNumber() {\n    if (this._source === 'static') {\n      return DEFAULT_VALUE_FOR_NUMBER;\n    }\n\n    let num = Number(this._value);\n\n    if (isNaN(num)) {\n      num = DEFAULT_VALUE_FOR_NUMBER;\n    }\n\n    return num;\n  }\n\n  getSource() {\n    return this._source;\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n *\r\n * @param app - The {@link @firebase/app#FirebaseApp} instance.\r\n * @returns A {@link RemoteConfig} instance.\r\n *\r\n * @public\r\n */\n\n\nfunction getRemoteConfig(app = getApp()) {\n  app = getModularInstance(app);\n\n  const rcProvider = _getProvider(app, RC_COMPONENT_NAME);\n\n  return rcProvider.getImmediate();\n}\n/**\r\n * Makes the last fetched config available to the getters.\r\n * @param remoteConfig - The {@link RemoteConfig} instance.\r\n * @returns A `Promise` which resolves to true if the current call activated the fetched configs.\r\n * If the fetched configs were already activated, the `Promise` will resolve to false.\r\n *\r\n * @public\r\n */\n\n\nfunction activate(_x) {\n  return _activate.apply(this, arguments);\n}\n/**\r\n * Ensures the last activated config are available to the getters.\r\n * @param remoteConfig - The {@link RemoteConfig} instance.\r\n *\r\n * @returns A `Promise` that resolves when the last activated config is available to the getters.\r\n * @public\r\n */\n\n\nfunction _activate() {\n  _activate = _asyncToGenerator(function* (remoteConfig) {\n    const rc = getModularInstance(remoteConfig);\n    const [lastSuccessfulFetchResponse, activeConfigEtag] = yield Promise.all([rc._storage.getLastSuccessfulFetchResponse(), rc._storage.getActiveConfigEtag()]);\n\n    if (!lastSuccessfulFetchResponse || !lastSuccessfulFetchResponse.config || !lastSuccessfulFetchResponse.eTag || lastSuccessfulFetchResponse.eTag === activeConfigEtag) {\n      // Either there is no successful fetched config, or is the same as current active\n      // config.\n      return false;\n    }\n\n    yield Promise.all([rc._storageCache.setActiveConfig(lastSuccessfulFetchResponse.config), rc._storage.setActiveConfigEtag(lastSuccessfulFetchResponse.eTag)]);\n    return true;\n  });\n  return _activate.apply(this, arguments);\n}\n\nfunction ensureInitialized(remoteConfig) {\n  const rc = getModularInstance(remoteConfig);\n\n  if (!rc._initializePromise) {\n    rc._initializePromise = rc._storageCache.loadFromStorage().then(() => {\n      rc._isInitializationComplete = true;\n    });\n  }\n\n  return rc._initializePromise;\n}\n/**\r\n * Fetches and caches configuration from the Remote Config service.\r\n * @param remoteConfig - The {@link RemoteConfig} instance.\r\n * @public\r\n */\n\n\nfunction fetchConfig(_x2) {\n  return _fetchConfig.apply(this, arguments);\n}\n/**\r\n * Gets all config.\r\n *\r\n * @param remoteConfig - The {@link RemoteConfig} instance.\r\n * @returns All config.\r\n *\r\n * @public\r\n */\n\n\nfunction _fetchConfig() {\n  _fetchConfig = _asyncToGenerator(function* (remoteConfig) {\n    const rc = getModularInstance(remoteConfig); // Aborts the request after the given timeout, causing the fetch call to\n    // reject with an `AbortError`.\n    //\n    // <p>Aborting after the request completes is a no-op, so we don't need a\n    // corresponding `clearTimeout`.\n    //\n    // Locating abort logic here because:\n    // * it uses a developer setting (timeout)\n    // * it applies to all retries (like curl's max-time arg)\n    // * it is consistent with the Fetch API's signal input\n\n    const abortSignal = new RemoteConfigAbortSignal();\n    setTimeout( /*#__PURE__*/_asyncToGenerator(function* () {\n      // Note a very low delay, eg < 10ms, can elapse before listeners are initialized.\n      abortSignal.abort();\n    }), rc.settings.fetchTimeoutMillis); // Catches *all* errors thrown by client so status can be set consistently.\n\n    try {\n      yield rc._client.fetch({\n        cacheMaxAgeMillis: rc.settings.minimumFetchIntervalMillis,\n        signal: abortSignal\n      });\n      yield rc._storageCache.setLastFetchStatus('success');\n    } catch (e) {\n      const lastFetchStatus = hasErrorCode(e, \"fetch-throttle\"\n      /* FETCH_THROTTLE */\n      ) ? 'throttle' : 'failure';\n      yield rc._storageCache.setLastFetchStatus(lastFetchStatus);\n      throw e;\n    }\n  });\n  return _fetchConfig.apply(this, arguments);\n}\n\nfunction getAll(remoteConfig) {\n  const rc = getModularInstance(remoteConfig);\n  return getAllKeys(rc._storageCache.getActiveConfig(), rc.defaultConfig).reduce((allConfigs, key) => {\n    allConfigs[key] = getValue(remoteConfig, key);\n    return allConfigs;\n  }, {});\n}\n/**\r\n * Gets the value for the given key as a boolean.\r\n *\r\n * Convenience method for calling <code>remoteConfig.getValue(key).asBoolean()</code>.\r\n *\r\n * @param remoteConfig - The {@link RemoteConfig} instance.\r\n * @param key - The name of the parameter.\r\n *\r\n * @returns The value for the given key as a boolean.\r\n * @public\r\n */\n\n\nfunction getBoolean(remoteConfig, key) {\n  return getValue(getModularInstance(remoteConfig), key).asBoolean();\n}\n/**\r\n * Gets the value for the given key as a number.\r\n *\r\n * Convenience method for calling <code>remoteConfig.getValue(key).asNumber()</code>.\r\n *\r\n * @param remoteConfig - The {@link RemoteConfig} instance.\r\n * @param key - The name of the parameter.\r\n *\r\n * @returns The value for the given key as a number.\r\n *\r\n * @public\r\n */\n\n\nfunction getNumber(remoteConfig, key) {\n  return getValue(getModularInstance(remoteConfig), key).asNumber();\n}\n/**\r\n * Gets the value for the given key as a string.\r\n * Convenience method for calling <code>remoteConfig.getValue(key).asString()</code>.\r\n *\r\n * @param remoteConfig - The {@link RemoteConfig} instance.\r\n * @param key - The name of the parameter.\r\n *\r\n * @returns The value for the given key as a string.\r\n *\r\n * @public\r\n */\n\n\nfunction getString(remoteConfig, key) {\n  return getValue(getModularInstance(remoteConfig), key).asString();\n}\n/**\r\n * Gets the {@link Value} for the given key.\r\n *\r\n * @param remoteConfig - The {@link RemoteConfig} instance.\r\n * @param key - The name of the parameter.\r\n *\r\n * @returns The value for the given key.\r\n *\r\n * @public\r\n */\n\n\nfunction getValue(remoteConfig, key) {\n  const rc = getModularInstance(remoteConfig);\n\n  if (!rc._isInitializationComplete) {\n    rc._logger.debug(`A value was requested for key \"${key}\" before SDK initialization completed.` + ' Await on ensureInitialized if the intent was to get a previously activated value.');\n  }\n\n  const activeConfig = rc._storageCache.getActiveConfig();\n\n  if (activeConfig && activeConfig[key] !== undefined) {\n    return new Value('remote', activeConfig[key]);\n  } else if (rc.defaultConfig && rc.defaultConfig[key] !== undefined) {\n    return new Value('default', String(rc.defaultConfig[key]));\n  }\n\n  rc._logger.debug(`Returning static value for key \"${key}\".` + ' Define a default or remote value if this is unintentional.');\n\n  return new Value('static');\n}\n/**\r\n * Defines the log level to use.\r\n *\r\n * @param remoteConfig - The {@link RemoteConfig} instance.\r\n * @param logLevel - The log level to set.\r\n *\r\n * @public\r\n */\n\n\nfunction setLogLevel(remoteConfig, logLevel) {\n  const rc = getModularInstance(remoteConfig);\n\n  switch (logLevel) {\n    case 'debug':\n      rc._logger.logLevel = LogLevel.DEBUG;\n      break;\n\n    case 'silent':\n      rc._logger.logLevel = LogLevel.SILENT;\n      break;\n\n    default:\n      rc._logger.logLevel = LogLevel.ERROR;\n  }\n}\n/**\r\n * Dedupes and returns an array of all the keys of the received objects.\r\n */\n\n\nfunction getAllKeys(obj1 = {}, obj2 = {}) {\n  return Object.keys(Object.assign(Object.assign({}, obj1), obj2));\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Implements the {@link RemoteConfigClient} abstraction with success response caching.\r\n *\r\n * <p>Comparable to the browser's Cache API for responses, but the Cache API requires a Service\r\n * Worker, which requires HTTPS, which would significantly complicate SDK installation. Also, the\r\n * Cache API doesn't support matching entries by time.\r\n */\n\n\nclass CachingClient {\n  constructor(client, storage, storageCache, logger) {\n    this.client = client;\n    this.storage = storage;\n    this.storageCache = storageCache;\n    this.logger = logger;\n  }\n  /**\r\n   * Returns true if the age of the cached fetched configs is less than or equal to\r\n   * {@link Settings#minimumFetchIntervalInSeconds}.\r\n   *\r\n   * <p>This is comparable to passing `headers = { 'Cache-Control': max-age <maxAge> }` to the\r\n   * native Fetch API.\r\n   *\r\n   * <p>Visible for testing.\r\n   */\n\n\n  isCachedDataFresh(cacheMaxAgeMillis, lastSuccessfulFetchTimestampMillis) {\n    // Cache can only be fresh if it's populated.\n    if (!lastSuccessfulFetchTimestampMillis) {\n      this.logger.debug('Config fetch cache check. Cache unpopulated.');\n      return false;\n    } // Calculates age of cache entry.\n\n\n    const cacheAgeMillis = Date.now() - lastSuccessfulFetchTimestampMillis;\n    const isCachedDataFresh = cacheAgeMillis <= cacheMaxAgeMillis;\n    this.logger.debug('Config fetch cache check.' + ` Cache age millis: ${cacheAgeMillis}.` + ` Cache max age millis (minimumFetchIntervalMillis setting): ${cacheMaxAgeMillis}.` + ` Is cache hit: ${isCachedDataFresh}.`);\n    return isCachedDataFresh;\n  }\n\n  fetch(request) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      // Reads from persisted storage to avoid cache miss if callers don't wait on initialization.\n      const [lastSuccessfulFetchTimestampMillis, lastSuccessfulFetchResponse] = yield Promise.all([_this.storage.getLastSuccessfulFetchTimestampMillis(), _this.storage.getLastSuccessfulFetchResponse()]); // Exits early on cache hit.\n\n      if (lastSuccessfulFetchResponse && _this.isCachedDataFresh(request.cacheMaxAgeMillis, lastSuccessfulFetchTimestampMillis)) {\n        return lastSuccessfulFetchResponse;\n      } // Deviates from pure decorator by not honoring a passed ETag since we don't have a public API\n      // that allows the caller to pass an ETag.\n\n\n      request.eTag = lastSuccessfulFetchResponse && lastSuccessfulFetchResponse.eTag; // Falls back to service on cache miss.\n\n      const response = yield _this.client.fetch(request); // Fetch throws for non-success responses, so success is guaranteed here.\n\n      const storageOperations = [// Uses write-through cache for consistency with synchronous public API.\n      _this.storageCache.setLastSuccessfulFetchTimestampMillis(Date.now())];\n\n      if (response.status === 200) {\n        // Caches response only if it has changed, ie non-304 responses.\n        storageOperations.push(_this.storage.setLastSuccessfulFetchResponse(response));\n      }\n\n      yield Promise.all(storageOperations);\n      return response;\n    })();\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Attempts to get the most accurate browser language setting.\r\n *\r\n * <p>Adapted from getUserLanguage in packages/auth/src/utils.js for TypeScript.\r\n *\r\n * <p>Defers default language specification to server logic for consistency.\r\n *\r\n * @param navigatorLanguage Enables tests to override read-only {@link NavigatorLanguage}.\r\n */\n\n\nfunction getUserLanguage(navigatorLanguage = navigator) {\n  return (// Most reliable, but only supported in Chrome/Firefox.\n    navigatorLanguage.languages && navigatorLanguage.languages[0] || // Supported in most browsers, but returns the language of the browser\n    // UI, not the language set in browser settings.\n    navigatorLanguage.language // Polyfill otherwise.\n\n  );\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Implements the Client abstraction for the Remote Config REST API.\r\n */\n\n\nclass RestClient {\n  constructor(firebaseInstallations, sdkVersion, namespace, projectId, apiKey, appId) {\n    this.firebaseInstallations = firebaseInstallations;\n    this.sdkVersion = sdkVersion;\n    this.namespace = namespace;\n    this.projectId = projectId;\n    this.apiKey = apiKey;\n    this.appId = appId;\n  }\n  /**\r\n   * Fetches from the Remote Config REST API.\r\n   *\r\n   * @throws a {@link ErrorCode.FETCH_NETWORK} error if {@link GlobalFetch#fetch} can't\r\n   * connect to the network.\r\n   * @throws a {@link ErrorCode.FETCH_PARSE} error if {@link Response#json} can't parse the\r\n   * fetch response.\r\n   * @throws a {@link ErrorCode.FETCH_STATUS} error if the service returns an HTTP error status.\r\n   */\n\n\n  fetch(request) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      var _a, _b, _c;\n\n      const [installationId, installationToken] = yield Promise.all([_this2.firebaseInstallations.getId(), _this2.firebaseInstallations.getToken()]);\n      const urlBase = window.FIREBASE_REMOTE_CONFIG_URL_BASE || 'https://firebaseremoteconfig.googleapis.com';\n      const url = `${urlBase}/v1/projects/${_this2.projectId}/namespaces/${_this2.namespace}:fetch?key=${_this2.apiKey}`;\n      const headers = {\n        'Content-Type': 'application/json',\n        'Content-Encoding': 'gzip',\n        // Deviates from pure decorator by not passing max-age header since we don't currently have\n        // service behavior using that header.\n        'If-None-Match': request.eTag || '*'\n      };\n      const requestBody = {\n        /* eslint-disable camelcase */\n        sdk_version: _this2.sdkVersion,\n        app_instance_id: installationId,\n        app_instance_id_token: installationToken,\n        app_id: _this2.appId,\n        language_code: getUserLanguage()\n        /* eslint-enable camelcase */\n\n      };\n      const options = {\n        method: 'POST',\n        headers,\n        body: JSON.stringify(requestBody)\n      }; // This logic isn't REST-specific, but shimming abort logic isn't worth another decorator.\n\n      const fetchPromise = fetch(url, options);\n      const timeoutPromise = new Promise((_resolve, reject) => {\n        // Maps async event listener to Promise API.\n        request.signal.addEventListener(() => {\n          // Emulates https://heycam.github.io/webidl/#aborterror\n          const error = new Error('The operation was aborted.');\n          error.name = 'AbortError';\n          reject(error);\n        });\n      });\n      let response;\n\n      try {\n        yield Promise.race([fetchPromise, timeoutPromise]);\n        response = yield fetchPromise;\n      } catch (originalError) {\n        let errorCode = \"fetch-client-network\"\n        /* FETCH_NETWORK */\n        ;\n\n        if (((_a = originalError) === null || _a === void 0 ? void 0 : _a.name) === 'AbortError') {\n          errorCode = \"fetch-timeout\"\n          /* FETCH_TIMEOUT */\n          ;\n        }\n\n        throw ERROR_FACTORY.create(errorCode, {\n          originalErrorMessage: (_b = originalError) === null || _b === void 0 ? void 0 : _b.message\n        });\n      }\n\n      let status = response.status; // Normalizes nullable header to optional.\n\n      const responseEtag = response.headers.get('ETag') || undefined;\n      let config;\n      let state; // JSON parsing throws SyntaxError if the response body isn't a JSON string.\n      // Requesting application/json and checking for a 200 ensures there's JSON data.\n\n      if (response.status === 200) {\n        let responseBody;\n\n        try {\n          responseBody = yield response.json();\n        } catch (originalError) {\n          throw ERROR_FACTORY.create(\"fetch-client-parse\"\n          /* FETCH_PARSE */\n          , {\n            originalErrorMessage: (_c = originalError) === null || _c === void 0 ? void 0 : _c.message\n          });\n        }\n\n        config = responseBody['entries'];\n        state = responseBody['state'];\n      } // Normalizes based on legacy state.\n\n\n      if (state === 'INSTANCE_STATE_UNSPECIFIED') {\n        status = 500;\n      } else if (state === 'NO_CHANGE') {\n        status = 304;\n      } else if (state === 'NO_TEMPLATE' || state === 'EMPTY_CONFIG') {\n        // These cases can be fixed remotely, so normalize to safe value.\n        config = {};\n      } // Normalize to exception-based control flow for non-success cases.\n      // Encapsulates HTTP specifics in this class as much as possible. Status is still the best for\n      // differentiating success states (200 from 304; the state body param is undefined in a\n      // standard 304).\n\n\n      if (status !== 304 && status !== 200) {\n        throw ERROR_FACTORY.create(\"fetch-status\"\n        /* FETCH_STATUS */\n        , {\n          httpStatus: status\n        });\n      }\n\n      return {\n        status,\n        eTag: responseEtag,\n        config\n      };\n    })();\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Supports waiting on a backoff by:\r\n *\r\n * <ul>\r\n *   <li>Promisifying setTimeout, so we can set a timeout in our Promise chain</li>\r\n *   <li>Listening on a signal bus for abort events, just like the Fetch API</li>\r\n *   <li>Failing in the same way the Fetch API fails, so timing out a live request and a throttled\r\n *       request appear the same.</li>\r\n * </ul>\r\n *\r\n * <p>Visible for testing.\r\n */\n\n\nfunction setAbortableTimeout(signal, throttleEndTimeMillis) {\n  return new Promise((resolve, reject) => {\n    // Derives backoff from given end time, normalizing negative numbers to zero.\n    const backoffMillis = Math.max(throttleEndTimeMillis - Date.now(), 0);\n    const timeout = setTimeout(resolve, backoffMillis); // Adds listener, rather than sets onabort, because signal is a shared object.\n\n    signal.addEventListener(() => {\n      clearTimeout(timeout); // If the request completes before this timeout, the rejection has no effect.\n\n      reject(ERROR_FACTORY.create(\"fetch-throttle\"\n      /* FETCH_THROTTLE */\n      , {\n        throttleEndTimeMillis\n      }));\n    });\n  });\n}\n/**\r\n * Returns true if the {@link Error} indicates a fetch request may succeed later.\r\n */\n\n\nfunction isRetriableError(e) {\n  if (!(e instanceof FirebaseError) || !e.customData) {\n    return false;\n  } // Uses string index defined by ErrorData, which FirebaseError implements.\n\n\n  const httpStatus = Number(e.customData['httpStatus']);\n  return httpStatus === 429 || httpStatus === 500 || httpStatus === 503 || httpStatus === 504;\n}\n/**\r\n * Decorates a Client with retry logic.\r\n *\r\n * <p>Comparable to CachingClient, but uses backoff logic instead of cache max age and doesn't cache\r\n * responses (because the SDK has no use for error responses).\r\n */\n\n\nclass RetryingClient {\n  constructor(client, storage) {\n    this.client = client;\n    this.storage = storage;\n  }\n\n  fetch(request) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      const throttleMetadata = (yield _this3.storage.getThrottleMetadata()) || {\n        backoffCount: 0,\n        throttleEndTimeMillis: Date.now()\n      };\n      return _this3.attemptFetch(request, throttleMetadata);\n    })();\n  }\n  /**\r\n   * A recursive helper for attempting a fetch request repeatedly.\r\n   *\r\n   * @throws any non-retriable errors.\r\n   */\n\n\n  attemptFetch(request, {\n    throttleEndTimeMillis,\n    backoffCount\n  }) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      // Starts with a (potentially zero) timeout to support resumption from stored state.\n      // Ensures the throttle end time is honored if the last attempt timed out.\n      // Note the SDK will never make a request if the fetch timeout expires at this point.\n      yield setAbortableTimeout(request.signal, throttleEndTimeMillis);\n\n      try {\n        const response = yield _this4.client.fetch(request); // Note the SDK only clears throttle state if response is success or non-retriable.\n\n        yield _this4.storage.deleteThrottleMetadata();\n        return response;\n      } catch (e) {\n        if (!isRetriableError(e)) {\n          throw e;\n        } // Increments backoff state.\n\n\n        const throttleMetadata = {\n          throttleEndTimeMillis: Date.now() + calculateBackoffMillis(backoffCount),\n          backoffCount: backoffCount + 1\n        }; // Persists state.\n\n        yield _this4.storage.setThrottleMetadata(throttleMetadata);\n        return _this4.attemptFetch(request, throttleMetadata);\n      }\n    })();\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nconst DEFAULT_FETCH_TIMEOUT_MILLIS = 60 * 1000; // One minute\n\nconst DEFAULT_CACHE_MAX_AGE_MILLIS = 12 * 60 * 60 * 1000; // Twelve hours.\n\n/**\r\n * Encapsulates business logic mapping network and storage dependencies to the public SDK API.\r\n *\r\n * See {@link https://github.com/FirebasePrivate/firebase-js-sdk/blob/master/packages/firebase/index.d.ts|interface documentation} for method descriptions.\r\n */\n\nclass RemoteConfig {\n  constructor( // Required by FirebaseServiceFactory interface.\n  app, // JS doesn't support private yet\n  // (https://github.com/tc39/proposal-class-fields#private-fields), so we hint using an\n  // underscore prefix.\n\n  /**\r\n   * @internal\r\n   */\n  _client,\n  /**\r\n   * @internal\r\n   */\n  _storageCache,\n  /**\r\n   * @internal\r\n   */\n  _storage,\n  /**\r\n   * @internal\r\n   */\n  _logger) {\n    this.app = app;\n    this._client = _client;\n    this._storageCache = _storageCache;\n    this._storage = _storage;\n    this._logger = _logger;\n    /**\r\n     * Tracks completion of initialization promise.\r\n     * @internal\r\n     */\n\n    this._isInitializationComplete = false;\n    this.settings = {\n      fetchTimeoutMillis: DEFAULT_FETCH_TIMEOUT_MILLIS,\n      minimumFetchIntervalMillis: DEFAULT_CACHE_MAX_AGE_MILLIS\n    };\n    this.defaultConfig = {};\n  }\n\n  get fetchTimeMillis() {\n    return this._storageCache.getLastSuccessfulFetchTimestampMillis() || -1;\n  }\n\n  get lastFetchStatus() {\n    return this._storageCache.getLastFetchStatus() || 'no-fetch-yet';\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Converts an error event associated with a {@link IDBRequest} to a {@link FirebaseError}.\r\n */\n\n\nfunction toFirebaseError(event, errorCode) {\n  var _a;\n\n  const originalError = event.target.error || undefined;\n  return ERROR_FACTORY.create(errorCode, {\n    originalErrorMessage: originalError && ((_a = originalError) === null || _a === void 0 ? void 0 : _a.message)\n  });\n}\n/**\r\n * A general-purpose store keyed by app + namespace + {@link\r\n * ProjectNamespaceKeyFieldValue}.\r\n *\r\n * <p>The Remote Config SDK can be used with multiple app installations, and each app can interact\r\n * with multiple namespaces, so this store uses app (ID + name) and namespace as common parent keys\r\n * for a set of key-value pairs. See {@link Storage#createCompositeKey}.\r\n *\r\n * <p>Visible for testing.\r\n */\n\n\nconst APP_NAMESPACE_STORE = 'app_namespace_store';\nconst DB_NAME = 'firebase_remote_config';\nconst DB_VERSION = 1; // Visible for testing.\n\nfunction openDatabase() {\n  return new Promise((resolve, reject) => {\n    var _a;\n\n    try {\n      const request = indexedDB.open(DB_NAME, DB_VERSION);\n\n      request.onerror = event => {\n        reject(toFirebaseError(event, \"storage-open\"\n        /* STORAGE_OPEN */\n        ));\n      };\n\n      request.onsuccess = event => {\n        resolve(event.target.result);\n      };\n\n      request.onupgradeneeded = event => {\n        const db = event.target.result; // We don't use 'break' in this switch statement, the fall-through\n        // behavior is what we want, because if there are multiple versions between\n        // the old version and the current version, we want ALL the migrations\n        // that correspond to those versions to run, not only the last one.\n        // eslint-disable-next-line default-case\n\n        switch (event.oldVersion) {\n          case 0:\n            db.createObjectStore(APP_NAMESPACE_STORE, {\n              keyPath: 'compositeKey'\n            });\n        }\n      };\n    } catch (error) {\n      reject(ERROR_FACTORY.create(\"storage-open\"\n      /* STORAGE_OPEN */\n      , {\n        originalErrorMessage: (_a = error) === null || _a === void 0 ? void 0 : _a.message\n      }));\n    }\n  });\n}\n/**\r\n * Abstracts data persistence.\r\n */\n\n\nclass Storage {\n  /**\r\n   * @param appId enables storage segmentation by app (ID + name).\r\n   * @param appName enables storage segmentation by app (ID + name).\r\n   * @param namespace enables storage segmentation by namespace.\r\n   */\n  constructor(appId, appName, namespace, openDbPromise = openDatabase()) {\n    this.appId = appId;\n    this.appName = appName;\n    this.namespace = namespace;\n    this.openDbPromise = openDbPromise;\n  }\n\n  getLastFetchStatus() {\n    return this.get('last_fetch_status');\n  }\n\n  setLastFetchStatus(status) {\n    return this.set('last_fetch_status', status);\n  } // This is comparable to a cache entry timestamp. If we need to expire other data, we could\n  // consider adding timestamp to all storage records and an optional max age arg to getters.\n\n\n  getLastSuccessfulFetchTimestampMillis() {\n    return this.get('last_successful_fetch_timestamp_millis');\n  }\n\n  setLastSuccessfulFetchTimestampMillis(timestamp) {\n    return this.set('last_successful_fetch_timestamp_millis', timestamp);\n  }\n\n  getLastSuccessfulFetchResponse() {\n    return this.get('last_successful_fetch_response');\n  }\n\n  setLastSuccessfulFetchResponse(response) {\n    return this.set('last_successful_fetch_response', response);\n  }\n\n  getActiveConfig() {\n    return this.get('active_config');\n  }\n\n  setActiveConfig(config) {\n    return this.set('active_config', config);\n  }\n\n  getActiveConfigEtag() {\n    return this.get('active_config_etag');\n  }\n\n  setActiveConfigEtag(etag) {\n    return this.set('active_config_etag', etag);\n  }\n\n  getThrottleMetadata() {\n    return this.get('throttle_metadata');\n  }\n\n  setThrottleMetadata(metadata) {\n    return this.set('throttle_metadata', metadata);\n  }\n\n  deleteThrottleMetadata() {\n    return this.delete('throttle_metadata');\n  }\n\n  get(key) {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      const db = yield _this5.openDbPromise;\n      return new Promise((resolve, reject) => {\n        var _a;\n\n        const transaction = db.transaction([APP_NAMESPACE_STORE], 'readonly');\n        const objectStore = transaction.objectStore(APP_NAMESPACE_STORE);\n\n        const compositeKey = _this5.createCompositeKey(key);\n\n        try {\n          const request = objectStore.get(compositeKey);\n\n          request.onerror = event => {\n            reject(toFirebaseError(event, \"storage-get\"\n            /* STORAGE_GET */\n            ));\n          };\n\n          request.onsuccess = event => {\n            const result = event.target.result;\n\n            if (result) {\n              resolve(result.value);\n            } else {\n              resolve(undefined);\n            }\n          };\n        } catch (e) {\n          reject(ERROR_FACTORY.create(\"storage-get\"\n          /* STORAGE_GET */\n          , {\n            originalErrorMessage: (_a = e) === null || _a === void 0 ? void 0 : _a.message\n          }));\n        }\n      });\n    })();\n  }\n\n  set(key, value) {\n    var _this6 = this;\n\n    return _asyncToGenerator(function* () {\n      const db = yield _this6.openDbPromise;\n      return new Promise((resolve, reject) => {\n        var _a;\n\n        const transaction = db.transaction([APP_NAMESPACE_STORE], 'readwrite');\n        const objectStore = transaction.objectStore(APP_NAMESPACE_STORE);\n\n        const compositeKey = _this6.createCompositeKey(key);\n\n        try {\n          const request = objectStore.put({\n            compositeKey,\n            value\n          });\n\n          request.onerror = event => {\n            reject(toFirebaseError(event, \"storage-set\"\n            /* STORAGE_SET */\n            ));\n          };\n\n          request.onsuccess = () => {\n            resolve();\n          };\n        } catch (e) {\n          reject(ERROR_FACTORY.create(\"storage-set\"\n          /* STORAGE_SET */\n          , {\n            originalErrorMessage: (_a = e) === null || _a === void 0 ? void 0 : _a.message\n          }));\n        }\n      });\n    })();\n  }\n\n  delete(key) {\n    var _this7 = this;\n\n    return _asyncToGenerator(function* () {\n      const db = yield _this7.openDbPromise;\n      return new Promise((resolve, reject) => {\n        var _a;\n\n        const transaction = db.transaction([APP_NAMESPACE_STORE], 'readwrite');\n        const objectStore = transaction.objectStore(APP_NAMESPACE_STORE);\n\n        const compositeKey = _this7.createCompositeKey(key);\n\n        try {\n          const request = objectStore.delete(compositeKey);\n\n          request.onerror = event => {\n            reject(toFirebaseError(event, \"storage-delete\"\n            /* STORAGE_DELETE */\n            ));\n          };\n\n          request.onsuccess = () => {\n            resolve();\n          };\n        } catch (e) {\n          reject(ERROR_FACTORY.create(\"storage-delete\"\n          /* STORAGE_DELETE */\n          , {\n            originalErrorMessage: (_a = e) === null || _a === void 0 ? void 0 : _a.message\n          }));\n        }\n      });\n    })();\n  } // Facilitates composite key functionality (which is unsupported in IE).\n\n\n  createCompositeKey(key) {\n    return [this.appId, this.appName, this.namespace, key].join();\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * A memory cache layer over storage to support the SDK's synchronous read requirements.\r\n */\n\n\nclass StorageCache {\n  constructor(storage) {\n    this.storage = storage;\n  }\n  /**\r\n   * Memory-only getters\r\n   */\n\n\n  getLastFetchStatus() {\n    return this.lastFetchStatus;\n  }\n\n  getLastSuccessfulFetchTimestampMillis() {\n    return this.lastSuccessfulFetchTimestampMillis;\n  }\n\n  getActiveConfig() {\n    return this.activeConfig;\n  }\n  /**\r\n   * Read-ahead getter\r\n   */\n\n\n  loadFromStorage() {\n    var _this8 = this;\n\n    return _asyncToGenerator(function* () {\n      const lastFetchStatusPromise = _this8.storage.getLastFetchStatus();\n\n      const lastSuccessfulFetchTimestampMillisPromise = _this8.storage.getLastSuccessfulFetchTimestampMillis();\n\n      const activeConfigPromise = _this8.storage.getActiveConfig(); // Note:\n      // 1. we consistently check for undefined to avoid clobbering defined values\n      //   in memory\n      // 2. we defer awaiting to improve readability, as opposed to destructuring\n      //   a Promise.all result, for example\n\n\n      const lastFetchStatus = yield lastFetchStatusPromise;\n\n      if (lastFetchStatus) {\n        _this8.lastFetchStatus = lastFetchStatus;\n      }\n\n      const lastSuccessfulFetchTimestampMillis = yield lastSuccessfulFetchTimestampMillisPromise;\n\n      if (lastSuccessfulFetchTimestampMillis) {\n        _this8.lastSuccessfulFetchTimestampMillis = lastSuccessfulFetchTimestampMillis;\n      }\n\n      const activeConfig = yield activeConfigPromise;\n\n      if (activeConfig) {\n        _this8.activeConfig = activeConfig;\n      }\n    })();\n  }\n  /**\r\n   * Write-through setters\r\n   */\n\n\n  setLastFetchStatus(status) {\n    this.lastFetchStatus = status;\n    return this.storage.setLastFetchStatus(status);\n  }\n\n  setLastSuccessfulFetchTimestampMillis(timestampMillis) {\n    this.lastSuccessfulFetchTimestampMillis = timestampMillis;\n    return this.storage.setLastSuccessfulFetchTimestampMillis(timestampMillis);\n  }\n\n  setActiveConfig(activeConfig) {\n    this.activeConfig = activeConfig;\n    return this.storage.setActiveConfig(activeConfig);\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction registerRemoteConfig() {\n  _registerComponent(new Component(RC_COMPONENT_NAME, remoteConfigFactory, \"PUBLIC\"\n  /* PUBLIC */\n  ).setMultipleInstances(true));\n\n  registerVersion(name, version); // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n\n  registerVersion(name, version, 'esm2017');\n\n  function remoteConfigFactory(container, {\n    instanceIdentifier: namespace\n  }) {\n    /* Dependencies */\n    // getImmediate for FirebaseApp will always succeed\n    const app = container.getProvider('app').getImmediate(); // The following call will always succeed because rc has `import '@firebase/installations'`\n\n    const installations = container.getProvider('installations-internal').getImmediate(); // Guards against the SDK being used in non-browser environments.\n\n    if (typeof window === 'undefined') {\n      throw ERROR_FACTORY.create(\"registration-window\"\n      /* REGISTRATION_WINDOW */\n      );\n    } // Guards against the SDK being used when indexedDB is not available.\n\n\n    if (!isIndexedDBAvailable()) {\n      throw ERROR_FACTORY.create(\"indexed-db-unavailable\"\n      /* INDEXED_DB_UNAVAILABLE */\n      );\n    } // Normalizes optional inputs.\n\n\n    const {\n      projectId,\n      apiKey,\n      appId\n    } = app.options;\n\n    if (!projectId) {\n      throw ERROR_FACTORY.create(\"registration-project-id\"\n      /* REGISTRATION_PROJECT_ID */\n      );\n    }\n\n    if (!apiKey) {\n      throw ERROR_FACTORY.create(\"registration-api-key\"\n      /* REGISTRATION_API_KEY */\n      );\n    }\n\n    if (!appId) {\n      throw ERROR_FACTORY.create(\"registration-app-id\"\n      /* REGISTRATION_APP_ID */\n      );\n    }\n\n    namespace = namespace || 'firebase';\n    const storage = new Storage(appId, app.name, namespace);\n    const storageCache = new StorageCache(storage);\n    const logger = new Logger(name); // Sets ERROR as the default log level.\n    // See RemoteConfig#setLogLevel for corresponding normalization to ERROR log level.\n\n    logger.logLevel = LogLevel.ERROR;\n    const restClient = new RestClient(installations, // Uses the JS SDK version, by which the RC package version can be deduced, if necessary.\n    SDK_VERSION, namespace, projectId, apiKey, appId);\n    const retryingClient = new RetryingClient(restClient, storage);\n    const cachingClient = new CachingClient(retryingClient, storage, storageCache, logger);\n    const remoteConfigInstance = new RemoteConfig(app, cachingClient, storageCache, storage, logger); // Starts warming cache.\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n\n    ensureInitialized(remoteConfigInstance);\n    return remoteConfigInstance;\n  }\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// This API is put in a separate file, so we can stub fetchConfig and activate in tests.\n// It's not possible to stub standalone functions from the same module.\n\n/**\r\n *\r\n * Performs fetch and activate operations, as a convenience.\r\n *\r\n * @param remoteConfig - The {@link RemoteConfig} instance.\r\n *\r\n * @returns A `Promise` which resolves to true if the current call activated the fetched configs.\r\n * If the fetched configs were already activated, the `Promise` will resolve to false.\r\n *\r\n * @public\r\n */\n\n\nfunction fetchAndActivate(_x3) {\n  return _fetchAndActivate.apply(this, arguments);\n}\n/**\r\n * This method provides two different checks:\r\n *\r\n * 1. Check if IndexedDB exists in the browser environment.\r\n * 2. Check if the current browser context allows IndexedDB `open()` calls.\r\n *\r\n * @returns A `Promise` which resolves to true if a {@link RemoteConfig} instance\r\n * can be initialized in this environment, or false if it cannot.\r\n * @public\r\n */\n\n\nfunction _fetchAndActivate() {\n  _fetchAndActivate = _asyncToGenerator(function* (remoteConfig) {\n    remoteConfig = getModularInstance(remoteConfig);\n    yield fetchConfig(remoteConfig);\n    return activate(remoteConfig);\n  });\n  return _fetchAndActivate.apply(this, arguments);\n}\n\nfunction isSupported() {\n  return _isSupported.apply(this, arguments);\n}\n/**\r\n * Firebase Remote Config\r\n *\r\n * @packageDocumentation\r\n */\n\n/** register component and version */\n\n\nfunction _isSupported() {\n  _isSupported = _asyncToGenerator(function* () {\n    if (!isIndexedDBAvailable()) {\n      return false;\n    }\n\n    try {\n      const isDBOpenable = yield validateIndexedDBOpenable();\n      return isDBOpenable;\n    } catch (error) {\n      return false;\n    }\n  });\n  return _isSupported.apply(this, arguments);\n}\n\nregisterRemoteConfig();\nexport { activate, ensureInitialized, fetchAndActivate, fetchConfig, getAll, getBoolean, getNumber, getRemoteConfig, getString, getValue, isSupported, setLogLevel };","map":{"version":3,"names":["getApp","_getProvider","_registerComponent","registerVersion","SDK_VERSION","ErrorFactory","FirebaseError","getModularInstance","calculateBackoffMillis","isIndexedDBAvailable","validateIndexedDBOpenable","Component","LogLevel","Logger","name","version","RemoteConfigAbortSignal","constructor","listeners","addEventListener","listener","push","abort","forEach","RC_COMPONENT_NAME","ERROR_DESCRIPTION_MAP","ERROR_FACTORY","hasErrorCode","e","errorCode","code","indexOf","DEFAULT_VALUE_FOR_BOOLEAN","DEFAULT_VALUE_FOR_STRING","DEFAULT_VALUE_FOR_NUMBER","BOOLEAN_TRUTHY_VALUES","Value","_source","_value","asString","asBoolean","toLowerCase","asNumber","num","Number","isNaN","getSource","getRemoteConfig","app","rcProvider","getImmediate","activate","remoteConfig","rc","lastSuccessfulFetchResponse","activeConfigEtag","Promise","all","_storage","getLastSuccessfulFetchResponse","getActiveConfigEtag","config","eTag","_storageCache","setActiveConfig","setActiveConfigEtag","ensureInitialized","_initializePromise","loadFromStorage","then","_isInitializationComplete","fetchConfig","abortSignal","setTimeout","settings","fetchTimeoutMillis","_client","fetch","cacheMaxAgeMillis","minimumFetchIntervalMillis","signal","setLastFetchStatus","lastFetchStatus","getAll","getAllKeys","getActiveConfig","defaultConfig","reduce","allConfigs","key","getValue","getBoolean","getNumber","getString","_logger","debug","activeConfig","undefined","String","setLogLevel","logLevel","DEBUG","SILENT","ERROR","obj1","obj2","Object","keys","assign","CachingClient","client","storage","storageCache","logger","isCachedDataFresh","lastSuccessfulFetchTimestampMillis","cacheAgeMillis","Date","now","request","getLastSuccessfulFetchTimestampMillis","response","storageOperations","setLastSuccessfulFetchTimestampMillis","status","setLastSuccessfulFetchResponse","getUserLanguage","navigatorLanguage","navigator","languages","language","RestClient","firebaseInstallations","sdkVersion","namespace","projectId","apiKey","appId","_a","_b","_c","installationId","installationToken","getId","getToken","urlBase","window","FIREBASE_REMOTE_CONFIG_URL_BASE","url","headers","requestBody","sdk_version","app_instance_id","app_instance_id_token","app_id","language_code","options","method","body","JSON","stringify","fetchPromise","timeoutPromise","_resolve","reject","error","Error","race","originalError","create","originalErrorMessage","message","responseEtag","get","state","responseBody","json","httpStatus","setAbortableTimeout","throttleEndTimeMillis","resolve","backoffMillis","Math","max","timeout","clearTimeout","isRetriableError","customData","RetryingClient","throttleMetadata","getThrottleMetadata","backoffCount","attemptFetch","deleteThrottleMetadata","setThrottleMetadata","DEFAULT_FETCH_TIMEOUT_MILLIS","DEFAULT_CACHE_MAX_AGE_MILLIS","RemoteConfig","fetchTimeMillis","getLastFetchStatus","toFirebaseError","event","target","APP_NAMESPACE_STORE","DB_NAME","DB_VERSION","openDatabase","indexedDB","open","onerror","onsuccess","result","onupgradeneeded","db","oldVersion","createObjectStore","keyPath","Storage","appName","openDbPromise","set","timestamp","etag","metadata","delete","transaction","objectStore","compositeKey","createCompositeKey","value","put","join","StorageCache","lastFetchStatusPromise","lastSuccessfulFetchTimestampMillisPromise","activeConfigPromise","timestampMillis","registerRemoteConfig","remoteConfigFactory","setMultipleInstances","container","instanceIdentifier","getProvider","installations","restClient","retryingClient","cachingClient","remoteConfigInstance","fetchAndActivate","isSupported","isDBOpenable"],"sources":["C:/Users/Felix/Desktop/lan.adeptinfo.ca/lan-adept/node_modules/@firebase/remote-config/dist/esm/index.esm2017.js"],"sourcesContent":["import { getApp, _getProvider, _registerComponent, registerVersion, SDK_VERSION } from '@firebase/app';\nimport { ErrorFactory, FirebaseError, getModularInstance, calculateBackoffMillis, isIndexedDBAvailable, validateIndexedDBOpenable } from '@firebase/util';\nimport { Component } from '@firebase/component';\nimport { LogLevel, Logger } from '@firebase/logger';\nimport '@firebase/installations';\n\nconst name = \"@firebase/remote-config\";\nconst version = \"0.3.11\";\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Shims a minimal AbortSignal.\r\n *\r\n * <p>AbortController's AbortSignal conveniently decouples fetch timeout logic from other aspects\r\n * of networking, such as retries. Firebase doesn't use AbortController enough to justify a\r\n * polyfill recommendation, like we do with the Fetch API, but this minimal shim can easily be\r\n * swapped out if/when we do.\r\n */\r\nclass RemoteConfigAbortSignal {\r\n    constructor() {\r\n        this.listeners = [];\r\n    }\r\n    addEventListener(listener) {\r\n        this.listeners.push(listener);\r\n    }\r\n    abort() {\r\n        this.listeners.forEach(listener => listener());\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst RC_COMPONENT_NAME = 'remote-config';\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst ERROR_DESCRIPTION_MAP = {\r\n    [\"registration-window\" /* REGISTRATION_WINDOW */]: 'Undefined window object. This SDK only supports usage in a browser environment.',\r\n    [\"registration-project-id\" /* REGISTRATION_PROJECT_ID */]: 'Undefined project identifier. Check Firebase app initialization.',\r\n    [\"registration-api-key\" /* REGISTRATION_API_KEY */]: 'Undefined API key. Check Firebase app initialization.',\r\n    [\"registration-app-id\" /* REGISTRATION_APP_ID */]: 'Undefined app identifier. Check Firebase app initialization.',\r\n    [\"storage-open\" /* STORAGE_OPEN */]: 'Error thrown when opening storage. Original error: {$originalErrorMessage}.',\r\n    [\"storage-get\" /* STORAGE_GET */]: 'Error thrown when reading from storage. Original error: {$originalErrorMessage}.',\r\n    [\"storage-set\" /* STORAGE_SET */]: 'Error thrown when writing to storage. Original error: {$originalErrorMessage}.',\r\n    [\"storage-delete\" /* STORAGE_DELETE */]: 'Error thrown when deleting from storage. Original error: {$originalErrorMessage}.',\r\n    [\"fetch-client-network\" /* FETCH_NETWORK */]: 'Fetch client failed to connect to a network. Check Internet connection.' +\r\n        ' Original error: {$originalErrorMessage}.',\r\n    [\"fetch-timeout\" /* FETCH_TIMEOUT */]: 'The config fetch request timed out. ' +\r\n        ' Configure timeout using \"fetchTimeoutMillis\" SDK setting.',\r\n    [\"fetch-throttle\" /* FETCH_THROTTLE */]: 'The config fetch request timed out while in an exponential backoff state.' +\r\n        ' Configure timeout using \"fetchTimeoutMillis\" SDK setting.' +\r\n        ' Unix timestamp in milliseconds when fetch request throttling ends: {$throttleEndTimeMillis}.',\r\n    [\"fetch-client-parse\" /* FETCH_PARSE */]: 'Fetch client could not parse response.' +\r\n        ' Original error: {$originalErrorMessage}.',\r\n    [\"fetch-status\" /* FETCH_STATUS */]: 'Fetch server returned an HTTP error status. HTTP status: {$httpStatus}.',\r\n    [\"indexed-db-unavailable\" /* INDEXED_DB_UNAVAILABLE */]: 'Indexed DB is not supported by current browser'\r\n};\r\nconst ERROR_FACTORY = new ErrorFactory('remoteconfig' /* service */, 'Remote Config' /* service name */, ERROR_DESCRIPTION_MAP);\r\n// Note how this is like typeof/instanceof, but for ErrorCode.\r\nfunction hasErrorCode(e, errorCode) {\r\n    return e instanceof FirebaseError && e.code.indexOf(errorCode) !== -1;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst DEFAULT_VALUE_FOR_BOOLEAN = false;\r\nconst DEFAULT_VALUE_FOR_STRING = '';\r\nconst DEFAULT_VALUE_FOR_NUMBER = 0;\r\nconst BOOLEAN_TRUTHY_VALUES = ['1', 'true', 't', 'yes', 'y', 'on'];\r\nclass Value {\r\n    constructor(_source, _value = DEFAULT_VALUE_FOR_STRING) {\r\n        this._source = _source;\r\n        this._value = _value;\r\n    }\r\n    asString() {\r\n        return this._value;\r\n    }\r\n    asBoolean() {\r\n        if (this._source === 'static') {\r\n            return DEFAULT_VALUE_FOR_BOOLEAN;\r\n        }\r\n        return BOOLEAN_TRUTHY_VALUES.indexOf(this._value.toLowerCase()) >= 0;\r\n    }\r\n    asNumber() {\r\n        if (this._source === 'static') {\r\n            return DEFAULT_VALUE_FOR_NUMBER;\r\n        }\r\n        let num = Number(this._value);\r\n        if (isNaN(num)) {\r\n            num = DEFAULT_VALUE_FOR_NUMBER;\r\n        }\r\n        return num;\r\n    }\r\n    getSource() {\r\n        return this._source;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n *\r\n * @param app - The {@link @firebase/app#FirebaseApp} instance.\r\n * @returns A {@link RemoteConfig} instance.\r\n *\r\n * @public\r\n */\r\nfunction getRemoteConfig(app = getApp()) {\r\n    app = getModularInstance(app);\r\n    const rcProvider = _getProvider(app, RC_COMPONENT_NAME);\r\n    return rcProvider.getImmediate();\r\n}\r\n/**\r\n * Makes the last fetched config available to the getters.\r\n * @param remoteConfig - The {@link RemoteConfig} instance.\r\n * @returns A `Promise` which resolves to true if the current call activated the fetched configs.\r\n * If the fetched configs were already activated, the `Promise` will resolve to false.\r\n *\r\n * @public\r\n */\r\nasync function activate(remoteConfig) {\r\n    const rc = getModularInstance(remoteConfig);\r\n    const [lastSuccessfulFetchResponse, activeConfigEtag] = await Promise.all([\r\n        rc._storage.getLastSuccessfulFetchResponse(),\r\n        rc._storage.getActiveConfigEtag()\r\n    ]);\r\n    if (!lastSuccessfulFetchResponse ||\r\n        !lastSuccessfulFetchResponse.config ||\r\n        !lastSuccessfulFetchResponse.eTag ||\r\n        lastSuccessfulFetchResponse.eTag === activeConfigEtag) {\r\n        // Either there is no successful fetched config, or is the same as current active\r\n        // config.\r\n        return false;\r\n    }\r\n    await Promise.all([\r\n        rc._storageCache.setActiveConfig(lastSuccessfulFetchResponse.config),\r\n        rc._storage.setActiveConfigEtag(lastSuccessfulFetchResponse.eTag)\r\n    ]);\r\n    return true;\r\n}\r\n/**\r\n * Ensures the last activated config are available to the getters.\r\n * @param remoteConfig - The {@link RemoteConfig} instance.\r\n *\r\n * @returns A `Promise` that resolves when the last activated config is available to the getters.\r\n * @public\r\n */\r\nfunction ensureInitialized(remoteConfig) {\r\n    const rc = getModularInstance(remoteConfig);\r\n    if (!rc._initializePromise) {\r\n        rc._initializePromise = rc._storageCache.loadFromStorage().then(() => {\r\n            rc._isInitializationComplete = true;\r\n        });\r\n    }\r\n    return rc._initializePromise;\r\n}\r\n/**\r\n * Fetches and caches configuration from the Remote Config service.\r\n * @param remoteConfig - The {@link RemoteConfig} instance.\r\n * @public\r\n */\r\nasync function fetchConfig(remoteConfig) {\r\n    const rc = getModularInstance(remoteConfig);\r\n    // Aborts the request after the given timeout, causing the fetch call to\r\n    // reject with an `AbortError`.\r\n    //\r\n    // <p>Aborting after the request completes is a no-op, so we don't need a\r\n    // corresponding `clearTimeout`.\r\n    //\r\n    // Locating abort logic here because:\r\n    // * it uses a developer setting (timeout)\r\n    // * it applies to all retries (like curl's max-time arg)\r\n    // * it is consistent with the Fetch API's signal input\r\n    const abortSignal = new RemoteConfigAbortSignal();\r\n    setTimeout(async () => {\r\n        // Note a very low delay, eg < 10ms, can elapse before listeners are initialized.\r\n        abortSignal.abort();\r\n    }, rc.settings.fetchTimeoutMillis);\r\n    // Catches *all* errors thrown by client so status can be set consistently.\r\n    try {\r\n        await rc._client.fetch({\r\n            cacheMaxAgeMillis: rc.settings.minimumFetchIntervalMillis,\r\n            signal: abortSignal\r\n        });\r\n        await rc._storageCache.setLastFetchStatus('success');\r\n    }\r\n    catch (e) {\r\n        const lastFetchStatus = hasErrorCode(e, \"fetch-throttle\" /* FETCH_THROTTLE */)\r\n            ? 'throttle'\r\n            : 'failure';\r\n        await rc._storageCache.setLastFetchStatus(lastFetchStatus);\r\n        throw e;\r\n    }\r\n}\r\n/**\r\n * Gets all config.\r\n *\r\n * @param remoteConfig - The {@link RemoteConfig} instance.\r\n * @returns All config.\r\n *\r\n * @public\r\n */\r\nfunction getAll(remoteConfig) {\r\n    const rc = getModularInstance(remoteConfig);\r\n    return getAllKeys(rc._storageCache.getActiveConfig(), rc.defaultConfig).reduce((allConfigs, key) => {\r\n        allConfigs[key] = getValue(remoteConfig, key);\r\n        return allConfigs;\r\n    }, {});\r\n}\r\n/**\r\n * Gets the value for the given key as a boolean.\r\n *\r\n * Convenience method for calling <code>remoteConfig.getValue(key).asBoolean()</code>.\r\n *\r\n * @param remoteConfig - The {@link RemoteConfig} instance.\r\n * @param key - The name of the parameter.\r\n *\r\n * @returns The value for the given key as a boolean.\r\n * @public\r\n */\r\nfunction getBoolean(remoteConfig, key) {\r\n    return getValue(getModularInstance(remoteConfig), key).asBoolean();\r\n}\r\n/**\r\n * Gets the value for the given key as a number.\r\n *\r\n * Convenience method for calling <code>remoteConfig.getValue(key).asNumber()</code>.\r\n *\r\n * @param remoteConfig - The {@link RemoteConfig} instance.\r\n * @param key - The name of the parameter.\r\n *\r\n * @returns The value for the given key as a number.\r\n *\r\n * @public\r\n */\r\nfunction getNumber(remoteConfig, key) {\r\n    return getValue(getModularInstance(remoteConfig), key).asNumber();\r\n}\r\n/**\r\n * Gets the value for the given key as a string.\r\n * Convenience method for calling <code>remoteConfig.getValue(key).asString()</code>.\r\n *\r\n * @param remoteConfig - The {@link RemoteConfig} instance.\r\n * @param key - The name of the parameter.\r\n *\r\n * @returns The value for the given key as a string.\r\n *\r\n * @public\r\n */\r\nfunction getString(remoteConfig, key) {\r\n    return getValue(getModularInstance(remoteConfig), key).asString();\r\n}\r\n/**\r\n * Gets the {@link Value} for the given key.\r\n *\r\n * @param remoteConfig - The {@link RemoteConfig} instance.\r\n * @param key - The name of the parameter.\r\n *\r\n * @returns The value for the given key.\r\n *\r\n * @public\r\n */\r\nfunction getValue(remoteConfig, key) {\r\n    const rc = getModularInstance(remoteConfig);\r\n    if (!rc._isInitializationComplete) {\r\n        rc._logger.debug(`A value was requested for key \"${key}\" before SDK initialization completed.` +\r\n            ' Await on ensureInitialized if the intent was to get a previously activated value.');\r\n    }\r\n    const activeConfig = rc._storageCache.getActiveConfig();\r\n    if (activeConfig && activeConfig[key] !== undefined) {\r\n        return new Value('remote', activeConfig[key]);\r\n    }\r\n    else if (rc.defaultConfig && rc.defaultConfig[key] !== undefined) {\r\n        return new Value('default', String(rc.defaultConfig[key]));\r\n    }\r\n    rc._logger.debug(`Returning static value for key \"${key}\".` +\r\n        ' Define a default or remote value if this is unintentional.');\r\n    return new Value('static');\r\n}\r\n/**\r\n * Defines the log level to use.\r\n *\r\n * @param remoteConfig - The {@link RemoteConfig} instance.\r\n * @param logLevel - The log level to set.\r\n *\r\n * @public\r\n */\r\nfunction setLogLevel(remoteConfig, logLevel) {\r\n    const rc = getModularInstance(remoteConfig);\r\n    switch (logLevel) {\r\n        case 'debug':\r\n            rc._logger.logLevel = LogLevel.DEBUG;\r\n            break;\r\n        case 'silent':\r\n            rc._logger.logLevel = LogLevel.SILENT;\r\n            break;\r\n        default:\r\n            rc._logger.logLevel = LogLevel.ERROR;\r\n    }\r\n}\r\n/**\r\n * Dedupes and returns an array of all the keys of the received objects.\r\n */\r\nfunction getAllKeys(obj1 = {}, obj2 = {}) {\r\n    return Object.keys(Object.assign(Object.assign({}, obj1), obj2));\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Implements the {@link RemoteConfigClient} abstraction with success response caching.\r\n *\r\n * <p>Comparable to the browser's Cache API for responses, but the Cache API requires a Service\r\n * Worker, which requires HTTPS, which would significantly complicate SDK installation. Also, the\r\n * Cache API doesn't support matching entries by time.\r\n */\r\nclass CachingClient {\r\n    constructor(client, storage, storageCache, logger) {\r\n        this.client = client;\r\n        this.storage = storage;\r\n        this.storageCache = storageCache;\r\n        this.logger = logger;\r\n    }\r\n    /**\r\n     * Returns true if the age of the cached fetched configs is less than or equal to\r\n     * {@link Settings#minimumFetchIntervalInSeconds}.\r\n     *\r\n     * <p>This is comparable to passing `headers = { 'Cache-Control': max-age <maxAge> }` to the\r\n     * native Fetch API.\r\n     *\r\n     * <p>Visible for testing.\r\n     */\r\n    isCachedDataFresh(cacheMaxAgeMillis, lastSuccessfulFetchTimestampMillis) {\r\n        // Cache can only be fresh if it's populated.\r\n        if (!lastSuccessfulFetchTimestampMillis) {\r\n            this.logger.debug('Config fetch cache check. Cache unpopulated.');\r\n            return false;\r\n        }\r\n        // Calculates age of cache entry.\r\n        const cacheAgeMillis = Date.now() - lastSuccessfulFetchTimestampMillis;\r\n        const isCachedDataFresh = cacheAgeMillis <= cacheMaxAgeMillis;\r\n        this.logger.debug('Config fetch cache check.' +\r\n            ` Cache age millis: ${cacheAgeMillis}.` +\r\n            ` Cache max age millis (minimumFetchIntervalMillis setting): ${cacheMaxAgeMillis}.` +\r\n            ` Is cache hit: ${isCachedDataFresh}.`);\r\n        return isCachedDataFresh;\r\n    }\r\n    async fetch(request) {\r\n        // Reads from persisted storage to avoid cache miss if callers don't wait on initialization.\r\n        const [lastSuccessfulFetchTimestampMillis, lastSuccessfulFetchResponse] = await Promise.all([\r\n            this.storage.getLastSuccessfulFetchTimestampMillis(),\r\n            this.storage.getLastSuccessfulFetchResponse()\r\n        ]);\r\n        // Exits early on cache hit.\r\n        if (lastSuccessfulFetchResponse &&\r\n            this.isCachedDataFresh(request.cacheMaxAgeMillis, lastSuccessfulFetchTimestampMillis)) {\r\n            return lastSuccessfulFetchResponse;\r\n        }\r\n        // Deviates from pure decorator by not honoring a passed ETag since we don't have a public API\r\n        // that allows the caller to pass an ETag.\r\n        request.eTag =\r\n            lastSuccessfulFetchResponse && lastSuccessfulFetchResponse.eTag;\r\n        // Falls back to service on cache miss.\r\n        const response = await this.client.fetch(request);\r\n        // Fetch throws for non-success responses, so success is guaranteed here.\r\n        const storageOperations = [\r\n            // Uses write-through cache for consistency with synchronous public API.\r\n            this.storageCache.setLastSuccessfulFetchTimestampMillis(Date.now())\r\n        ];\r\n        if (response.status === 200) {\r\n            // Caches response only if it has changed, ie non-304 responses.\r\n            storageOperations.push(this.storage.setLastSuccessfulFetchResponse(response));\r\n        }\r\n        await Promise.all(storageOperations);\r\n        return response;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Attempts to get the most accurate browser language setting.\r\n *\r\n * <p>Adapted from getUserLanguage in packages/auth/src/utils.js for TypeScript.\r\n *\r\n * <p>Defers default language specification to server logic for consistency.\r\n *\r\n * @param navigatorLanguage Enables tests to override read-only {@link NavigatorLanguage}.\r\n */\r\nfunction getUserLanguage(navigatorLanguage = navigator) {\r\n    return (\r\n    // Most reliable, but only supported in Chrome/Firefox.\r\n    (navigatorLanguage.languages && navigatorLanguage.languages[0]) ||\r\n        // Supported in most browsers, but returns the language of the browser\r\n        // UI, not the language set in browser settings.\r\n        navigatorLanguage.language\r\n    // Polyfill otherwise.\r\n    );\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Implements the Client abstraction for the Remote Config REST API.\r\n */\r\nclass RestClient {\r\n    constructor(firebaseInstallations, sdkVersion, namespace, projectId, apiKey, appId) {\r\n        this.firebaseInstallations = firebaseInstallations;\r\n        this.sdkVersion = sdkVersion;\r\n        this.namespace = namespace;\r\n        this.projectId = projectId;\r\n        this.apiKey = apiKey;\r\n        this.appId = appId;\r\n    }\r\n    /**\r\n     * Fetches from the Remote Config REST API.\r\n     *\r\n     * @throws a {@link ErrorCode.FETCH_NETWORK} error if {@link GlobalFetch#fetch} can't\r\n     * connect to the network.\r\n     * @throws a {@link ErrorCode.FETCH_PARSE} error if {@link Response#json} can't parse the\r\n     * fetch response.\r\n     * @throws a {@link ErrorCode.FETCH_STATUS} error if the service returns an HTTP error status.\r\n     */\r\n    async fetch(request) {\r\n        var _a, _b, _c;\r\n        const [installationId, installationToken] = await Promise.all([\r\n            this.firebaseInstallations.getId(),\r\n            this.firebaseInstallations.getToken()\r\n        ]);\r\n        const urlBase = window.FIREBASE_REMOTE_CONFIG_URL_BASE ||\r\n            'https://firebaseremoteconfig.googleapis.com';\r\n        const url = `${urlBase}/v1/projects/${this.projectId}/namespaces/${this.namespace}:fetch?key=${this.apiKey}`;\r\n        const headers = {\r\n            'Content-Type': 'application/json',\r\n            'Content-Encoding': 'gzip',\r\n            // Deviates from pure decorator by not passing max-age header since we don't currently have\r\n            // service behavior using that header.\r\n            'If-None-Match': request.eTag || '*'\r\n        };\r\n        const requestBody = {\r\n            /* eslint-disable camelcase */\r\n            sdk_version: this.sdkVersion,\r\n            app_instance_id: installationId,\r\n            app_instance_id_token: installationToken,\r\n            app_id: this.appId,\r\n            language_code: getUserLanguage()\r\n            /* eslint-enable camelcase */\r\n        };\r\n        const options = {\r\n            method: 'POST',\r\n            headers,\r\n            body: JSON.stringify(requestBody)\r\n        };\r\n        // This logic isn't REST-specific, but shimming abort logic isn't worth another decorator.\r\n        const fetchPromise = fetch(url, options);\r\n        const timeoutPromise = new Promise((_resolve, reject) => {\r\n            // Maps async event listener to Promise API.\r\n            request.signal.addEventListener(() => {\r\n                // Emulates https://heycam.github.io/webidl/#aborterror\r\n                const error = new Error('The operation was aborted.');\r\n                error.name = 'AbortError';\r\n                reject(error);\r\n            });\r\n        });\r\n        let response;\r\n        try {\r\n            await Promise.race([fetchPromise, timeoutPromise]);\r\n            response = await fetchPromise;\r\n        }\r\n        catch (originalError) {\r\n            let errorCode = \"fetch-client-network\" /* FETCH_NETWORK */;\r\n            if (((_a = originalError) === null || _a === void 0 ? void 0 : _a.name) === 'AbortError') {\r\n                errorCode = \"fetch-timeout\" /* FETCH_TIMEOUT */;\r\n            }\r\n            throw ERROR_FACTORY.create(errorCode, {\r\n                originalErrorMessage: (_b = originalError) === null || _b === void 0 ? void 0 : _b.message\r\n            });\r\n        }\r\n        let status = response.status;\r\n        // Normalizes nullable header to optional.\r\n        const responseEtag = response.headers.get('ETag') || undefined;\r\n        let config;\r\n        let state;\r\n        // JSON parsing throws SyntaxError if the response body isn't a JSON string.\r\n        // Requesting application/json and checking for a 200 ensures there's JSON data.\r\n        if (response.status === 200) {\r\n            let responseBody;\r\n            try {\r\n                responseBody = await response.json();\r\n            }\r\n            catch (originalError) {\r\n                throw ERROR_FACTORY.create(\"fetch-client-parse\" /* FETCH_PARSE */, {\r\n                    originalErrorMessage: (_c = originalError) === null || _c === void 0 ? void 0 : _c.message\r\n                });\r\n            }\r\n            config = responseBody['entries'];\r\n            state = responseBody['state'];\r\n        }\r\n        // Normalizes based on legacy state.\r\n        if (state === 'INSTANCE_STATE_UNSPECIFIED') {\r\n            status = 500;\r\n        }\r\n        else if (state === 'NO_CHANGE') {\r\n            status = 304;\r\n        }\r\n        else if (state === 'NO_TEMPLATE' || state === 'EMPTY_CONFIG') {\r\n            // These cases can be fixed remotely, so normalize to safe value.\r\n            config = {};\r\n        }\r\n        // Normalize to exception-based control flow for non-success cases.\r\n        // Encapsulates HTTP specifics in this class as much as possible. Status is still the best for\r\n        // differentiating success states (200 from 304; the state body param is undefined in a\r\n        // standard 304).\r\n        if (status !== 304 && status !== 200) {\r\n            throw ERROR_FACTORY.create(\"fetch-status\" /* FETCH_STATUS */, {\r\n                httpStatus: status\r\n            });\r\n        }\r\n        return { status, eTag: responseEtag, config };\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Supports waiting on a backoff by:\r\n *\r\n * <ul>\r\n *   <li>Promisifying setTimeout, so we can set a timeout in our Promise chain</li>\r\n *   <li>Listening on a signal bus for abort events, just like the Fetch API</li>\r\n *   <li>Failing in the same way the Fetch API fails, so timing out a live request and a throttled\r\n *       request appear the same.</li>\r\n * </ul>\r\n *\r\n * <p>Visible for testing.\r\n */\r\nfunction setAbortableTimeout(signal, throttleEndTimeMillis) {\r\n    return new Promise((resolve, reject) => {\r\n        // Derives backoff from given end time, normalizing negative numbers to zero.\r\n        const backoffMillis = Math.max(throttleEndTimeMillis - Date.now(), 0);\r\n        const timeout = setTimeout(resolve, backoffMillis);\r\n        // Adds listener, rather than sets onabort, because signal is a shared object.\r\n        signal.addEventListener(() => {\r\n            clearTimeout(timeout);\r\n            // If the request completes before this timeout, the rejection has no effect.\r\n            reject(ERROR_FACTORY.create(\"fetch-throttle\" /* FETCH_THROTTLE */, {\r\n                throttleEndTimeMillis\r\n            }));\r\n        });\r\n    });\r\n}\r\n/**\r\n * Returns true if the {@link Error} indicates a fetch request may succeed later.\r\n */\r\nfunction isRetriableError(e) {\r\n    if (!(e instanceof FirebaseError) || !e.customData) {\r\n        return false;\r\n    }\r\n    // Uses string index defined by ErrorData, which FirebaseError implements.\r\n    const httpStatus = Number(e.customData['httpStatus']);\r\n    return (httpStatus === 429 ||\r\n        httpStatus === 500 ||\r\n        httpStatus === 503 ||\r\n        httpStatus === 504);\r\n}\r\n/**\r\n * Decorates a Client with retry logic.\r\n *\r\n * <p>Comparable to CachingClient, but uses backoff logic instead of cache max age and doesn't cache\r\n * responses (because the SDK has no use for error responses).\r\n */\r\nclass RetryingClient {\r\n    constructor(client, storage) {\r\n        this.client = client;\r\n        this.storage = storage;\r\n    }\r\n    async fetch(request) {\r\n        const throttleMetadata = (await this.storage.getThrottleMetadata()) || {\r\n            backoffCount: 0,\r\n            throttleEndTimeMillis: Date.now()\r\n        };\r\n        return this.attemptFetch(request, throttleMetadata);\r\n    }\r\n    /**\r\n     * A recursive helper for attempting a fetch request repeatedly.\r\n     *\r\n     * @throws any non-retriable errors.\r\n     */\r\n    async attemptFetch(request, { throttleEndTimeMillis, backoffCount }) {\r\n        // Starts with a (potentially zero) timeout to support resumption from stored state.\r\n        // Ensures the throttle end time is honored if the last attempt timed out.\r\n        // Note the SDK will never make a request if the fetch timeout expires at this point.\r\n        await setAbortableTimeout(request.signal, throttleEndTimeMillis);\r\n        try {\r\n            const response = await this.client.fetch(request);\r\n            // Note the SDK only clears throttle state if response is success or non-retriable.\r\n            await this.storage.deleteThrottleMetadata();\r\n            return response;\r\n        }\r\n        catch (e) {\r\n            if (!isRetriableError(e)) {\r\n                throw e;\r\n            }\r\n            // Increments backoff state.\r\n            const throttleMetadata = {\r\n                throttleEndTimeMillis: Date.now() + calculateBackoffMillis(backoffCount),\r\n                backoffCount: backoffCount + 1\r\n            };\r\n            // Persists state.\r\n            await this.storage.setThrottleMetadata(throttleMetadata);\r\n            return this.attemptFetch(request, throttleMetadata);\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst DEFAULT_FETCH_TIMEOUT_MILLIS = 60 * 1000; // One minute\r\nconst DEFAULT_CACHE_MAX_AGE_MILLIS = 12 * 60 * 60 * 1000; // Twelve hours.\r\n/**\r\n * Encapsulates business logic mapping network and storage dependencies to the public SDK API.\r\n *\r\n * See {@link https://github.com/FirebasePrivate/firebase-js-sdk/blob/master/packages/firebase/index.d.ts|interface documentation} for method descriptions.\r\n */\r\nclass RemoteConfig {\r\n    constructor(\r\n    // Required by FirebaseServiceFactory interface.\r\n    app, \r\n    // JS doesn't support private yet\r\n    // (https://github.com/tc39/proposal-class-fields#private-fields), so we hint using an\r\n    // underscore prefix.\r\n    /**\r\n     * @internal\r\n     */\r\n    _client, \r\n    /**\r\n     * @internal\r\n     */\r\n    _storageCache, \r\n    /**\r\n     * @internal\r\n     */\r\n    _storage, \r\n    /**\r\n     * @internal\r\n     */\r\n    _logger) {\r\n        this.app = app;\r\n        this._client = _client;\r\n        this._storageCache = _storageCache;\r\n        this._storage = _storage;\r\n        this._logger = _logger;\r\n        /**\r\n         * Tracks completion of initialization promise.\r\n         * @internal\r\n         */\r\n        this._isInitializationComplete = false;\r\n        this.settings = {\r\n            fetchTimeoutMillis: DEFAULT_FETCH_TIMEOUT_MILLIS,\r\n            minimumFetchIntervalMillis: DEFAULT_CACHE_MAX_AGE_MILLIS\r\n        };\r\n        this.defaultConfig = {};\r\n    }\r\n    get fetchTimeMillis() {\r\n        return this._storageCache.getLastSuccessfulFetchTimestampMillis() || -1;\r\n    }\r\n    get lastFetchStatus() {\r\n        return this._storageCache.getLastFetchStatus() || 'no-fetch-yet';\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Converts an error event associated with a {@link IDBRequest} to a {@link FirebaseError}.\r\n */\r\nfunction toFirebaseError(event, errorCode) {\r\n    var _a;\r\n    const originalError = event.target.error || undefined;\r\n    return ERROR_FACTORY.create(errorCode, {\r\n        originalErrorMessage: originalError && ((_a = originalError) === null || _a === void 0 ? void 0 : _a.message)\r\n    });\r\n}\r\n/**\r\n * A general-purpose store keyed by app + namespace + {@link\r\n * ProjectNamespaceKeyFieldValue}.\r\n *\r\n * <p>The Remote Config SDK can be used with multiple app installations, and each app can interact\r\n * with multiple namespaces, so this store uses app (ID + name) and namespace as common parent keys\r\n * for a set of key-value pairs. See {@link Storage#createCompositeKey}.\r\n *\r\n * <p>Visible for testing.\r\n */\r\nconst APP_NAMESPACE_STORE = 'app_namespace_store';\r\nconst DB_NAME = 'firebase_remote_config';\r\nconst DB_VERSION = 1;\r\n// Visible for testing.\r\nfunction openDatabase() {\r\n    return new Promise((resolve, reject) => {\r\n        var _a;\r\n        try {\r\n            const request = indexedDB.open(DB_NAME, DB_VERSION);\r\n            request.onerror = event => {\r\n                reject(toFirebaseError(event, \"storage-open\" /* STORAGE_OPEN */));\r\n            };\r\n            request.onsuccess = event => {\r\n                resolve(event.target.result);\r\n            };\r\n            request.onupgradeneeded = event => {\r\n                const db = event.target.result;\r\n                // We don't use 'break' in this switch statement, the fall-through\r\n                // behavior is what we want, because if there are multiple versions between\r\n                // the old version and the current version, we want ALL the migrations\r\n                // that correspond to those versions to run, not only the last one.\r\n                // eslint-disable-next-line default-case\r\n                switch (event.oldVersion) {\r\n                    case 0:\r\n                        db.createObjectStore(APP_NAMESPACE_STORE, {\r\n                            keyPath: 'compositeKey'\r\n                        });\r\n                }\r\n            };\r\n        }\r\n        catch (error) {\r\n            reject(ERROR_FACTORY.create(\"storage-open\" /* STORAGE_OPEN */, {\r\n                originalErrorMessage: (_a = error) === null || _a === void 0 ? void 0 : _a.message\r\n            }));\r\n        }\r\n    });\r\n}\r\n/**\r\n * Abstracts data persistence.\r\n */\r\nclass Storage {\r\n    /**\r\n     * @param appId enables storage segmentation by app (ID + name).\r\n     * @param appName enables storage segmentation by app (ID + name).\r\n     * @param namespace enables storage segmentation by namespace.\r\n     */\r\n    constructor(appId, appName, namespace, openDbPromise = openDatabase()) {\r\n        this.appId = appId;\r\n        this.appName = appName;\r\n        this.namespace = namespace;\r\n        this.openDbPromise = openDbPromise;\r\n    }\r\n    getLastFetchStatus() {\r\n        return this.get('last_fetch_status');\r\n    }\r\n    setLastFetchStatus(status) {\r\n        return this.set('last_fetch_status', status);\r\n    }\r\n    // This is comparable to a cache entry timestamp. If we need to expire other data, we could\r\n    // consider adding timestamp to all storage records and an optional max age arg to getters.\r\n    getLastSuccessfulFetchTimestampMillis() {\r\n        return this.get('last_successful_fetch_timestamp_millis');\r\n    }\r\n    setLastSuccessfulFetchTimestampMillis(timestamp) {\r\n        return this.set('last_successful_fetch_timestamp_millis', timestamp);\r\n    }\r\n    getLastSuccessfulFetchResponse() {\r\n        return this.get('last_successful_fetch_response');\r\n    }\r\n    setLastSuccessfulFetchResponse(response) {\r\n        return this.set('last_successful_fetch_response', response);\r\n    }\r\n    getActiveConfig() {\r\n        return this.get('active_config');\r\n    }\r\n    setActiveConfig(config) {\r\n        return this.set('active_config', config);\r\n    }\r\n    getActiveConfigEtag() {\r\n        return this.get('active_config_etag');\r\n    }\r\n    setActiveConfigEtag(etag) {\r\n        return this.set('active_config_etag', etag);\r\n    }\r\n    getThrottleMetadata() {\r\n        return this.get('throttle_metadata');\r\n    }\r\n    setThrottleMetadata(metadata) {\r\n        return this.set('throttle_metadata', metadata);\r\n    }\r\n    deleteThrottleMetadata() {\r\n        return this.delete('throttle_metadata');\r\n    }\r\n    async get(key) {\r\n        const db = await this.openDbPromise;\r\n        return new Promise((resolve, reject) => {\r\n            var _a;\r\n            const transaction = db.transaction([APP_NAMESPACE_STORE], 'readonly');\r\n            const objectStore = transaction.objectStore(APP_NAMESPACE_STORE);\r\n            const compositeKey = this.createCompositeKey(key);\r\n            try {\r\n                const request = objectStore.get(compositeKey);\r\n                request.onerror = event => {\r\n                    reject(toFirebaseError(event, \"storage-get\" /* STORAGE_GET */));\r\n                };\r\n                request.onsuccess = event => {\r\n                    const result = event.target.result;\r\n                    if (result) {\r\n                        resolve(result.value);\r\n                    }\r\n                    else {\r\n                        resolve(undefined);\r\n                    }\r\n                };\r\n            }\r\n            catch (e) {\r\n                reject(ERROR_FACTORY.create(\"storage-get\" /* STORAGE_GET */, {\r\n                    originalErrorMessage: (_a = e) === null || _a === void 0 ? void 0 : _a.message\r\n                }));\r\n            }\r\n        });\r\n    }\r\n    async set(key, value) {\r\n        const db = await this.openDbPromise;\r\n        return new Promise((resolve, reject) => {\r\n            var _a;\r\n            const transaction = db.transaction([APP_NAMESPACE_STORE], 'readwrite');\r\n            const objectStore = transaction.objectStore(APP_NAMESPACE_STORE);\r\n            const compositeKey = this.createCompositeKey(key);\r\n            try {\r\n                const request = objectStore.put({\r\n                    compositeKey,\r\n                    value\r\n                });\r\n                request.onerror = (event) => {\r\n                    reject(toFirebaseError(event, \"storage-set\" /* STORAGE_SET */));\r\n                };\r\n                request.onsuccess = () => {\r\n                    resolve();\r\n                };\r\n            }\r\n            catch (e) {\r\n                reject(ERROR_FACTORY.create(\"storage-set\" /* STORAGE_SET */, {\r\n                    originalErrorMessage: (_a = e) === null || _a === void 0 ? void 0 : _a.message\r\n                }));\r\n            }\r\n        });\r\n    }\r\n    async delete(key) {\r\n        const db = await this.openDbPromise;\r\n        return new Promise((resolve, reject) => {\r\n            var _a;\r\n            const transaction = db.transaction([APP_NAMESPACE_STORE], 'readwrite');\r\n            const objectStore = transaction.objectStore(APP_NAMESPACE_STORE);\r\n            const compositeKey = this.createCompositeKey(key);\r\n            try {\r\n                const request = objectStore.delete(compositeKey);\r\n                request.onerror = (event) => {\r\n                    reject(toFirebaseError(event, \"storage-delete\" /* STORAGE_DELETE */));\r\n                };\r\n                request.onsuccess = () => {\r\n                    resolve();\r\n                };\r\n            }\r\n            catch (e) {\r\n                reject(ERROR_FACTORY.create(\"storage-delete\" /* STORAGE_DELETE */, {\r\n                    originalErrorMessage: (_a = e) === null || _a === void 0 ? void 0 : _a.message\r\n                }));\r\n            }\r\n        });\r\n    }\r\n    // Facilitates composite key functionality (which is unsupported in IE).\r\n    createCompositeKey(key) {\r\n        return [this.appId, this.appName, this.namespace, key].join();\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A memory cache layer over storage to support the SDK's synchronous read requirements.\r\n */\r\nclass StorageCache {\r\n    constructor(storage) {\r\n        this.storage = storage;\r\n    }\r\n    /**\r\n     * Memory-only getters\r\n     */\r\n    getLastFetchStatus() {\r\n        return this.lastFetchStatus;\r\n    }\r\n    getLastSuccessfulFetchTimestampMillis() {\r\n        return this.lastSuccessfulFetchTimestampMillis;\r\n    }\r\n    getActiveConfig() {\r\n        return this.activeConfig;\r\n    }\r\n    /**\r\n     * Read-ahead getter\r\n     */\r\n    async loadFromStorage() {\r\n        const lastFetchStatusPromise = this.storage.getLastFetchStatus();\r\n        const lastSuccessfulFetchTimestampMillisPromise = this.storage.getLastSuccessfulFetchTimestampMillis();\r\n        const activeConfigPromise = this.storage.getActiveConfig();\r\n        // Note:\r\n        // 1. we consistently check for undefined to avoid clobbering defined values\r\n        //   in memory\r\n        // 2. we defer awaiting to improve readability, as opposed to destructuring\r\n        //   a Promise.all result, for example\r\n        const lastFetchStatus = await lastFetchStatusPromise;\r\n        if (lastFetchStatus) {\r\n            this.lastFetchStatus = lastFetchStatus;\r\n        }\r\n        const lastSuccessfulFetchTimestampMillis = await lastSuccessfulFetchTimestampMillisPromise;\r\n        if (lastSuccessfulFetchTimestampMillis) {\r\n            this.lastSuccessfulFetchTimestampMillis =\r\n                lastSuccessfulFetchTimestampMillis;\r\n        }\r\n        const activeConfig = await activeConfigPromise;\r\n        if (activeConfig) {\r\n            this.activeConfig = activeConfig;\r\n        }\r\n    }\r\n    /**\r\n     * Write-through setters\r\n     */\r\n    setLastFetchStatus(status) {\r\n        this.lastFetchStatus = status;\r\n        return this.storage.setLastFetchStatus(status);\r\n    }\r\n    setLastSuccessfulFetchTimestampMillis(timestampMillis) {\r\n        this.lastSuccessfulFetchTimestampMillis = timestampMillis;\r\n        return this.storage.setLastSuccessfulFetchTimestampMillis(timestampMillis);\r\n    }\r\n    setActiveConfig(activeConfig) {\r\n        this.activeConfig = activeConfig;\r\n        return this.storage.setActiveConfig(activeConfig);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction registerRemoteConfig() {\r\n    _registerComponent(new Component(RC_COMPONENT_NAME, remoteConfigFactory, \"PUBLIC\" /* PUBLIC */).setMultipleInstances(true));\r\n    registerVersion(name, version);\r\n    // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\r\n    registerVersion(name, version, 'esm2017');\r\n    function remoteConfigFactory(container, { instanceIdentifier: namespace }) {\r\n        /* Dependencies */\r\n        // getImmediate for FirebaseApp will always succeed\r\n        const app = container.getProvider('app').getImmediate();\r\n        // The following call will always succeed because rc has `import '@firebase/installations'`\r\n        const installations = container\r\n            .getProvider('installations-internal')\r\n            .getImmediate();\r\n        // Guards against the SDK being used in non-browser environments.\r\n        if (typeof window === 'undefined') {\r\n            throw ERROR_FACTORY.create(\"registration-window\" /* REGISTRATION_WINDOW */);\r\n        }\r\n        // Guards against the SDK being used when indexedDB is not available.\r\n        if (!isIndexedDBAvailable()) {\r\n            throw ERROR_FACTORY.create(\"indexed-db-unavailable\" /* INDEXED_DB_UNAVAILABLE */);\r\n        }\r\n        // Normalizes optional inputs.\r\n        const { projectId, apiKey, appId } = app.options;\r\n        if (!projectId) {\r\n            throw ERROR_FACTORY.create(\"registration-project-id\" /* REGISTRATION_PROJECT_ID */);\r\n        }\r\n        if (!apiKey) {\r\n            throw ERROR_FACTORY.create(\"registration-api-key\" /* REGISTRATION_API_KEY */);\r\n        }\r\n        if (!appId) {\r\n            throw ERROR_FACTORY.create(\"registration-app-id\" /* REGISTRATION_APP_ID */);\r\n        }\r\n        namespace = namespace || 'firebase';\r\n        const storage = new Storage(appId, app.name, namespace);\r\n        const storageCache = new StorageCache(storage);\r\n        const logger = new Logger(name);\r\n        // Sets ERROR as the default log level.\r\n        // See RemoteConfig#setLogLevel for corresponding normalization to ERROR log level.\r\n        logger.logLevel = LogLevel.ERROR;\r\n        const restClient = new RestClient(installations, \r\n        // Uses the JS SDK version, by which the RC package version can be deduced, if necessary.\r\n        SDK_VERSION, namespace, projectId, apiKey, appId);\r\n        const retryingClient = new RetryingClient(restClient, storage);\r\n        const cachingClient = new CachingClient(retryingClient, storage, storageCache, logger);\r\n        const remoteConfigInstance = new RemoteConfig(app, cachingClient, storageCache, storage, logger);\r\n        // Starts warming cache.\r\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n        ensureInitialized(remoteConfigInstance);\r\n        return remoteConfigInstance;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// This API is put in a separate file, so we can stub fetchConfig and activate in tests.\r\n// It's not possible to stub standalone functions from the same module.\r\n/**\r\n *\r\n * Performs fetch and activate operations, as a convenience.\r\n *\r\n * @param remoteConfig - The {@link RemoteConfig} instance.\r\n *\r\n * @returns A `Promise` which resolves to true if the current call activated the fetched configs.\r\n * If the fetched configs were already activated, the `Promise` will resolve to false.\r\n *\r\n * @public\r\n */\r\nasync function fetchAndActivate(remoteConfig) {\r\n    remoteConfig = getModularInstance(remoteConfig);\r\n    await fetchConfig(remoteConfig);\r\n    return activate(remoteConfig);\r\n}\r\n/**\r\n * This method provides two different checks:\r\n *\r\n * 1. Check if IndexedDB exists in the browser environment.\r\n * 2. Check if the current browser context allows IndexedDB `open()` calls.\r\n *\r\n * @returns A `Promise` which resolves to true if a {@link RemoteConfig} instance\r\n * can be initialized in this environment, or false if it cannot.\r\n * @public\r\n */\r\nasync function isSupported() {\r\n    if (!isIndexedDBAvailable()) {\r\n        return false;\r\n    }\r\n    try {\r\n        const isDBOpenable = await validateIndexedDBOpenable();\r\n        return isDBOpenable;\r\n    }\r\n    catch (error) {\r\n        return false;\r\n    }\r\n}\n\n/**\r\n * Firebase Remote Config\r\n *\r\n * @packageDocumentation\r\n */\r\n/** register component and version */\r\nregisterRemoteConfig();\n\nexport { activate, ensureInitialized, fetchAndActivate, fetchConfig, getAll, getBoolean, getNumber, getRemoteConfig, getString, getValue, isSupported, setLogLevel };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}