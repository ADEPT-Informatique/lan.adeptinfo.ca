{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Felix/Desktop/lan.adeptinfo.ca/lan-adept/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { _getProvider, getApp, _registerComponent, registerVersion } from '@firebase/app';\nimport { Component } from '@firebase/component';\nimport { Deferred, ErrorFactory, isIndexedDBAvailable, uuidv4, getGlobal, base64, issuedAtTime, calculateBackoffMillis, getModularInstance } from '@firebase/util';\nimport { Logger } from '@firebase/logger';\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nconst APP_CHECK_STATES = new Map();\nconst DEFAULT_STATE = {\n  activated: false,\n  tokenObservers: []\n};\nconst DEBUG_STATE = {\n  initialized: false,\n  enabled: false\n};\n\nfunction getState(app) {\n  return APP_CHECK_STATES.get(app) || DEFAULT_STATE;\n}\n\nfunction setState(app, state) {\n  APP_CHECK_STATES.set(app, state);\n}\n\nfunction getDebugState() {\n  return DEBUG_STATE;\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nconst BASE_ENDPOINT = 'https://content-firebaseappcheck.googleapis.com/v1';\nconst EXCHANGE_RECAPTCHA_TOKEN_METHOD = 'exchangeRecaptchaV3Token';\nconst EXCHANGE_RECAPTCHA_ENTERPRISE_TOKEN_METHOD = 'exchangeRecaptchaEnterpriseToken';\nconst EXCHANGE_DEBUG_TOKEN_METHOD = 'exchangeDebugToken';\nconst TOKEN_REFRESH_TIME = {\n  /**\r\n   * The offset time before token natural expiration to run the refresh.\r\n   * This is currently 5 minutes.\r\n   */\n  OFFSET_DURATION: 5 * 60 * 1000,\n\n  /**\r\n   * This is the first retrial wait after an error. This is currently\r\n   * 30 seconds.\r\n   */\n  RETRIAL_MIN_WAIT: 30 * 1000,\n\n  /**\r\n   * This is the maximum retrial wait, currently 16 minutes.\r\n   */\n  RETRIAL_MAX_WAIT: 16 * 60 * 1000\n};\n/**\r\n * One day in millis, for certain error code backoffs.\r\n */\n\nconst ONE_DAY = 24 * 60 * 60 * 1000;\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Port from auth proactiverefresh.js\r\n *\r\n */\n// TODO: move it to @firebase/util?\n// TODO: allow to config whether refresh should happen in the background\n\nclass Refresher {\n  constructor(operation, retryPolicy, getWaitDuration, lowerBound, upperBound) {\n    this.operation = operation;\n    this.retryPolicy = retryPolicy;\n    this.getWaitDuration = getWaitDuration;\n    this.lowerBound = lowerBound;\n    this.upperBound = upperBound;\n    this.pending = null;\n    this.nextErrorWaitInterval = lowerBound;\n\n    if (lowerBound > upperBound) {\n      throw new Error('Proactive refresh lower bound greater than upper bound!');\n    }\n  }\n\n  start() {\n    this.nextErrorWaitInterval = this.lowerBound;\n    this.process(true).catch(() => {\n      /* we don't care about the result */\n    });\n  }\n\n  stop() {\n    if (this.pending) {\n      this.pending.reject('cancelled');\n      this.pending = null;\n    }\n  }\n\n  isRunning() {\n    return !!this.pending;\n  }\n\n  process(hasSucceeded) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      _this.stop();\n\n      try {\n        _this.pending = new Deferred();\n        yield sleep(_this.getNextRun(hasSucceeded)); // Why do we resolve a promise, then immediate wait for it?\n        // We do it to make the promise chain cancellable.\n        // We can call stop() which rejects the promise before the following line execute, which makes\n        // the code jump to the catch block.\n        // TODO: unit test this\n\n        _this.pending.resolve();\n\n        yield _this.pending.promise;\n        _this.pending = new Deferred();\n        yield _this.operation();\n\n        _this.pending.resolve();\n\n        yield _this.pending.promise;\n\n        _this.process(true).catch(() => {\n          /* we don't care about the result */\n        });\n      } catch (error) {\n        if (_this.retryPolicy(error)) {\n          _this.process(false).catch(() => {\n            /* we don't care about the result */\n          });\n        } else {\n          _this.stop();\n        }\n      }\n    })();\n  }\n\n  getNextRun(hasSucceeded) {\n    if (hasSucceeded) {\n      // If last operation succeeded, reset next error wait interval and return\n      // the default wait duration.\n      this.nextErrorWaitInterval = this.lowerBound; // Return typical wait duration interval after a successful operation.\n\n      return this.getWaitDuration();\n    } else {\n      // Get next error wait interval.\n      const currentErrorWaitInterval = this.nextErrorWaitInterval; // Double interval for next consecutive error.\n\n      this.nextErrorWaitInterval *= 2; // Make sure next wait interval does not exceed the maximum upper bound.\n\n      if (this.nextErrorWaitInterval > this.upperBound) {\n        this.nextErrorWaitInterval = this.upperBound;\n      }\n\n      return currentErrorWaitInterval;\n    }\n  }\n\n}\n\nfunction sleep(ms) {\n  return new Promise(resolve => {\n    setTimeout(resolve, ms);\n  });\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nconst ERRORS = {\n  [\"already-initialized\"\n  /* ALREADY_INITIALIZED */\n  ]: 'You have already called initializeAppCheck() for FirebaseApp {$appName} with ' + 'different options. To avoid this error, call initializeAppCheck() with the ' + 'same options as when it was originally called. This will return the ' + 'already initialized instance.',\n  [\"use-before-activation\"\n  /* USE_BEFORE_ACTIVATION */\n  ]: 'App Check is being used before initializeAppCheck() is called for FirebaseApp {$appName}. ' + 'Call initializeAppCheck() before instantiating other Firebase services.',\n  [\"fetch-network-error\"\n  /* FETCH_NETWORK_ERROR */\n  ]: 'Fetch failed to connect to a network. Check Internet connection. ' + 'Original error: {$originalErrorMessage}.',\n  [\"fetch-parse-error\"\n  /* FETCH_PARSE_ERROR */\n  ]: 'Fetch client could not parse response.' + ' Original error: {$originalErrorMessage}.',\n  [\"fetch-status-error\"\n  /* FETCH_STATUS_ERROR */\n  ]: 'Fetch server returned an HTTP error status. HTTP status: {$httpStatus}.',\n  [\"storage-open\"\n  /* STORAGE_OPEN */\n  ]: 'Error thrown when opening storage. Original error: {$originalErrorMessage}.',\n  [\"storage-get\"\n  /* STORAGE_GET */\n  ]: 'Error thrown when reading from storage. Original error: {$originalErrorMessage}.',\n  [\"storage-set\"\n  /* STORAGE_WRITE */\n  ]: 'Error thrown when writing to storage. Original error: {$originalErrorMessage}.',\n  [\"recaptcha-error\"\n  /* RECAPTCHA_ERROR */\n  ]: 'ReCAPTCHA error.',\n  [\"throttled\"\n  /* THROTTLED */\n  ]: `Requests throttled due to {$httpStatus} error. Attempts allowed again after {$time}`\n};\nconst ERROR_FACTORY = new ErrorFactory('appCheck', 'AppCheck', ERRORS);\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nfunction getRecaptcha(isEnterprise = false) {\n  var _a;\n\n  if (isEnterprise) {\n    return (_a = self.grecaptcha) === null || _a === void 0 ? void 0 : _a.enterprise;\n  }\n\n  return self.grecaptcha;\n}\n\nfunction ensureActivated(app) {\n  if (!getState(app).activated) {\n    throw ERROR_FACTORY.create(\"use-before-activation\"\n    /* USE_BEFORE_ACTIVATION */\n    , {\n      appName: app.name\n    });\n  }\n}\n\nfunction getDurationString(durationInMillis) {\n  const totalSeconds = Math.round(durationInMillis / 1000);\n  const days = Math.floor(totalSeconds / (3600 * 24));\n  const hours = Math.floor((totalSeconds - days * 3600 * 24) / 3600);\n  const minutes = Math.floor((totalSeconds - days * 3600 * 24 - hours * 3600) / 60);\n  const seconds = totalSeconds - days * 3600 * 24 - hours * 3600 - minutes * 60;\n  let result = '';\n\n  if (days) {\n    result += pad(days) + 'd:';\n  }\n\n  if (hours) {\n    result += pad(hours) + 'h:';\n  }\n\n  result += pad(minutes) + 'm:' + pad(seconds) + 's';\n  return result;\n}\n\nfunction pad(value) {\n  if (value === 0) {\n    return '00';\n  }\n\n  return value >= 10 ? value.toString() : '0' + value;\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction exchangeToken(_x, _x2) {\n  return _exchangeToken.apply(this, arguments);\n}\n\nfunction _exchangeToken() {\n  _exchangeToken = _asyncToGenerator(function* ({\n    url,\n    body\n  }, heartbeatServiceProvider) {\n    var _a, _b;\n\n    const headers = {\n      'Content-Type': 'application/json'\n    }; // If heartbeat service exists, add heartbeat header string to the header.\n\n    const heartbeatService = heartbeatServiceProvider.getImmediate({\n      optional: true\n    });\n\n    if (heartbeatService) {\n      const heartbeatsHeader = yield heartbeatService.getHeartbeatsHeader();\n\n      if (heartbeatsHeader) {\n        headers['X-Firebase-Client'] = heartbeatsHeader;\n      }\n    }\n\n    const options = {\n      method: 'POST',\n      body: JSON.stringify(body),\n      headers\n    };\n    let response;\n\n    try {\n      response = yield fetch(url, options);\n    } catch (originalError) {\n      throw ERROR_FACTORY.create(\"fetch-network-error\"\n      /* FETCH_NETWORK_ERROR */\n      , {\n        originalErrorMessage: (_a = originalError) === null || _a === void 0 ? void 0 : _a.message\n      });\n    }\n\n    if (response.status !== 200) {\n      throw ERROR_FACTORY.create(\"fetch-status-error\"\n      /* FETCH_STATUS_ERROR */\n      , {\n        httpStatus: response.status\n      });\n    }\n\n    let responseBody;\n\n    try {\n      // JSON parsing throws SyntaxError if the response body isn't a JSON string.\n      responseBody = yield response.json();\n    } catch (originalError) {\n      throw ERROR_FACTORY.create(\"fetch-parse-error\"\n      /* FETCH_PARSE_ERROR */\n      , {\n        originalErrorMessage: (_b = originalError) === null || _b === void 0 ? void 0 : _b.message\n      });\n    } // Protobuf duration format.\n    // https://developers.google.com/protocol-buffers/docs/reference/java/com/google/protobuf/Duration\n\n\n    const match = responseBody.ttl.match(/^([\\d.]+)(s)$/);\n\n    if (!match || !match[2] || isNaN(Number(match[1]))) {\n      throw ERROR_FACTORY.create(\"fetch-parse-error\"\n      /* FETCH_PARSE_ERROR */\n      , {\n        originalErrorMessage: `ttl field (timeToLive) is not in standard Protobuf Duration ` + `format: ${responseBody.ttl}`\n      });\n    }\n\n    const timeToLiveAsNumber = Number(match[1]) * 1000;\n    const now = Date.now();\n    return {\n      token: responseBody.token,\n      expireTimeMillis: now + timeToLiveAsNumber,\n      issuedAtTimeMillis: now\n    };\n  });\n  return _exchangeToken.apply(this, arguments);\n}\n\nfunction getExchangeRecaptchaV3TokenRequest(app, reCAPTCHAToken) {\n  const {\n    projectId,\n    appId,\n    apiKey\n  } = app.options;\n  return {\n    url: `${BASE_ENDPOINT}/projects/${projectId}/apps/${appId}:${EXCHANGE_RECAPTCHA_TOKEN_METHOD}?key=${apiKey}`,\n    body: {\n      'recaptcha_v3_token': reCAPTCHAToken\n    }\n  };\n}\n\nfunction getExchangeRecaptchaEnterpriseTokenRequest(app, reCAPTCHAToken) {\n  const {\n    projectId,\n    appId,\n    apiKey\n  } = app.options;\n  return {\n    url: `${BASE_ENDPOINT}/projects/${projectId}/apps/${appId}:${EXCHANGE_RECAPTCHA_ENTERPRISE_TOKEN_METHOD}?key=${apiKey}`,\n    body: {\n      'recaptcha_enterprise_token': reCAPTCHAToken\n    }\n  };\n}\n\nfunction getExchangeDebugTokenRequest(app, debugToken) {\n  const {\n    projectId,\n    appId,\n    apiKey\n  } = app.options;\n  return {\n    url: `${BASE_ENDPOINT}/projects/${projectId}/apps/${appId}:${EXCHANGE_DEBUG_TOKEN_METHOD}?key=${apiKey}`,\n    body: {\n      // eslint-disable-next-line\n      debug_token: debugToken\n    }\n  };\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nconst DB_NAME = 'firebase-app-check-database';\nconst DB_VERSION = 1;\nconst STORE_NAME = 'firebase-app-check-store';\nconst DEBUG_TOKEN_KEY = 'debug-token';\nlet dbPromise = null;\n\nfunction getDBPromise() {\n  if (dbPromise) {\n    return dbPromise;\n  }\n\n  dbPromise = new Promise((resolve, reject) => {\n    var _a;\n\n    try {\n      const request = indexedDB.open(DB_NAME, DB_VERSION);\n\n      request.onsuccess = event => {\n        resolve(event.target.result);\n      };\n\n      request.onerror = event => {\n        var _a;\n\n        reject(ERROR_FACTORY.create(\"storage-open\"\n        /* STORAGE_OPEN */\n        , {\n          originalErrorMessage: (_a = event.target.error) === null || _a === void 0 ? void 0 : _a.message\n        }));\n      };\n\n      request.onupgradeneeded = event => {\n        const db = event.target.result; // We don't use 'break' in this switch statement, the fall-through\n        // behavior is what we want, because if there are multiple versions between\n        // the old version and the current version, we want ALL the migrations\n        // that correspond to those versions to run, not only the last one.\n        // eslint-disable-next-line default-case\n\n        switch (event.oldVersion) {\n          case 0:\n            db.createObjectStore(STORE_NAME, {\n              keyPath: 'compositeKey'\n            });\n        }\n      };\n    } catch (e) {\n      reject(ERROR_FACTORY.create(\"storage-open\"\n      /* STORAGE_OPEN */\n      , {\n        originalErrorMessage: (_a = e) === null || _a === void 0 ? void 0 : _a.message\n      }));\n    }\n  });\n  return dbPromise;\n}\n\nfunction readTokenFromIndexedDB(app) {\n  return read(computeKey(app));\n}\n\nfunction writeTokenToIndexedDB(app, token) {\n  return write(computeKey(app), token);\n}\n\nfunction writeDebugTokenToIndexedDB(token) {\n  return write(DEBUG_TOKEN_KEY, token);\n}\n\nfunction readDebugTokenFromIndexedDB() {\n  return read(DEBUG_TOKEN_KEY);\n}\n\nfunction write(_x3, _x4) {\n  return _write.apply(this, arguments);\n}\n\nfunction _write() {\n  _write = _asyncToGenerator(function* (key, value) {\n    const db = yield getDBPromise();\n    const transaction = db.transaction(STORE_NAME, 'readwrite');\n    const store = transaction.objectStore(STORE_NAME);\n    const request = store.put({\n      compositeKey: key,\n      value\n    });\n    return new Promise((resolve, reject) => {\n      request.onsuccess = _event => {\n        resolve();\n      };\n\n      transaction.onerror = event => {\n        var _a;\n\n        reject(ERROR_FACTORY.create(\"storage-set\"\n        /* STORAGE_WRITE */\n        , {\n          originalErrorMessage: (_a = event.target.error) === null || _a === void 0 ? void 0 : _a.message\n        }));\n      };\n    });\n  });\n  return _write.apply(this, arguments);\n}\n\nfunction read(_x5) {\n  return _read.apply(this, arguments);\n}\n\nfunction _read() {\n  _read = _asyncToGenerator(function* (key) {\n    const db = yield getDBPromise();\n    const transaction = db.transaction(STORE_NAME, 'readonly');\n    const store = transaction.objectStore(STORE_NAME);\n    const request = store.get(key);\n    return new Promise((resolve, reject) => {\n      request.onsuccess = event => {\n        const result = event.target.result;\n\n        if (result) {\n          resolve(result.value);\n        } else {\n          resolve(undefined);\n        }\n      };\n\n      transaction.onerror = event => {\n        var _a;\n\n        reject(ERROR_FACTORY.create(\"storage-get\"\n        /* STORAGE_GET */\n        , {\n          originalErrorMessage: (_a = event.target.error) === null || _a === void 0 ? void 0 : _a.message\n        }));\n      };\n    });\n  });\n  return _read.apply(this, arguments);\n}\n\nfunction computeKey(app) {\n  return `${app.options.appId}-${app.name}`;\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nconst logger = new Logger('@firebase/app-check');\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Always resolves. In case of an error reading from indexeddb, resolve with undefined\r\n */\n\nfunction readTokenFromStorage(_x6) {\n  return _readTokenFromStorage.apply(this, arguments);\n}\n/**\r\n * Always resolves. In case of an error writing to indexeddb, print a warning and resolve the promise\r\n */\n\n\nfunction _readTokenFromStorage() {\n  _readTokenFromStorage = _asyncToGenerator(function* (app) {\n    if (isIndexedDBAvailable()) {\n      let token = undefined;\n\n      try {\n        token = yield readTokenFromIndexedDB(app);\n      } catch (e) {\n        // swallow the error and return undefined\n        logger.warn(`Failed to read token from IndexedDB. Error: ${e}`);\n      }\n\n      return token;\n    }\n\n    return undefined;\n  });\n  return _readTokenFromStorage.apply(this, arguments);\n}\n\nfunction writeTokenToStorage(app, token) {\n  if (isIndexedDBAvailable()) {\n    return writeTokenToIndexedDB(app, token).catch(e => {\n      // swallow the error and resolve the promise\n      logger.warn(`Failed to write token to IndexedDB. Error: ${e}`);\n    });\n  }\n\n  return Promise.resolve();\n}\n\nfunction readOrCreateDebugTokenFromStorage() {\n  return _readOrCreateDebugTokenFromStorage.apply(this, arguments);\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction _readOrCreateDebugTokenFromStorage() {\n  _readOrCreateDebugTokenFromStorage = _asyncToGenerator(function* () {\n    /**\r\n     * Theoretically race condition can happen if we read, then write in 2 separate transactions.\r\n     * But it won't happen here, because this function will be called exactly once.\r\n     */\n    let existingDebugToken = undefined;\n\n    try {\n      existingDebugToken = yield readDebugTokenFromIndexedDB();\n    } catch (_e) {// failed to read from indexeddb. We assume there is no existing debug token, and generate a new one.\n    }\n\n    if (!existingDebugToken) {\n      // create a new debug token\n      const newToken = uuidv4(); // We don't need to block on writing to indexeddb\n      // In case persistence failed, a new debug token will be generated everytime the page is refreshed.\n      // It renders the debug token useless because you have to manually register(whitelist) the new token in the firebase console again and again.\n      // If you see this error trying to use debug token, it probably means you are using a browser that doesn't support indexeddb.\n      // You should switch to a different browser that supports indexeddb\n\n      writeDebugTokenToIndexedDB(newToken).catch(e => logger.warn(`Failed to persist debug token to IndexedDB. Error: ${e}`));\n      return newToken;\n    } else {\n      return existingDebugToken;\n    }\n  });\n  return _readOrCreateDebugTokenFromStorage.apply(this, arguments);\n}\n\nfunction isDebugMode() {\n  const debugState = getDebugState();\n  return debugState.enabled;\n}\n\nfunction getDebugToken() {\n  return _getDebugToken.apply(this, arguments);\n}\n\nfunction _getDebugToken() {\n  _getDebugToken = _asyncToGenerator(function* () {\n    const state = getDebugState();\n\n    if (state.enabled && state.token) {\n      return state.token.promise;\n    } else {\n      // should not happen!\n      throw Error(`\n            Can't get debug token in production mode.\n        `);\n    }\n  });\n  return _getDebugToken.apply(this, arguments);\n}\n\nfunction initializeDebugMode() {\n  const globals = getGlobal();\n  const debugState = getDebugState(); // Set to true if this function has been called, whether or not\n  // it enabled debug mode.\n\n  debugState.initialized = true;\n\n  if (typeof globals.FIREBASE_APPCHECK_DEBUG_TOKEN !== 'string' && globals.FIREBASE_APPCHECK_DEBUG_TOKEN !== true) {\n    return;\n  }\n\n  debugState.enabled = true;\n  const deferredToken = new Deferred();\n  debugState.token = deferredToken;\n\n  if (typeof globals.FIREBASE_APPCHECK_DEBUG_TOKEN === 'string') {\n    deferredToken.resolve(globals.FIREBASE_APPCHECK_DEBUG_TOKEN);\n  } else {\n    deferredToken.resolve(readOrCreateDebugTokenFromStorage());\n  }\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// Initial hardcoded value agreed upon across platforms for initial launch.\n// Format left open for possible dynamic error values and other fields in the future.\n\n\nconst defaultTokenErrorData = {\n  error: 'UNKNOWN_ERROR'\n};\n/**\r\n * Stringify and base64 encode token error data.\r\n *\r\n * @param tokenError Error data, currently hardcoded.\r\n */\n\nfunction formatDummyToken(tokenErrorData) {\n  return base64.encodeString(JSON.stringify(tokenErrorData),\n  /* webSafe= */\n  false);\n}\n/**\r\n * This function always resolves.\r\n * The result will contain an error field if there is any error.\r\n * In case there is an error, the token field in the result will be populated with a dummy value\r\n */\n\n\nfunction getToken$2(_x7) {\n  return _getToken$.apply(this, arguments);\n}\n\nfunction _getToken$() {\n  _getToken$ = _asyncToGenerator(function* (appCheck, forceRefresh = false) {\n    const app = appCheck.app;\n    ensureActivated(app);\n    const state = getState(app);\n    /**\r\n     * First check if there is a token in memory from a previous `getToken()` call.\r\n     */\n\n    let token = state.token;\n    let error = undefined;\n    /**\r\n     * If there is no token in memory, try to load token from indexedDB.\r\n     */\n\n    if (!token) {\n      // cachedTokenPromise contains the token found in IndexedDB or undefined if not found.\n      const cachedToken = yield state.cachedTokenPromise;\n\n      if (cachedToken && isValid(cachedToken)) {\n        token = cachedToken;\n      }\n    } // Return the cached token (from either memory or indexedDB) if it's valid\n\n\n    if (!forceRefresh && token && isValid(token)) {\n      return {\n        token: token.token\n      };\n    } // Only set to true if this `getToken()` call is making the actual\n    // REST call to the exchange endpoint, versus waiting for an already\n    // in-flight call (see debug and regular exchange endpoint paths below)\n\n\n    let shouldCallListeners = false;\n    /**\r\n     * DEBUG MODE\r\n     * If debug mode is set, and there is no cached token, fetch a new App\r\n     * Check token using the debug token, and return it directly.\r\n     */\n\n    if (isDebugMode()) {\n      // Avoid making another call to the exchange endpoint if one is in flight.\n      if (!state.exchangeTokenPromise) {\n        state.exchangeTokenPromise = exchangeToken(getExchangeDebugTokenRequest(app, yield getDebugToken()), appCheck.heartbeatServiceProvider).then(token => {\n          state.exchangeTokenPromise = undefined;\n          return token;\n        });\n        shouldCallListeners = true;\n      }\n\n      const tokenFromDebugExchange = yield state.exchangeTokenPromise; // Write debug token to indexedDB.\n\n      yield writeTokenToStorage(app, tokenFromDebugExchange); // Write debug token to state.\n\n      setState(app, Object.assign(Object.assign({}, state), {\n        token: tokenFromDebugExchange\n      }));\n      return {\n        token: tokenFromDebugExchange.token\n      };\n    }\n    /**\r\n     * request a new token\r\n     */\n\n\n    try {\n      // Avoid making another call to the exchange endpoint if one is in flight.\n      if (!state.exchangeTokenPromise) {\n        // state.provider is populated in initializeAppCheck()\n        // ensureActivated() at the top of this function checks that\n        // initializeAppCheck() has been called.\n        state.exchangeTokenPromise = state.provider.getToken().then(token => {\n          state.exchangeTokenPromise = undefined;\n          return token;\n        });\n        shouldCallListeners = true;\n      }\n\n      token = yield state.exchangeTokenPromise;\n    } catch (e) {\n      if (e.code === `appCheck/${\"throttled\"\n      /* THROTTLED */\n      }`) {\n        // Warn if throttled, but do not treat it as an error.\n        logger.warn(e.message);\n      } else {\n        // `getToken()` should never throw, but logging error text to console will aid debugging.\n        logger.error(e);\n      } // Always save error to be added to dummy token.\n\n\n      error = e;\n    }\n\n    let interopTokenResult;\n\n    if (!token) {\n      // if token is undefined, there must be an error.\n      // we return a dummy token along with the error\n      interopTokenResult = makeDummyTokenResult(error);\n    } else {\n      interopTokenResult = {\n        token: token.token\n      }; // write the new token to the memory state as well as the persistent storage.\n      // Only do it if we got a valid new token\n\n      setState(app, Object.assign(Object.assign({}, state), {\n        token\n      }));\n      yield writeTokenToStorage(app, token);\n    }\n\n    if (shouldCallListeners) {\n      notifyTokenListeners(app, interopTokenResult);\n    }\n\n    return interopTokenResult;\n  });\n  return _getToken$.apply(this, arguments);\n}\n\nfunction addTokenListener(appCheck, type, listener, onError) {\n  const {\n    app\n  } = appCheck;\n  const state = getState(app);\n  const tokenObserver = {\n    next: listener,\n    error: onError,\n    type\n  };\n  setState(app, Object.assign(Object.assign({}, state), {\n    tokenObservers: [...state.tokenObservers, tokenObserver]\n  })); // Invoke the listener async immediately if there is a valid token\n  // in memory.\n\n  if (state.token && isValid(state.token)) {\n    const validToken = state.token;\n    Promise.resolve().then(() => {\n      listener({\n        token: validToken.token\n      });\n      initTokenRefresher(appCheck);\n    }).catch(() => {\n      /* we don't care about exceptions thrown in listeners */\n    });\n  }\n  /**\r\n   * Wait for any cached token promise to resolve before starting the token\r\n   * refresher. The refresher checks to see if there is an existing token\r\n   * in state and calls the exchange endpoint if not. We should first let the\r\n   * IndexedDB check have a chance to populate state if it can.\r\n   *\r\n   * Listener call isn't needed here because cachedTokenPromise will call any\r\n   * listeners that exist when it resolves.\r\n   */\n  // state.cachedTokenPromise is always populated in `activate()`.\n\n\n  void state.cachedTokenPromise.then(() => initTokenRefresher(appCheck));\n}\n\nfunction removeTokenListener(app, listener) {\n  const state = getState(app);\n  const newObservers = state.tokenObservers.filter(tokenObserver => tokenObserver.next !== listener);\n\n  if (newObservers.length === 0 && state.tokenRefresher && state.tokenRefresher.isRunning()) {\n    state.tokenRefresher.stop();\n  }\n\n  setState(app, Object.assign(Object.assign({}, state), {\n    tokenObservers: newObservers\n  }));\n}\n/**\r\n * Logic to create and start refresher as needed.\r\n */\n\n\nfunction initTokenRefresher(appCheck) {\n  const {\n    app\n  } = appCheck;\n  const state = getState(app); // Create the refresher but don't start it if `isTokenAutoRefreshEnabled`\n  // is not true.\n\n  let refresher = state.tokenRefresher;\n\n  if (!refresher) {\n    refresher = createTokenRefresher(appCheck);\n    setState(app, Object.assign(Object.assign({}, state), {\n      tokenRefresher: refresher\n    }));\n  }\n\n  if (!refresher.isRunning() && state.isTokenAutoRefreshEnabled) {\n    refresher.start();\n  }\n}\n\nfunction createTokenRefresher(appCheck) {\n  const {\n    app\n  } = appCheck;\n  return new Refresher(\n  /*#__PURE__*/\n  // Keep in mind when this fails for any reason other than the ones\n  // for which we should retry, it will effectively stop the proactive refresh.\n  _asyncToGenerator(function* () {\n    const state = getState(app); // If there is no token, we will try to load it from storage and use it\n    // If there is a token, we force refresh it because we know it's going to expire soon\n\n    let result;\n\n    if (!state.token) {\n      result = yield getToken$2(appCheck);\n    } else {\n      result = yield getToken$2(appCheck, true);\n    } // getToken() always resolves. In case the result has an error field defined, it means the operation failed, and we should retry.\n\n\n    if (result.error) {\n      throw result.error;\n    }\n  }), () => {\n    return true;\n  }, () => {\n    const state = getState(app);\n\n    if (state.token) {\n      // issuedAtTime + (50% * total TTL) + 5 minutes\n      let nextRefreshTimeMillis = state.token.issuedAtTimeMillis + (state.token.expireTimeMillis - state.token.issuedAtTimeMillis) * 0.5 + 5 * 60 * 1000; // Do not allow refresh time to be past (expireTime - 5 minutes)\n\n      const latestAllowableRefresh = state.token.expireTimeMillis - 5 * 60 * 1000;\n      nextRefreshTimeMillis = Math.min(nextRefreshTimeMillis, latestAllowableRefresh);\n      return Math.max(0, nextRefreshTimeMillis - Date.now());\n    } else {\n      return 0;\n    }\n  }, TOKEN_REFRESH_TIME.RETRIAL_MIN_WAIT, TOKEN_REFRESH_TIME.RETRIAL_MAX_WAIT);\n}\n\nfunction notifyTokenListeners(app, token) {\n  const observers = getState(app).tokenObservers;\n\n  for (const observer of observers) {\n    try {\n      if (observer.type === \"EXTERNAL\"\n      /* EXTERNAL */\n      && token.error != null) {\n        // If this listener was added by a 3P call, send any token error to\n        // the supplied error handler. A 3P observer always has an error\n        // handler.\n        observer.error(token.error);\n      } else {\n        // If the token has no error field, always return the token.\n        // If this is a 2P listener, return the token, whether or not it\n        // has an error field.\n        observer.next(token);\n      }\n    } catch (e) {// Errors in the listener function itself are always ignored.\n    }\n  }\n}\n\nfunction isValid(token) {\n  return token.expireTimeMillis - Date.now() > 0;\n}\n\nfunction makeDummyTokenResult(error) {\n  return {\n    token: formatDummyToken(defaultTokenErrorData),\n    error\n  };\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * AppCheck Service class.\r\n */\n\n\nclass AppCheckService {\n  constructor(app, heartbeatServiceProvider) {\n    this.app = app;\n    this.heartbeatServiceProvider = heartbeatServiceProvider;\n  }\n\n  _delete() {\n    const {\n      tokenObservers\n    } = getState(this.app);\n\n    for (const tokenObserver of tokenObservers) {\n      removeTokenListener(this.app, tokenObserver.next);\n    }\n\n    return Promise.resolve();\n  }\n\n}\n\nfunction factory(app, heartbeatServiceProvider) {\n  return new AppCheckService(app, heartbeatServiceProvider);\n}\n\nfunction internalFactory(appCheck) {\n  return {\n    getToken: forceRefresh => getToken$2(appCheck, forceRefresh),\n    addTokenListener: listener => addTokenListener(appCheck, \"INTERNAL\"\n    /* INTERNAL */\n    , listener),\n    removeTokenListener: listener => removeTokenListener(appCheck.app, listener)\n  };\n}\n\nconst name = \"@firebase/app-check\";\nconst version = \"0.5.12\";\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nconst RECAPTCHA_URL = 'https://www.google.com/recaptcha/api.js';\nconst RECAPTCHA_ENTERPRISE_URL = 'https://www.google.com/recaptcha/enterprise.js';\n\nfunction initializeV3(app, siteKey) {\n  const state = getState(app);\n  const initialized = new Deferred();\n  setState(app, Object.assign(Object.assign({}, state), {\n    reCAPTCHAState: {\n      initialized\n    }\n  }));\n  const divId = makeDiv(app);\n  const grecaptcha = getRecaptcha(false);\n\n  if (!grecaptcha) {\n    loadReCAPTCHAV3Script(() => {\n      const grecaptcha = getRecaptcha(false);\n\n      if (!grecaptcha) {\n        // it shouldn't happen.\n        throw new Error('no recaptcha');\n      }\n\n      queueWidgetRender(app, siteKey, grecaptcha, divId, initialized);\n    });\n  } else {\n    queueWidgetRender(app, siteKey, grecaptcha, divId, initialized);\n  }\n\n  return initialized.promise;\n}\n\nfunction initializeEnterprise(app, siteKey) {\n  const state = getState(app);\n  const initialized = new Deferred();\n  setState(app, Object.assign(Object.assign({}, state), {\n    reCAPTCHAState: {\n      initialized\n    }\n  }));\n  const divId = makeDiv(app);\n  const grecaptcha = getRecaptcha(true);\n\n  if (!grecaptcha) {\n    loadReCAPTCHAEnterpriseScript(() => {\n      const grecaptcha = getRecaptcha(true);\n\n      if (!grecaptcha) {\n        // it shouldn't happen.\n        throw new Error('no recaptcha');\n      }\n\n      queueWidgetRender(app, siteKey, grecaptcha, divId, initialized);\n    });\n  } else {\n    queueWidgetRender(app, siteKey, grecaptcha, divId, initialized);\n  }\n\n  return initialized.promise;\n}\n/**\r\n * Add listener to render the widget and resolve the promise when\r\n * the grecaptcha.ready() event fires.\r\n */\n\n\nfunction queueWidgetRender(app, siteKey, grecaptcha, container, initialized) {\n  grecaptcha.ready(() => {\n    // Invisible widgets allow us to set a different siteKey for each widget,\n    // so we use them to support multiple apps\n    renderInvisibleWidget(app, siteKey, grecaptcha, container);\n    initialized.resolve(grecaptcha);\n  });\n}\n/**\r\n * Add invisible div to page.\r\n */\n\n\nfunction makeDiv(app) {\n  const divId = `fire_app_check_${app.name}`;\n  const invisibleDiv = document.createElement('div');\n  invisibleDiv.id = divId;\n  invisibleDiv.style.display = 'none';\n  document.body.appendChild(invisibleDiv);\n  return divId;\n}\n\nfunction getToken$1(_x8) {\n  return _getToken$2.apply(this, arguments);\n}\n/**\r\n *\r\n * @param app\r\n * @param container - Id of a HTML element.\r\n */\n\n\nfunction _getToken$2() {\n  _getToken$2 = _asyncToGenerator(function* (app) {\n    ensureActivated(app); // ensureActivated() guarantees that reCAPTCHAState is set\n\n    const reCAPTCHAState = getState(app).reCAPTCHAState;\n    const recaptcha = yield reCAPTCHAState.initialized.promise;\n    return new Promise((resolve, _reject) => {\n      // Updated after initialization is complete.\n      const reCAPTCHAState = getState(app).reCAPTCHAState;\n      recaptcha.ready(() => {\n        resolve( // widgetId is guaranteed to be available if reCAPTCHAState.initialized.promise resolved.\n        recaptcha.execute(reCAPTCHAState.widgetId, {\n          action: 'fire_app_check'\n        }));\n      });\n    });\n  });\n  return _getToken$2.apply(this, arguments);\n}\n\nfunction renderInvisibleWidget(app, siteKey, grecaptcha, container) {\n  const widgetId = grecaptcha.render(container, {\n    sitekey: siteKey,\n    size: 'invisible'\n  });\n  const state = getState(app);\n  setState(app, Object.assign(Object.assign({}, state), {\n    reCAPTCHAState: Object.assign(Object.assign({}, state.reCAPTCHAState), {\n      // state.reCAPTCHAState is set in the initialize()\n      widgetId\n    })\n  }));\n}\n\nfunction loadReCAPTCHAV3Script(onload) {\n  const script = document.createElement('script');\n  script.src = RECAPTCHA_URL;\n  script.onload = onload;\n  document.head.appendChild(script);\n}\n\nfunction loadReCAPTCHAEnterpriseScript(onload) {\n  const script = document.createElement('script');\n  script.src = RECAPTCHA_ENTERPRISE_URL;\n  script.onload = onload;\n  document.head.appendChild(script);\n}\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * App Check provider that can obtain a reCAPTCHA V3 token and exchange it\r\n * for an App Check token.\r\n *\r\n * @public\r\n */\n\n\nclass ReCaptchaV3Provider {\n  /**\r\n   * Create a ReCaptchaV3Provider instance.\r\n   * @param siteKey - ReCAPTCHA V3 siteKey.\r\n   */\n  constructor(_siteKey) {\n    this._siteKey = _siteKey;\n    /**\r\n     * Throttle requests on certain error codes to prevent too many retries\r\n     * in a short time.\r\n     */\n\n    this._throttleData = null;\n  }\n  /**\r\n   * Returns an App Check token.\r\n   * @internal\r\n   */\n\n\n  getToken() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      var _a, _b;\n\n      throwIfThrottled(_this2._throttleData); // Top-level `getToken()` has already checked that App Check is initialized\n      // and therefore this._app and this._heartbeatServiceProvider are available.\n\n      const attestedClaimsToken = yield getToken$1(_this2._app).catch(_e => {\n        // reCaptcha.execute() throws null which is not very descriptive.\n        throw ERROR_FACTORY.create(\"recaptcha-error\"\n        /* RECAPTCHA_ERROR */\n        );\n      });\n      let result;\n\n      try {\n        result = yield exchangeToken(getExchangeRecaptchaV3TokenRequest(_this2._app, attestedClaimsToken), _this2._heartbeatServiceProvider);\n      } catch (e) {\n        if ((_a = e.code) === null || _a === void 0 ? void 0 : _a.includes(\"fetch-status-error\"\n        /* FETCH_STATUS_ERROR */\n        )) {\n          _this2._throttleData = setBackoff(Number((_b = e.customData) === null || _b === void 0 ? void 0 : _b.httpStatus), _this2._throttleData);\n          throw ERROR_FACTORY.create(\"throttled\"\n          /* THROTTLED */\n          , {\n            time: getDurationString(_this2._throttleData.allowRequestsAfter - Date.now()),\n            httpStatus: _this2._throttleData.httpStatus\n          });\n        } else {\n          throw e;\n        }\n      } // If successful, clear throttle data.\n\n\n      _this2._throttleData = null;\n      return result;\n    })();\n  }\n  /**\r\n   * @internal\r\n   */\n\n\n  initialize(app) {\n    this._app = app;\n    this._heartbeatServiceProvider = _getProvider(app, 'heartbeat');\n    initializeV3(app, this._siteKey).catch(() => {\n      /* we don't care about the initialization result */\n    });\n  }\n  /**\r\n   * @internal\r\n   */\n\n\n  isEqual(otherProvider) {\n    if (otherProvider instanceof ReCaptchaV3Provider) {\n      return this._siteKey === otherProvider._siteKey;\n    } else {\n      return false;\n    }\n  }\n\n}\n/**\r\n * App Check provider that can obtain a reCAPTCHA Enterprise token and exchange it\r\n * for an App Check token.\r\n *\r\n * @public\r\n */\n\n\nclass ReCaptchaEnterpriseProvider {\n  /**\r\n   * Create a ReCaptchaEnterpriseProvider instance.\r\n   * @param siteKey - reCAPTCHA Enterprise score-based site key.\r\n   */\n  constructor(_siteKey) {\n    this._siteKey = _siteKey;\n    /**\r\n     * Throttle requests on certain error codes to prevent too many retries\r\n     * in a short time.\r\n     */\n\n    this._throttleData = null;\n  }\n  /**\r\n   * Returns an App Check token.\r\n   * @internal\r\n   */\n\n\n  getToken() {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      var _a, _b;\n\n      throwIfThrottled(_this3._throttleData); // Top-level `getToken()` has already checked that App Check is initialized\n      // and therefore this._app and this._heartbeatServiceProvider are available.\n\n      const attestedClaimsToken = yield getToken$1(_this3._app).catch(_e => {\n        // reCaptcha.execute() throws null which is not very descriptive.\n        throw ERROR_FACTORY.create(\"recaptcha-error\"\n        /* RECAPTCHA_ERROR */\n        );\n      });\n      let result;\n\n      try {\n        result = yield exchangeToken(getExchangeRecaptchaEnterpriseTokenRequest(_this3._app, attestedClaimsToken), _this3._heartbeatServiceProvider);\n      } catch (e) {\n        if ((_a = e.code) === null || _a === void 0 ? void 0 : _a.includes(\"fetch-status-error\"\n        /* FETCH_STATUS_ERROR */\n        )) {\n          _this3._throttleData = setBackoff(Number((_b = e.customData) === null || _b === void 0 ? void 0 : _b.httpStatus), _this3._throttleData);\n          throw ERROR_FACTORY.create(\"throttled\"\n          /* THROTTLED */\n          , {\n            time: getDurationString(_this3._throttleData.allowRequestsAfter - Date.now()),\n            httpStatus: _this3._throttleData.httpStatus\n          });\n        } else {\n          throw e;\n        }\n      } // If successful, clear throttle data.\n\n\n      _this3._throttleData = null;\n      return result;\n    })();\n  }\n  /**\r\n   * @internal\r\n   */\n\n\n  initialize(app) {\n    this._app = app;\n    this._heartbeatServiceProvider = _getProvider(app, 'heartbeat');\n    initializeEnterprise(app, this._siteKey).catch(() => {\n      /* we don't care about the initialization result */\n    });\n  }\n  /**\r\n   * @internal\r\n   */\n\n\n  isEqual(otherProvider) {\n    if (otherProvider instanceof ReCaptchaEnterpriseProvider) {\n      return this._siteKey === otherProvider._siteKey;\n    } else {\n      return false;\n    }\n  }\n\n}\n/**\r\n * Custom provider class.\r\n * @public\r\n */\n\n\nclass CustomProvider {\n  constructor(_customProviderOptions) {\n    this._customProviderOptions = _customProviderOptions;\n  }\n  /**\r\n   * @internal\r\n   */\n\n\n  getToken() {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      // custom provider\n      const customToken = yield _this4._customProviderOptions.getToken(); // Try to extract IAT from custom token, in case this token is not\n      // being newly issued. JWT timestamps are in seconds since epoch.\n\n      const issuedAtTimeSeconds = issuedAtTime(customToken.token); // Very basic validation, use current timestamp as IAT if JWT\n      // has no `iat` field or value is out of bounds.\n\n      const issuedAtTimeMillis = issuedAtTimeSeconds !== null && issuedAtTimeSeconds < Date.now() && issuedAtTimeSeconds > 0 ? issuedAtTimeSeconds * 1000 : Date.now();\n      return Object.assign(Object.assign({}, customToken), {\n        issuedAtTimeMillis\n      });\n    })();\n  }\n  /**\r\n   * @internal\r\n   */\n\n\n  initialize(app) {\n    this._app = app;\n  }\n  /**\r\n   * @internal\r\n   */\n\n\n  isEqual(otherProvider) {\n    if (otherProvider instanceof CustomProvider) {\n      return this._customProviderOptions.getToken.toString() === otherProvider._customProviderOptions.getToken.toString();\n    } else {\n      return false;\n    }\n  }\n\n}\n/**\r\n * Set throttle data to block requests until after a certain time\r\n * depending on the failed request's status code.\r\n * @param httpStatus - Status code of failed request.\r\n * @param throttleData - `ThrottleData` object containing previous throttle\r\n * data state.\r\n * @returns Data about current throttle state and expiration time.\r\n */\n\n\nfunction setBackoff(httpStatus, throttleData) {\n  /**\r\n   * Block retries for 1 day for the following error codes:\r\n   *\r\n   * 404: Likely malformed URL.\r\n   *\r\n   * 403:\r\n   * - Attestation failed\r\n   * - Wrong API key\r\n   * - Project deleted\r\n   */\n  if (httpStatus === 404 || httpStatus === 403) {\n    return {\n      backoffCount: 1,\n      allowRequestsAfter: Date.now() + ONE_DAY,\n      httpStatus\n    };\n  } else {\n    /**\r\n     * For all other error codes, the time when it is ok to retry again\r\n     * is based on exponential backoff.\r\n     */\n    const backoffCount = throttleData ? throttleData.backoffCount : 0;\n    const backoffMillis = calculateBackoffMillis(backoffCount, 1000, 2);\n    return {\n      backoffCount: backoffCount + 1,\n      allowRequestsAfter: Date.now() + backoffMillis,\n      httpStatus\n    };\n  }\n}\n\nfunction throwIfThrottled(throttleData) {\n  if (throttleData) {\n    if (Date.now() - throttleData.allowRequestsAfter <= 0) {\n      // If before, throw.\n      throw ERROR_FACTORY.create(\"throttled\"\n      /* THROTTLED */\n      , {\n        time: getDurationString(throttleData.allowRequestsAfter - Date.now()),\n        httpStatus: throttleData.httpStatus\n      });\n    }\n  }\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Activate App Check for the given app. Can be called only once per app.\r\n * @param app - the {@link @firebase/app#FirebaseApp} to activate App Check for\r\n * @param options - App Check initialization options\r\n * @public\r\n */\n\n\nfunction initializeAppCheck(app = getApp(), options) {\n  app = getModularInstance(app);\n\n  const provider = _getProvider(app, 'app-check'); // Ensure initializeDebugMode() is only called once.\n\n\n  if (!getDebugState().initialized) {\n    initializeDebugMode();\n  } // Log a message containing the debug token when `initializeAppCheck()`\n  // is called in debug mode.\n\n\n  if (isDebugMode()) {\n    // Do not block initialization to get the token for the message.\n    void getDebugToken().then(token => // Not using logger because I don't think we ever want this accidentally hidden.\n    console.log(`App Check debug token: ${token}. You will need to add it to your app's App Check settings in the Firebase console for it to work.`));\n  }\n\n  if (provider.isInitialized()) {\n    const existingInstance = provider.getImmediate();\n    const initialOptions = provider.getOptions();\n\n    if (initialOptions.isTokenAutoRefreshEnabled === options.isTokenAutoRefreshEnabled && initialOptions.provider.isEqual(options.provider)) {\n      return existingInstance;\n    } else {\n      throw ERROR_FACTORY.create(\"already-initialized\"\n      /* ALREADY_INITIALIZED */\n      , {\n        appName: app.name\n      });\n    }\n  }\n\n  const appCheck = provider.initialize({\n    options\n  });\n\n  _activate(app, options.provider, options.isTokenAutoRefreshEnabled); // If isTokenAutoRefreshEnabled is false, do not send any requests to the\n  // exchange endpoint without an explicit call from the user either directly\n  // or through another Firebase library (storage, functions, etc.)\n\n\n  if (getState(app).isTokenAutoRefreshEnabled) {\n    // Adding a listener will start the refresher and fetch a token if needed.\n    // This gets a token ready and prevents a delay when an internal library\n    // requests the token.\n    // Listener function does not need to do anything, its base functionality\n    // of calling getToken() already fetches token and writes it to memory/storage.\n    addTokenListener(appCheck, \"INTERNAL\"\n    /* INTERNAL */\n    , () => {});\n  }\n\n  return appCheck;\n}\n/**\r\n * Activate App Check\r\n * @param app - Firebase app to activate App Check for.\r\n * @param provider - reCAPTCHA v3 provider or\r\n * custom token provider.\r\n * @param isTokenAutoRefreshEnabled - If true, the SDK automatically\r\n * refreshes App Check tokens as needed. If undefined, defaults to the\r\n * value of `app.automaticDataCollectionEnabled`, which defaults to\r\n * false and can be set in the app config.\r\n */\n\n\nfunction _activate(app, provider, isTokenAutoRefreshEnabled) {\n  const state = getState(app);\n  const newState = Object.assign(Object.assign({}, state), {\n    activated: true\n  });\n  newState.provider = provider; // Read cached token from storage if it exists and store it in memory.\n\n  newState.cachedTokenPromise = readTokenFromStorage(app).then(cachedToken => {\n    if (cachedToken && isValid(cachedToken)) {\n      setState(app, Object.assign(Object.assign({}, getState(app)), {\n        token: cachedToken\n      })); // notify all listeners with the cached token\n\n      notifyTokenListeners(app, {\n        token: cachedToken.token\n      });\n    }\n\n    return cachedToken;\n  }); // Use value of global `automaticDataCollectionEnabled` (which\n  // itself defaults to false if not specified in config) if\n  // `isTokenAutoRefreshEnabled` param was not provided by user.\n\n  newState.isTokenAutoRefreshEnabled = isTokenAutoRefreshEnabled === undefined ? app.automaticDataCollectionEnabled : isTokenAutoRefreshEnabled;\n  setState(app, newState);\n  newState.provider.initialize(app);\n}\n/**\r\n * Set whether App Check will automatically refresh tokens as needed.\r\n *\r\n * @param appCheckInstance - The App Check service instance.\r\n * @param isTokenAutoRefreshEnabled - If true, the SDK automatically\r\n * refreshes App Check tokens as needed. This overrides any value set\r\n * during `initializeAppCheck()`.\r\n * @public\r\n */\n\n\nfunction setTokenAutoRefreshEnabled(appCheckInstance, isTokenAutoRefreshEnabled) {\n  const app = appCheckInstance.app;\n  const state = getState(app); // This will exist if any product libraries have called\n  // `addTokenListener()`\n\n  if (state.tokenRefresher) {\n    if (isTokenAutoRefreshEnabled === true) {\n      state.tokenRefresher.start();\n    } else {\n      state.tokenRefresher.stop();\n    }\n  }\n\n  setState(app, Object.assign(Object.assign({}, state), {\n    isTokenAutoRefreshEnabled\n  }));\n}\n/**\r\n * Get the current App Check token. Attaches to the most recent\r\n * in-flight request if one is present. Returns null if no token\r\n * is present and no token requests are in-flight.\r\n *\r\n * @param appCheckInstance - The App Check service instance.\r\n * @param forceRefresh - If true, will always try to fetch a fresh token.\r\n * If false, will use a cached token if found in storage.\r\n * @public\r\n */\n\n\nfunction getToken(_x9, _x10) {\n  return _getToken.apply(this, arguments);\n}\n/**\r\n * Wraps `addTokenListener`/`removeTokenListener` methods in an `Observer`\r\n * pattern for public use.\r\n */\n\n\nfunction _getToken() {\n  _getToken = _asyncToGenerator(function* (appCheckInstance, forceRefresh) {\n    const result = yield getToken$2(appCheckInstance, forceRefresh);\n\n    if (result.error) {\n      throw result.error;\n    }\n\n    return {\n      token: result.token\n    };\n  });\n  return _getToken.apply(this, arguments);\n}\n\nfunction onTokenChanged(appCheckInstance, onNextOrObserver, onError,\n/**\r\n * NOTE: Although an `onCompletion` callback can be provided, it will\r\n * never be called because the token stream is never-ending.\r\n * It is added only for API consistency with the observer pattern, which\r\n * we follow in JS APIs.\r\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nonCompletion) {\n  let nextFn = () => {};\n\n  let errorFn = () => {};\n\n  if (onNextOrObserver.next != null) {\n    nextFn = onNextOrObserver.next.bind(onNextOrObserver);\n  } else {\n    nextFn = onNextOrObserver;\n  }\n\n  if (onNextOrObserver.error != null) {\n    errorFn = onNextOrObserver.error.bind(onNextOrObserver);\n  } else if (onError) {\n    errorFn = onError;\n  }\n\n  addTokenListener(appCheckInstance, \"EXTERNAL\"\n  /* EXTERNAL */\n  , nextFn, errorFn);\n  return () => removeTokenListener(appCheckInstance.app, nextFn);\n}\n/**\r\n * Firebase App Check\r\n *\r\n * @packageDocumentation\r\n */\n\n\nconst APP_CHECK_NAME = 'app-check';\nconst APP_CHECK_NAME_INTERNAL = 'app-check-internal';\n\nfunction registerAppCheck() {\n  // The public interface\n  _registerComponent(new Component(APP_CHECK_NAME, container => {\n    // getImmediate for FirebaseApp will always succeed\n    const app = container.getProvider('app').getImmediate();\n    const heartbeatServiceProvider = container.getProvider('heartbeat');\n    return factory(app, heartbeatServiceProvider);\n  }, \"PUBLIC\"\n  /* PUBLIC */\n  ).setInstantiationMode(\"EXPLICIT\"\n  /* EXPLICIT */\n  )\n  /**\r\n   * Initialize app-check-internal after app-check is initialized to make AppCheck available to\r\n   * other Firebase SDKs\r\n   */\n  .setInstanceCreatedCallback((container, _identifier, _appcheckService) => {\n    container.getProvider(APP_CHECK_NAME_INTERNAL).initialize();\n  })); // The internal interface used by other Firebase products\n\n\n  _registerComponent(new Component(APP_CHECK_NAME_INTERNAL, container => {\n    const appCheck = container.getProvider('app-check').getImmediate();\n    return internalFactory(appCheck);\n  }, \"PUBLIC\"\n  /* PUBLIC */\n  ).setInstantiationMode(\"EXPLICIT\"\n  /* EXPLICIT */\n  ));\n\n  registerVersion(name, version);\n}\n\nregisterAppCheck();\nexport { CustomProvider, ReCaptchaEnterpriseProvider, ReCaptchaV3Provider, getToken, initializeAppCheck, onTokenChanged, setTokenAutoRefreshEnabled };","map":{"version":3,"names":["_getProvider","getApp","_registerComponent","registerVersion","Component","Deferred","ErrorFactory","isIndexedDBAvailable","uuidv4","getGlobal","base64","issuedAtTime","calculateBackoffMillis","getModularInstance","Logger","APP_CHECK_STATES","Map","DEFAULT_STATE","activated","tokenObservers","DEBUG_STATE","initialized","enabled","getState","app","get","setState","state","set","getDebugState","BASE_ENDPOINT","EXCHANGE_RECAPTCHA_TOKEN_METHOD","EXCHANGE_RECAPTCHA_ENTERPRISE_TOKEN_METHOD","EXCHANGE_DEBUG_TOKEN_METHOD","TOKEN_REFRESH_TIME","OFFSET_DURATION","RETRIAL_MIN_WAIT","RETRIAL_MAX_WAIT","ONE_DAY","Refresher","constructor","operation","retryPolicy","getWaitDuration","lowerBound","upperBound","pending","nextErrorWaitInterval","Error","start","process","catch","stop","reject","isRunning","hasSucceeded","sleep","getNextRun","resolve","promise","error","currentErrorWaitInterval","ms","Promise","setTimeout","ERRORS","ERROR_FACTORY","getRecaptcha","isEnterprise","_a","self","grecaptcha","enterprise","ensureActivated","create","appName","name","getDurationString","durationInMillis","totalSeconds","Math","round","days","floor","hours","minutes","seconds","result","pad","value","toString","exchangeToken","url","body","heartbeatServiceProvider","_b","headers","heartbeatService","getImmediate","optional","heartbeatsHeader","getHeartbeatsHeader","options","method","JSON","stringify","response","fetch","originalError","originalErrorMessage","message","status","httpStatus","responseBody","json","match","ttl","isNaN","Number","timeToLiveAsNumber","now","Date","token","expireTimeMillis","issuedAtTimeMillis","getExchangeRecaptchaV3TokenRequest","reCAPTCHAToken","projectId","appId","apiKey","getExchangeRecaptchaEnterpriseTokenRequest","getExchangeDebugTokenRequest","debugToken","debug_token","DB_NAME","DB_VERSION","STORE_NAME","DEBUG_TOKEN_KEY","dbPromise","getDBPromise","request","indexedDB","open","onsuccess","event","target","onerror","onupgradeneeded","db","oldVersion","createObjectStore","keyPath","e","readTokenFromIndexedDB","read","computeKey","writeTokenToIndexedDB","write","writeDebugTokenToIndexedDB","readDebugTokenFromIndexedDB","key","transaction","store","objectStore","put","compositeKey","_event","undefined","logger","readTokenFromStorage","warn","writeTokenToStorage","readOrCreateDebugTokenFromStorage","existingDebugToken","_e","newToken","isDebugMode","debugState","getDebugToken","initializeDebugMode","globals","FIREBASE_APPCHECK_DEBUG_TOKEN","deferredToken","defaultTokenErrorData","formatDummyToken","tokenErrorData","encodeString","getToken$2","appCheck","forceRefresh","cachedToken","cachedTokenPromise","isValid","shouldCallListeners","exchangeTokenPromise","then","tokenFromDebugExchange","Object","assign","provider","getToken","code","interopTokenResult","makeDummyTokenResult","notifyTokenListeners","addTokenListener","type","listener","onError","tokenObserver","next","validToken","initTokenRefresher","removeTokenListener","newObservers","filter","length","tokenRefresher","refresher","createTokenRefresher","isTokenAutoRefreshEnabled","nextRefreshTimeMillis","latestAllowableRefresh","min","max","observers","observer","AppCheckService","_delete","factory","internalFactory","version","RECAPTCHA_URL","RECAPTCHA_ENTERPRISE_URL","initializeV3","siteKey","reCAPTCHAState","divId","makeDiv","loadReCAPTCHAV3Script","queueWidgetRender","initializeEnterprise","loadReCAPTCHAEnterpriseScript","container","ready","renderInvisibleWidget","invisibleDiv","document","createElement","id","style","display","appendChild","getToken$1","recaptcha","_reject","execute","widgetId","action","render","sitekey","size","onload","script","src","head","ReCaptchaV3Provider","_siteKey","_throttleData","throwIfThrottled","attestedClaimsToken","_app","_heartbeatServiceProvider","includes","setBackoff","customData","time","allowRequestsAfter","initialize","isEqual","otherProvider","ReCaptchaEnterpriseProvider","CustomProvider","_customProviderOptions","customToken","issuedAtTimeSeconds","throttleData","backoffCount","backoffMillis","initializeAppCheck","console","log","isInitialized","existingInstance","initialOptions","getOptions","_activate","newState","automaticDataCollectionEnabled","setTokenAutoRefreshEnabled","appCheckInstance","onTokenChanged","onNextOrObserver","onCompletion","nextFn","errorFn","bind","APP_CHECK_NAME","APP_CHECK_NAME_INTERNAL","registerAppCheck","getProvider","setInstantiationMode","setInstanceCreatedCallback","_identifier","_appcheckService"],"sources":["C:/Users/Felix/Desktop/lan.adeptinfo.ca/lan-adept/node_modules/@firebase/app-check/dist/esm/index.esm2017.js"],"sourcesContent":["import { _getProvider, getApp, _registerComponent, registerVersion } from '@firebase/app';\nimport { Component } from '@firebase/component';\nimport { Deferred, ErrorFactory, isIndexedDBAvailable, uuidv4, getGlobal, base64, issuedAtTime, calculateBackoffMillis, getModularInstance } from '@firebase/util';\nimport { Logger } from '@firebase/logger';\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst APP_CHECK_STATES = new Map();\r\nconst DEFAULT_STATE = {\r\n    activated: false,\r\n    tokenObservers: []\r\n};\r\nconst DEBUG_STATE = {\r\n    initialized: false,\r\n    enabled: false\r\n};\r\nfunction getState(app) {\r\n    return APP_CHECK_STATES.get(app) || DEFAULT_STATE;\r\n}\r\nfunction setState(app, state) {\r\n    APP_CHECK_STATES.set(app, state);\r\n}\r\nfunction getDebugState() {\r\n    return DEBUG_STATE;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst BASE_ENDPOINT = 'https://content-firebaseappcheck.googleapis.com/v1';\r\nconst EXCHANGE_RECAPTCHA_TOKEN_METHOD = 'exchangeRecaptchaV3Token';\r\nconst EXCHANGE_RECAPTCHA_ENTERPRISE_TOKEN_METHOD = 'exchangeRecaptchaEnterpriseToken';\r\nconst EXCHANGE_DEBUG_TOKEN_METHOD = 'exchangeDebugToken';\r\nconst TOKEN_REFRESH_TIME = {\r\n    /**\r\n     * The offset time before token natural expiration to run the refresh.\r\n     * This is currently 5 minutes.\r\n     */\r\n    OFFSET_DURATION: 5 * 60 * 1000,\r\n    /**\r\n     * This is the first retrial wait after an error. This is currently\r\n     * 30 seconds.\r\n     */\r\n    RETRIAL_MIN_WAIT: 30 * 1000,\r\n    /**\r\n     * This is the maximum retrial wait, currently 16 minutes.\r\n     */\r\n    RETRIAL_MAX_WAIT: 16 * 60 * 1000\r\n};\r\n/**\r\n * One day in millis, for certain error code backoffs.\r\n */\r\nconst ONE_DAY = 24 * 60 * 60 * 1000;\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Port from auth proactiverefresh.js\r\n *\r\n */\r\n// TODO: move it to @firebase/util?\r\n// TODO: allow to config whether refresh should happen in the background\r\nclass Refresher {\r\n    constructor(operation, retryPolicy, getWaitDuration, lowerBound, upperBound) {\r\n        this.operation = operation;\r\n        this.retryPolicy = retryPolicy;\r\n        this.getWaitDuration = getWaitDuration;\r\n        this.lowerBound = lowerBound;\r\n        this.upperBound = upperBound;\r\n        this.pending = null;\r\n        this.nextErrorWaitInterval = lowerBound;\r\n        if (lowerBound > upperBound) {\r\n            throw new Error('Proactive refresh lower bound greater than upper bound!');\r\n        }\r\n    }\r\n    start() {\r\n        this.nextErrorWaitInterval = this.lowerBound;\r\n        this.process(true).catch(() => {\r\n            /* we don't care about the result */\r\n        });\r\n    }\r\n    stop() {\r\n        if (this.pending) {\r\n            this.pending.reject('cancelled');\r\n            this.pending = null;\r\n        }\r\n    }\r\n    isRunning() {\r\n        return !!this.pending;\r\n    }\r\n    async process(hasSucceeded) {\r\n        this.stop();\r\n        try {\r\n            this.pending = new Deferred();\r\n            await sleep(this.getNextRun(hasSucceeded));\r\n            // Why do we resolve a promise, then immediate wait for it?\r\n            // We do it to make the promise chain cancellable.\r\n            // We can call stop() which rejects the promise before the following line execute, which makes\r\n            // the code jump to the catch block.\r\n            // TODO: unit test this\r\n            this.pending.resolve();\r\n            await this.pending.promise;\r\n            this.pending = new Deferred();\r\n            await this.operation();\r\n            this.pending.resolve();\r\n            await this.pending.promise;\r\n            this.process(true).catch(() => {\r\n                /* we don't care about the result */\r\n            });\r\n        }\r\n        catch (error) {\r\n            if (this.retryPolicy(error)) {\r\n                this.process(false).catch(() => {\r\n                    /* we don't care about the result */\r\n                });\r\n            }\r\n            else {\r\n                this.stop();\r\n            }\r\n        }\r\n    }\r\n    getNextRun(hasSucceeded) {\r\n        if (hasSucceeded) {\r\n            // If last operation succeeded, reset next error wait interval and return\r\n            // the default wait duration.\r\n            this.nextErrorWaitInterval = this.lowerBound;\r\n            // Return typical wait duration interval after a successful operation.\r\n            return this.getWaitDuration();\r\n        }\r\n        else {\r\n            // Get next error wait interval.\r\n            const currentErrorWaitInterval = this.nextErrorWaitInterval;\r\n            // Double interval for next consecutive error.\r\n            this.nextErrorWaitInterval *= 2;\r\n            // Make sure next wait interval does not exceed the maximum upper bound.\r\n            if (this.nextErrorWaitInterval > this.upperBound) {\r\n                this.nextErrorWaitInterval = this.upperBound;\r\n            }\r\n            return currentErrorWaitInterval;\r\n        }\r\n    }\r\n}\r\nfunction sleep(ms) {\r\n    return new Promise(resolve => {\r\n        setTimeout(resolve, ms);\r\n    });\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst ERRORS = {\r\n    [\"already-initialized\" /* ALREADY_INITIALIZED */]: 'You have already called initializeAppCheck() for FirebaseApp {$appName} with ' +\r\n        'different options. To avoid this error, call initializeAppCheck() with the ' +\r\n        'same options as when it was originally called. This will return the ' +\r\n        'already initialized instance.',\r\n    [\"use-before-activation\" /* USE_BEFORE_ACTIVATION */]: 'App Check is being used before initializeAppCheck() is called for FirebaseApp {$appName}. ' +\r\n        'Call initializeAppCheck() before instantiating other Firebase services.',\r\n    [\"fetch-network-error\" /* FETCH_NETWORK_ERROR */]: 'Fetch failed to connect to a network. Check Internet connection. ' +\r\n        'Original error: {$originalErrorMessage}.',\r\n    [\"fetch-parse-error\" /* FETCH_PARSE_ERROR */]: 'Fetch client could not parse response.' +\r\n        ' Original error: {$originalErrorMessage}.',\r\n    [\"fetch-status-error\" /* FETCH_STATUS_ERROR */]: 'Fetch server returned an HTTP error status. HTTP status: {$httpStatus}.',\r\n    [\"storage-open\" /* STORAGE_OPEN */]: 'Error thrown when opening storage. Original error: {$originalErrorMessage}.',\r\n    [\"storage-get\" /* STORAGE_GET */]: 'Error thrown when reading from storage. Original error: {$originalErrorMessage}.',\r\n    [\"storage-set\" /* STORAGE_WRITE */]: 'Error thrown when writing to storage. Original error: {$originalErrorMessage}.',\r\n    [\"recaptcha-error\" /* RECAPTCHA_ERROR */]: 'ReCAPTCHA error.',\r\n    [\"throttled\" /* THROTTLED */]: `Requests throttled due to {$httpStatus} error. Attempts allowed again after {$time}`\r\n};\r\nconst ERROR_FACTORY = new ErrorFactory('appCheck', 'AppCheck', ERRORS);\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction getRecaptcha(isEnterprise = false) {\r\n    var _a;\r\n    if (isEnterprise) {\r\n        return (_a = self.grecaptcha) === null || _a === void 0 ? void 0 : _a.enterprise;\r\n    }\r\n    return self.grecaptcha;\r\n}\r\nfunction ensureActivated(app) {\r\n    if (!getState(app).activated) {\r\n        throw ERROR_FACTORY.create(\"use-before-activation\" /* USE_BEFORE_ACTIVATION */, {\r\n            appName: app.name\r\n        });\r\n    }\r\n}\r\nfunction getDurationString(durationInMillis) {\r\n    const totalSeconds = Math.round(durationInMillis / 1000);\r\n    const days = Math.floor(totalSeconds / (3600 * 24));\r\n    const hours = Math.floor((totalSeconds - days * 3600 * 24) / 3600);\r\n    const minutes = Math.floor((totalSeconds - days * 3600 * 24 - hours * 3600) / 60);\r\n    const seconds = totalSeconds - days * 3600 * 24 - hours * 3600 - minutes * 60;\r\n    let result = '';\r\n    if (days) {\r\n        result += pad(days) + 'd:';\r\n    }\r\n    if (hours) {\r\n        result += pad(hours) + 'h:';\r\n    }\r\n    result += pad(minutes) + 'm:' + pad(seconds) + 's';\r\n    return result;\r\n}\r\nfunction pad(value) {\r\n    if (value === 0) {\r\n        return '00';\r\n    }\r\n    return value >= 10 ? value.toString() : '0' + value;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nasync function exchangeToken({ url, body }, heartbeatServiceProvider) {\r\n    var _a, _b;\r\n    const headers = {\r\n        'Content-Type': 'application/json'\r\n    };\r\n    // If heartbeat service exists, add heartbeat header string to the header.\r\n    const heartbeatService = heartbeatServiceProvider.getImmediate({\r\n        optional: true\r\n    });\r\n    if (heartbeatService) {\r\n        const heartbeatsHeader = await heartbeatService.getHeartbeatsHeader();\r\n        if (heartbeatsHeader) {\r\n            headers['X-Firebase-Client'] = heartbeatsHeader;\r\n        }\r\n    }\r\n    const options = {\r\n        method: 'POST',\r\n        body: JSON.stringify(body),\r\n        headers\r\n    };\r\n    let response;\r\n    try {\r\n        response = await fetch(url, options);\r\n    }\r\n    catch (originalError) {\r\n        throw ERROR_FACTORY.create(\"fetch-network-error\" /* FETCH_NETWORK_ERROR */, {\r\n            originalErrorMessage: (_a = originalError) === null || _a === void 0 ? void 0 : _a.message\r\n        });\r\n    }\r\n    if (response.status !== 200) {\r\n        throw ERROR_FACTORY.create(\"fetch-status-error\" /* FETCH_STATUS_ERROR */, {\r\n            httpStatus: response.status\r\n        });\r\n    }\r\n    let responseBody;\r\n    try {\r\n        // JSON parsing throws SyntaxError if the response body isn't a JSON string.\r\n        responseBody = await response.json();\r\n    }\r\n    catch (originalError) {\r\n        throw ERROR_FACTORY.create(\"fetch-parse-error\" /* FETCH_PARSE_ERROR */, {\r\n            originalErrorMessage: (_b = originalError) === null || _b === void 0 ? void 0 : _b.message\r\n        });\r\n    }\r\n    // Protobuf duration format.\r\n    // https://developers.google.com/protocol-buffers/docs/reference/java/com/google/protobuf/Duration\r\n    const match = responseBody.ttl.match(/^([\\d.]+)(s)$/);\r\n    if (!match || !match[2] || isNaN(Number(match[1]))) {\r\n        throw ERROR_FACTORY.create(\"fetch-parse-error\" /* FETCH_PARSE_ERROR */, {\r\n            originalErrorMessage: `ttl field (timeToLive) is not in standard Protobuf Duration ` +\r\n                `format: ${responseBody.ttl}`\r\n        });\r\n    }\r\n    const timeToLiveAsNumber = Number(match[1]) * 1000;\r\n    const now = Date.now();\r\n    return {\r\n        token: responseBody.token,\r\n        expireTimeMillis: now + timeToLiveAsNumber,\r\n        issuedAtTimeMillis: now\r\n    };\r\n}\r\nfunction getExchangeRecaptchaV3TokenRequest(app, reCAPTCHAToken) {\r\n    const { projectId, appId, apiKey } = app.options;\r\n    return {\r\n        url: `${BASE_ENDPOINT}/projects/${projectId}/apps/${appId}:${EXCHANGE_RECAPTCHA_TOKEN_METHOD}?key=${apiKey}`,\r\n        body: {\r\n            'recaptcha_v3_token': reCAPTCHAToken\r\n        }\r\n    };\r\n}\r\nfunction getExchangeRecaptchaEnterpriseTokenRequest(app, reCAPTCHAToken) {\r\n    const { projectId, appId, apiKey } = app.options;\r\n    return {\r\n        url: `${BASE_ENDPOINT}/projects/${projectId}/apps/${appId}:${EXCHANGE_RECAPTCHA_ENTERPRISE_TOKEN_METHOD}?key=${apiKey}`,\r\n        body: {\r\n            'recaptcha_enterprise_token': reCAPTCHAToken\r\n        }\r\n    };\r\n}\r\nfunction getExchangeDebugTokenRequest(app, debugToken) {\r\n    const { projectId, appId, apiKey } = app.options;\r\n    return {\r\n        url: `${BASE_ENDPOINT}/projects/${projectId}/apps/${appId}:${EXCHANGE_DEBUG_TOKEN_METHOD}?key=${apiKey}`,\r\n        body: {\r\n            // eslint-disable-next-line\r\n            debug_token: debugToken\r\n        }\r\n    };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst DB_NAME = 'firebase-app-check-database';\r\nconst DB_VERSION = 1;\r\nconst STORE_NAME = 'firebase-app-check-store';\r\nconst DEBUG_TOKEN_KEY = 'debug-token';\r\nlet dbPromise = null;\r\nfunction getDBPromise() {\r\n    if (dbPromise) {\r\n        return dbPromise;\r\n    }\r\n    dbPromise = new Promise((resolve, reject) => {\r\n        var _a;\r\n        try {\r\n            const request = indexedDB.open(DB_NAME, DB_VERSION);\r\n            request.onsuccess = event => {\r\n                resolve(event.target.result);\r\n            };\r\n            request.onerror = event => {\r\n                var _a;\r\n                reject(ERROR_FACTORY.create(\"storage-open\" /* STORAGE_OPEN */, {\r\n                    originalErrorMessage: (_a = event.target.error) === null || _a === void 0 ? void 0 : _a.message\r\n                }));\r\n            };\r\n            request.onupgradeneeded = event => {\r\n                const db = event.target.result;\r\n                // We don't use 'break' in this switch statement, the fall-through\r\n                // behavior is what we want, because if there are multiple versions between\r\n                // the old version and the current version, we want ALL the migrations\r\n                // that correspond to those versions to run, not only the last one.\r\n                // eslint-disable-next-line default-case\r\n                switch (event.oldVersion) {\r\n                    case 0:\r\n                        db.createObjectStore(STORE_NAME, {\r\n                            keyPath: 'compositeKey'\r\n                        });\r\n                }\r\n            };\r\n        }\r\n        catch (e) {\r\n            reject(ERROR_FACTORY.create(\"storage-open\" /* STORAGE_OPEN */, {\r\n                originalErrorMessage: (_a = e) === null || _a === void 0 ? void 0 : _a.message\r\n            }));\r\n        }\r\n    });\r\n    return dbPromise;\r\n}\r\nfunction readTokenFromIndexedDB(app) {\r\n    return read(computeKey(app));\r\n}\r\nfunction writeTokenToIndexedDB(app, token) {\r\n    return write(computeKey(app), token);\r\n}\r\nfunction writeDebugTokenToIndexedDB(token) {\r\n    return write(DEBUG_TOKEN_KEY, token);\r\n}\r\nfunction readDebugTokenFromIndexedDB() {\r\n    return read(DEBUG_TOKEN_KEY);\r\n}\r\nasync function write(key, value) {\r\n    const db = await getDBPromise();\r\n    const transaction = db.transaction(STORE_NAME, 'readwrite');\r\n    const store = transaction.objectStore(STORE_NAME);\r\n    const request = store.put({\r\n        compositeKey: key,\r\n        value\r\n    });\r\n    return new Promise((resolve, reject) => {\r\n        request.onsuccess = _event => {\r\n            resolve();\r\n        };\r\n        transaction.onerror = event => {\r\n            var _a;\r\n            reject(ERROR_FACTORY.create(\"storage-set\" /* STORAGE_WRITE */, {\r\n                originalErrorMessage: (_a = event.target.error) === null || _a === void 0 ? void 0 : _a.message\r\n            }));\r\n        };\r\n    });\r\n}\r\nasync function read(key) {\r\n    const db = await getDBPromise();\r\n    const transaction = db.transaction(STORE_NAME, 'readonly');\r\n    const store = transaction.objectStore(STORE_NAME);\r\n    const request = store.get(key);\r\n    return new Promise((resolve, reject) => {\r\n        request.onsuccess = event => {\r\n            const result = event.target.result;\r\n            if (result) {\r\n                resolve(result.value);\r\n            }\r\n            else {\r\n                resolve(undefined);\r\n            }\r\n        };\r\n        transaction.onerror = event => {\r\n            var _a;\r\n            reject(ERROR_FACTORY.create(\"storage-get\" /* STORAGE_GET */, {\r\n                originalErrorMessage: (_a = event.target.error) === null || _a === void 0 ? void 0 : _a.message\r\n            }));\r\n        };\r\n    });\r\n}\r\nfunction computeKey(app) {\r\n    return `${app.options.appId}-${app.name}`;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst logger = new Logger('@firebase/app-check');\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Always resolves. In case of an error reading from indexeddb, resolve with undefined\r\n */\r\nasync function readTokenFromStorage(app) {\r\n    if (isIndexedDBAvailable()) {\r\n        let token = undefined;\r\n        try {\r\n            token = await readTokenFromIndexedDB(app);\r\n        }\r\n        catch (e) {\r\n            // swallow the error and return undefined\r\n            logger.warn(`Failed to read token from IndexedDB. Error: ${e}`);\r\n        }\r\n        return token;\r\n    }\r\n    return undefined;\r\n}\r\n/**\r\n * Always resolves. In case of an error writing to indexeddb, print a warning and resolve the promise\r\n */\r\nfunction writeTokenToStorage(app, token) {\r\n    if (isIndexedDBAvailable()) {\r\n        return writeTokenToIndexedDB(app, token).catch(e => {\r\n            // swallow the error and resolve the promise\r\n            logger.warn(`Failed to write token to IndexedDB. Error: ${e}`);\r\n        });\r\n    }\r\n    return Promise.resolve();\r\n}\r\nasync function readOrCreateDebugTokenFromStorage() {\r\n    /**\r\n     * Theoretically race condition can happen if we read, then write in 2 separate transactions.\r\n     * But it won't happen here, because this function will be called exactly once.\r\n     */\r\n    let existingDebugToken = undefined;\r\n    try {\r\n        existingDebugToken = await readDebugTokenFromIndexedDB();\r\n    }\r\n    catch (_e) {\r\n        // failed to read from indexeddb. We assume there is no existing debug token, and generate a new one.\r\n    }\r\n    if (!existingDebugToken) {\r\n        // create a new debug token\r\n        const newToken = uuidv4();\r\n        // We don't need to block on writing to indexeddb\r\n        // In case persistence failed, a new debug token will be generated everytime the page is refreshed.\r\n        // It renders the debug token useless because you have to manually register(whitelist) the new token in the firebase console again and again.\r\n        // If you see this error trying to use debug token, it probably means you are using a browser that doesn't support indexeddb.\r\n        // You should switch to a different browser that supports indexeddb\r\n        writeDebugTokenToIndexedDB(newToken).catch(e => logger.warn(`Failed to persist debug token to IndexedDB. Error: ${e}`));\r\n        return newToken;\r\n    }\r\n    else {\r\n        return existingDebugToken;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction isDebugMode() {\r\n    const debugState = getDebugState();\r\n    return debugState.enabled;\r\n}\r\nasync function getDebugToken() {\r\n    const state = getDebugState();\r\n    if (state.enabled && state.token) {\r\n        return state.token.promise;\r\n    }\r\n    else {\r\n        // should not happen!\r\n        throw Error(`\n            Can't get debug token in production mode.\n        `);\r\n    }\r\n}\r\nfunction initializeDebugMode() {\r\n    const globals = getGlobal();\r\n    const debugState = getDebugState();\r\n    // Set to true if this function has been called, whether or not\r\n    // it enabled debug mode.\r\n    debugState.initialized = true;\r\n    if (typeof globals.FIREBASE_APPCHECK_DEBUG_TOKEN !== 'string' &&\r\n        globals.FIREBASE_APPCHECK_DEBUG_TOKEN !== true) {\r\n        return;\r\n    }\r\n    debugState.enabled = true;\r\n    const deferredToken = new Deferred();\r\n    debugState.token = deferredToken;\r\n    if (typeof globals.FIREBASE_APPCHECK_DEBUG_TOKEN === 'string') {\r\n        deferredToken.resolve(globals.FIREBASE_APPCHECK_DEBUG_TOKEN);\r\n    }\r\n    else {\r\n        deferredToken.resolve(readOrCreateDebugTokenFromStorage());\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Initial hardcoded value agreed upon across platforms for initial launch.\r\n// Format left open for possible dynamic error values and other fields in the future.\r\nconst defaultTokenErrorData = { error: 'UNKNOWN_ERROR' };\r\n/**\r\n * Stringify and base64 encode token error data.\r\n *\r\n * @param tokenError Error data, currently hardcoded.\r\n */\r\nfunction formatDummyToken(tokenErrorData) {\r\n    return base64.encodeString(JSON.stringify(tokenErrorData), \r\n    /* webSafe= */ false);\r\n}\r\n/**\r\n * This function always resolves.\r\n * The result will contain an error field if there is any error.\r\n * In case there is an error, the token field in the result will be populated with a dummy value\r\n */\r\nasync function getToken$2(appCheck, forceRefresh = false) {\r\n    const app = appCheck.app;\r\n    ensureActivated(app);\r\n    const state = getState(app);\r\n    /**\r\n     * First check if there is a token in memory from a previous `getToken()` call.\r\n     */\r\n    let token = state.token;\r\n    let error = undefined;\r\n    /**\r\n     * If there is no token in memory, try to load token from indexedDB.\r\n     */\r\n    if (!token) {\r\n        // cachedTokenPromise contains the token found in IndexedDB or undefined if not found.\r\n        const cachedToken = await state.cachedTokenPromise;\r\n        if (cachedToken && isValid(cachedToken)) {\r\n            token = cachedToken;\r\n        }\r\n    }\r\n    // Return the cached token (from either memory or indexedDB) if it's valid\r\n    if (!forceRefresh && token && isValid(token)) {\r\n        return {\r\n            token: token.token\r\n        };\r\n    }\r\n    // Only set to true if this `getToken()` call is making the actual\r\n    // REST call to the exchange endpoint, versus waiting for an already\r\n    // in-flight call (see debug and regular exchange endpoint paths below)\r\n    let shouldCallListeners = false;\r\n    /**\r\n     * DEBUG MODE\r\n     * If debug mode is set, and there is no cached token, fetch a new App\r\n     * Check token using the debug token, and return it directly.\r\n     */\r\n    if (isDebugMode()) {\r\n        // Avoid making another call to the exchange endpoint if one is in flight.\r\n        if (!state.exchangeTokenPromise) {\r\n            state.exchangeTokenPromise = exchangeToken(getExchangeDebugTokenRequest(app, await getDebugToken()), appCheck.heartbeatServiceProvider).then(token => {\r\n                state.exchangeTokenPromise = undefined;\r\n                return token;\r\n            });\r\n            shouldCallListeners = true;\r\n        }\r\n        const tokenFromDebugExchange = await state.exchangeTokenPromise;\r\n        // Write debug token to indexedDB.\r\n        await writeTokenToStorage(app, tokenFromDebugExchange);\r\n        // Write debug token to state.\r\n        setState(app, Object.assign(Object.assign({}, state), { token: tokenFromDebugExchange }));\r\n        return { token: tokenFromDebugExchange.token };\r\n    }\r\n    /**\r\n     * request a new token\r\n     */\r\n    try {\r\n        // Avoid making another call to the exchange endpoint if one is in flight.\r\n        if (!state.exchangeTokenPromise) {\r\n            // state.provider is populated in initializeAppCheck()\r\n            // ensureActivated() at the top of this function checks that\r\n            // initializeAppCheck() has been called.\r\n            state.exchangeTokenPromise = state.provider.getToken().then(token => {\r\n                state.exchangeTokenPromise = undefined;\r\n                return token;\r\n            });\r\n            shouldCallListeners = true;\r\n        }\r\n        token = await state.exchangeTokenPromise;\r\n    }\r\n    catch (e) {\r\n        if (e.code === `appCheck/${\"throttled\" /* THROTTLED */}`) {\r\n            // Warn if throttled, but do not treat it as an error.\r\n            logger.warn(e.message);\r\n        }\r\n        else {\r\n            // `getToken()` should never throw, but logging error text to console will aid debugging.\r\n            logger.error(e);\r\n        }\r\n        // Always save error to be added to dummy token.\r\n        error = e;\r\n    }\r\n    let interopTokenResult;\r\n    if (!token) {\r\n        // if token is undefined, there must be an error.\r\n        // we return a dummy token along with the error\r\n        interopTokenResult = makeDummyTokenResult(error);\r\n    }\r\n    else {\r\n        interopTokenResult = {\r\n            token: token.token\r\n        };\r\n        // write the new token to the memory state as well as the persistent storage.\r\n        // Only do it if we got a valid new token\r\n        setState(app, Object.assign(Object.assign({}, state), { token }));\r\n        await writeTokenToStorage(app, token);\r\n    }\r\n    if (shouldCallListeners) {\r\n        notifyTokenListeners(app, interopTokenResult);\r\n    }\r\n    return interopTokenResult;\r\n}\r\nfunction addTokenListener(appCheck, type, listener, onError) {\r\n    const { app } = appCheck;\r\n    const state = getState(app);\r\n    const tokenObserver = {\r\n        next: listener,\r\n        error: onError,\r\n        type\r\n    };\r\n    setState(app, Object.assign(Object.assign({}, state), { tokenObservers: [...state.tokenObservers, tokenObserver] }));\r\n    // Invoke the listener async immediately if there is a valid token\r\n    // in memory.\r\n    if (state.token && isValid(state.token)) {\r\n        const validToken = state.token;\r\n        Promise.resolve()\r\n            .then(() => {\r\n            listener({ token: validToken.token });\r\n            initTokenRefresher(appCheck);\r\n        })\r\n            .catch(() => {\r\n            /* we don't care about exceptions thrown in listeners */\r\n        });\r\n    }\r\n    /**\r\n     * Wait for any cached token promise to resolve before starting the token\r\n     * refresher. The refresher checks to see if there is an existing token\r\n     * in state and calls the exchange endpoint if not. We should first let the\r\n     * IndexedDB check have a chance to populate state if it can.\r\n     *\r\n     * Listener call isn't needed here because cachedTokenPromise will call any\r\n     * listeners that exist when it resolves.\r\n     */\r\n    // state.cachedTokenPromise is always populated in `activate()`.\r\n    void state.cachedTokenPromise.then(() => initTokenRefresher(appCheck));\r\n}\r\nfunction removeTokenListener(app, listener) {\r\n    const state = getState(app);\r\n    const newObservers = state.tokenObservers.filter(tokenObserver => tokenObserver.next !== listener);\r\n    if (newObservers.length === 0 &&\r\n        state.tokenRefresher &&\r\n        state.tokenRefresher.isRunning()) {\r\n        state.tokenRefresher.stop();\r\n    }\r\n    setState(app, Object.assign(Object.assign({}, state), { tokenObservers: newObservers }));\r\n}\r\n/**\r\n * Logic to create and start refresher as needed.\r\n */\r\nfunction initTokenRefresher(appCheck) {\r\n    const { app } = appCheck;\r\n    const state = getState(app);\r\n    // Create the refresher but don't start it if `isTokenAutoRefreshEnabled`\r\n    // is not true.\r\n    let refresher = state.tokenRefresher;\r\n    if (!refresher) {\r\n        refresher = createTokenRefresher(appCheck);\r\n        setState(app, Object.assign(Object.assign({}, state), { tokenRefresher: refresher }));\r\n    }\r\n    if (!refresher.isRunning() && state.isTokenAutoRefreshEnabled) {\r\n        refresher.start();\r\n    }\r\n}\r\nfunction createTokenRefresher(appCheck) {\r\n    const { app } = appCheck;\r\n    return new Refresher(\r\n    // Keep in mind when this fails for any reason other than the ones\r\n    // for which we should retry, it will effectively stop the proactive refresh.\r\n    async () => {\r\n        const state = getState(app);\r\n        // If there is no token, we will try to load it from storage and use it\r\n        // If there is a token, we force refresh it because we know it's going to expire soon\r\n        let result;\r\n        if (!state.token) {\r\n            result = await getToken$2(appCheck);\r\n        }\r\n        else {\r\n            result = await getToken$2(appCheck, true);\r\n        }\r\n        // getToken() always resolves. In case the result has an error field defined, it means the operation failed, and we should retry.\r\n        if (result.error) {\r\n            throw result.error;\r\n        }\r\n    }, () => {\r\n        return true;\r\n    }, () => {\r\n        const state = getState(app);\r\n        if (state.token) {\r\n            // issuedAtTime + (50% * total TTL) + 5 minutes\r\n            let nextRefreshTimeMillis = state.token.issuedAtTimeMillis +\r\n                (state.token.expireTimeMillis - state.token.issuedAtTimeMillis) *\r\n                    0.5 +\r\n                5 * 60 * 1000;\r\n            // Do not allow refresh time to be past (expireTime - 5 minutes)\r\n            const latestAllowableRefresh = state.token.expireTimeMillis - 5 * 60 * 1000;\r\n            nextRefreshTimeMillis = Math.min(nextRefreshTimeMillis, latestAllowableRefresh);\r\n            return Math.max(0, nextRefreshTimeMillis - Date.now());\r\n        }\r\n        else {\r\n            return 0;\r\n        }\r\n    }, TOKEN_REFRESH_TIME.RETRIAL_MIN_WAIT, TOKEN_REFRESH_TIME.RETRIAL_MAX_WAIT);\r\n}\r\nfunction notifyTokenListeners(app, token) {\r\n    const observers = getState(app).tokenObservers;\r\n    for (const observer of observers) {\r\n        try {\r\n            if (observer.type === \"EXTERNAL\" /* EXTERNAL */ && token.error != null) {\r\n                // If this listener was added by a 3P call, send any token error to\r\n                // the supplied error handler. A 3P observer always has an error\r\n                // handler.\r\n                observer.error(token.error);\r\n            }\r\n            else {\r\n                // If the token has no error field, always return the token.\r\n                // If this is a 2P listener, return the token, whether or not it\r\n                // has an error field.\r\n                observer.next(token);\r\n            }\r\n        }\r\n        catch (e) {\r\n            // Errors in the listener function itself are always ignored.\r\n        }\r\n    }\r\n}\r\nfunction isValid(token) {\r\n    return token.expireTimeMillis - Date.now() > 0;\r\n}\r\nfunction makeDummyTokenResult(error) {\r\n    return {\r\n        token: formatDummyToken(defaultTokenErrorData),\r\n        error\r\n    };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * AppCheck Service class.\r\n */\r\nclass AppCheckService {\r\n    constructor(app, heartbeatServiceProvider) {\r\n        this.app = app;\r\n        this.heartbeatServiceProvider = heartbeatServiceProvider;\r\n    }\r\n    _delete() {\r\n        const { tokenObservers } = getState(this.app);\r\n        for (const tokenObserver of tokenObservers) {\r\n            removeTokenListener(this.app, tokenObserver.next);\r\n        }\r\n        return Promise.resolve();\r\n    }\r\n}\r\nfunction factory(app, heartbeatServiceProvider) {\r\n    return new AppCheckService(app, heartbeatServiceProvider);\r\n}\r\nfunction internalFactory(appCheck) {\r\n    return {\r\n        getToken: forceRefresh => getToken$2(appCheck, forceRefresh),\r\n        addTokenListener: listener => addTokenListener(appCheck, \"INTERNAL\" /* INTERNAL */, listener),\r\n        removeTokenListener: listener => removeTokenListener(appCheck.app, listener)\r\n    };\r\n}\n\nconst name = \"@firebase/app-check\";\nconst version = \"0.5.12\";\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst RECAPTCHA_URL = 'https://www.google.com/recaptcha/api.js';\r\nconst RECAPTCHA_ENTERPRISE_URL = 'https://www.google.com/recaptcha/enterprise.js';\r\nfunction initializeV3(app, siteKey) {\r\n    const state = getState(app);\r\n    const initialized = new Deferred();\r\n    setState(app, Object.assign(Object.assign({}, state), { reCAPTCHAState: { initialized } }));\r\n    const divId = makeDiv(app);\r\n    const grecaptcha = getRecaptcha(false);\r\n    if (!grecaptcha) {\r\n        loadReCAPTCHAV3Script(() => {\r\n            const grecaptcha = getRecaptcha(false);\r\n            if (!grecaptcha) {\r\n                // it shouldn't happen.\r\n                throw new Error('no recaptcha');\r\n            }\r\n            queueWidgetRender(app, siteKey, grecaptcha, divId, initialized);\r\n        });\r\n    }\r\n    else {\r\n        queueWidgetRender(app, siteKey, grecaptcha, divId, initialized);\r\n    }\r\n    return initialized.promise;\r\n}\r\nfunction initializeEnterprise(app, siteKey) {\r\n    const state = getState(app);\r\n    const initialized = new Deferred();\r\n    setState(app, Object.assign(Object.assign({}, state), { reCAPTCHAState: { initialized } }));\r\n    const divId = makeDiv(app);\r\n    const grecaptcha = getRecaptcha(true);\r\n    if (!grecaptcha) {\r\n        loadReCAPTCHAEnterpriseScript(() => {\r\n            const grecaptcha = getRecaptcha(true);\r\n            if (!grecaptcha) {\r\n                // it shouldn't happen.\r\n                throw new Error('no recaptcha');\r\n            }\r\n            queueWidgetRender(app, siteKey, grecaptcha, divId, initialized);\r\n        });\r\n    }\r\n    else {\r\n        queueWidgetRender(app, siteKey, grecaptcha, divId, initialized);\r\n    }\r\n    return initialized.promise;\r\n}\r\n/**\r\n * Add listener to render the widget and resolve the promise when\r\n * the grecaptcha.ready() event fires.\r\n */\r\nfunction queueWidgetRender(app, siteKey, grecaptcha, container, initialized) {\r\n    grecaptcha.ready(() => {\r\n        // Invisible widgets allow us to set a different siteKey for each widget,\r\n        // so we use them to support multiple apps\r\n        renderInvisibleWidget(app, siteKey, grecaptcha, container);\r\n        initialized.resolve(grecaptcha);\r\n    });\r\n}\r\n/**\r\n * Add invisible div to page.\r\n */\r\nfunction makeDiv(app) {\r\n    const divId = `fire_app_check_${app.name}`;\r\n    const invisibleDiv = document.createElement('div');\r\n    invisibleDiv.id = divId;\r\n    invisibleDiv.style.display = 'none';\r\n    document.body.appendChild(invisibleDiv);\r\n    return divId;\r\n}\r\nasync function getToken$1(app) {\r\n    ensureActivated(app);\r\n    // ensureActivated() guarantees that reCAPTCHAState is set\r\n    const reCAPTCHAState = getState(app).reCAPTCHAState;\r\n    const recaptcha = await reCAPTCHAState.initialized.promise;\r\n    return new Promise((resolve, _reject) => {\r\n        // Updated after initialization is complete.\r\n        const reCAPTCHAState = getState(app).reCAPTCHAState;\r\n        recaptcha.ready(() => {\r\n            resolve(\r\n            // widgetId is guaranteed to be available if reCAPTCHAState.initialized.promise resolved.\r\n            recaptcha.execute(reCAPTCHAState.widgetId, {\r\n                action: 'fire_app_check'\r\n            }));\r\n        });\r\n    });\r\n}\r\n/**\r\n *\r\n * @param app\r\n * @param container - Id of a HTML element.\r\n */\r\nfunction renderInvisibleWidget(app, siteKey, grecaptcha, container) {\r\n    const widgetId = grecaptcha.render(container, {\r\n        sitekey: siteKey,\r\n        size: 'invisible'\r\n    });\r\n    const state = getState(app);\r\n    setState(app, Object.assign(Object.assign({}, state), { reCAPTCHAState: Object.assign(Object.assign({}, state.reCAPTCHAState), { // state.reCAPTCHAState is set in the initialize()\r\n            widgetId }) }));\r\n}\r\nfunction loadReCAPTCHAV3Script(onload) {\r\n    const script = document.createElement('script');\r\n    script.src = RECAPTCHA_URL;\r\n    script.onload = onload;\r\n    document.head.appendChild(script);\r\n}\r\nfunction loadReCAPTCHAEnterpriseScript(onload) {\r\n    const script = document.createElement('script');\r\n    script.src = RECAPTCHA_ENTERPRISE_URL;\r\n    script.onload = onload;\r\n    document.head.appendChild(script);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * App Check provider that can obtain a reCAPTCHA V3 token and exchange it\r\n * for an App Check token.\r\n *\r\n * @public\r\n */\r\nclass ReCaptchaV3Provider {\r\n    /**\r\n     * Create a ReCaptchaV3Provider instance.\r\n     * @param siteKey - ReCAPTCHA V3 siteKey.\r\n     */\r\n    constructor(_siteKey) {\r\n        this._siteKey = _siteKey;\r\n        /**\r\n         * Throttle requests on certain error codes to prevent too many retries\r\n         * in a short time.\r\n         */\r\n        this._throttleData = null;\r\n    }\r\n    /**\r\n     * Returns an App Check token.\r\n     * @internal\r\n     */\r\n    async getToken() {\r\n        var _a, _b;\r\n        throwIfThrottled(this._throttleData);\r\n        // Top-level `getToken()` has already checked that App Check is initialized\r\n        // and therefore this._app and this._heartbeatServiceProvider are available.\r\n        const attestedClaimsToken = await getToken$1(this._app).catch(_e => {\r\n            // reCaptcha.execute() throws null which is not very descriptive.\r\n            throw ERROR_FACTORY.create(\"recaptcha-error\" /* RECAPTCHA_ERROR */);\r\n        });\r\n        let result;\r\n        try {\r\n            result = await exchangeToken(getExchangeRecaptchaV3TokenRequest(this._app, attestedClaimsToken), this._heartbeatServiceProvider);\r\n        }\r\n        catch (e) {\r\n            if ((_a = e.code) === null || _a === void 0 ? void 0 : _a.includes(\"fetch-status-error\" /* FETCH_STATUS_ERROR */)) {\r\n                this._throttleData = setBackoff(Number((_b = e.customData) === null || _b === void 0 ? void 0 : _b.httpStatus), this._throttleData);\r\n                throw ERROR_FACTORY.create(\"throttled\" /* THROTTLED */, {\r\n                    time: getDurationString(this._throttleData.allowRequestsAfter - Date.now()),\r\n                    httpStatus: this._throttleData.httpStatus\r\n                });\r\n            }\r\n            else {\r\n                throw e;\r\n            }\r\n        }\r\n        // If successful, clear throttle data.\r\n        this._throttleData = null;\r\n        return result;\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    initialize(app) {\r\n        this._app = app;\r\n        this._heartbeatServiceProvider = _getProvider(app, 'heartbeat');\r\n        initializeV3(app, this._siteKey).catch(() => {\r\n            /* we don't care about the initialization result */\r\n        });\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    isEqual(otherProvider) {\r\n        if (otherProvider instanceof ReCaptchaV3Provider) {\r\n            return this._siteKey === otherProvider._siteKey;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n/**\r\n * App Check provider that can obtain a reCAPTCHA Enterprise token and exchange it\r\n * for an App Check token.\r\n *\r\n * @public\r\n */\r\nclass ReCaptchaEnterpriseProvider {\r\n    /**\r\n     * Create a ReCaptchaEnterpriseProvider instance.\r\n     * @param siteKey - reCAPTCHA Enterprise score-based site key.\r\n     */\r\n    constructor(_siteKey) {\r\n        this._siteKey = _siteKey;\r\n        /**\r\n         * Throttle requests on certain error codes to prevent too many retries\r\n         * in a short time.\r\n         */\r\n        this._throttleData = null;\r\n    }\r\n    /**\r\n     * Returns an App Check token.\r\n     * @internal\r\n     */\r\n    async getToken() {\r\n        var _a, _b;\r\n        throwIfThrottled(this._throttleData);\r\n        // Top-level `getToken()` has already checked that App Check is initialized\r\n        // and therefore this._app and this._heartbeatServiceProvider are available.\r\n        const attestedClaimsToken = await getToken$1(this._app).catch(_e => {\r\n            // reCaptcha.execute() throws null which is not very descriptive.\r\n            throw ERROR_FACTORY.create(\"recaptcha-error\" /* RECAPTCHA_ERROR */);\r\n        });\r\n        let result;\r\n        try {\r\n            result = await exchangeToken(getExchangeRecaptchaEnterpriseTokenRequest(this._app, attestedClaimsToken), this._heartbeatServiceProvider);\r\n        }\r\n        catch (e) {\r\n            if ((_a = e.code) === null || _a === void 0 ? void 0 : _a.includes(\"fetch-status-error\" /* FETCH_STATUS_ERROR */)) {\r\n                this._throttleData = setBackoff(Number((_b = e.customData) === null || _b === void 0 ? void 0 : _b.httpStatus), this._throttleData);\r\n                throw ERROR_FACTORY.create(\"throttled\" /* THROTTLED */, {\r\n                    time: getDurationString(this._throttleData.allowRequestsAfter - Date.now()),\r\n                    httpStatus: this._throttleData.httpStatus\r\n                });\r\n            }\r\n            else {\r\n                throw e;\r\n            }\r\n        }\r\n        // If successful, clear throttle data.\r\n        this._throttleData = null;\r\n        return result;\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    initialize(app) {\r\n        this._app = app;\r\n        this._heartbeatServiceProvider = _getProvider(app, 'heartbeat');\r\n        initializeEnterprise(app, this._siteKey).catch(() => {\r\n            /* we don't care about the initialization result */\r\n        });\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    isEqual(otherProvider) {\r\n        if (otherProvider instanceof ReCaptchaEnterpriseProvider) {\r\n            return this._siteKey === otherProvider._siteKey;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n/**\r\n * Custom provider class.\r\n * @public\r\n */\r\nclass CustomProvider {\r\n    constructor(_customProviderOptions) {\r\n        this._customProviderOptions = _customProviderOptions;\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    async getToken() {\r\n        // custom provider\r\n        const customToken = await this._customProviderOptions.getToken();\r\n        // Try to extract IAT from custom token, in case this token is not\r\n        // being newly issued. JWT timestamps are in seconds since epoch.\r\n        const issuedAtTimeSeconds = issuedAtTime(customToken.token);\r\n        // Very basic validation, use current timestamp as IAT if JWT\r\n        // has no `iat` field or value is out of bounds.\r\n        const issuedAtTimeMillis = issuedAtTimeSeconds !== null &&\r\n            issuedAtTimeSeconds < Date.now() &&\r\n            issuedAtTimeSeconds > 0\r\n            ? issuedAtTimeSeconds * 1000\r\n            : Date.now();\r\n        return Object.assign(Object.assign({}, customToken), { issuedAtTimeMillis });\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    initialize(app) {\r\n        this._app = app;\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    isEqual(otherProvider) {\r\n        if (otherProvider instanceof CustomProvider) {\r\n            return (this._customProviderOptions.getToken.toString() ===\r\n                otherProvider._customProviderOptions.getToken.toString());\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n/**\r\n * Set throttle data to block requests until after a certain time\r\n * depending on the failed request's status code.\r\n * @param httpStatus - Status code of failed request.\r\n * @param throttleData - `ThrottleData` object containing previous throttle\r\n * data state.\r\n * @returns Data about current throttle state and expiration time.\r\n */\r\nfunction setBackoff(httpStatus, throttleData) {\r\n    /**\r\n     * Block retries for 1 day for the following error codes:\r\n     *\r\n     * 404: Likely malformed URL.\r\n     *\r\n     * 403:\r\n     * - Attestation failed\r\n     * - Wrong API key\r\n     * - Project deleted\r\n     */\r\n    if (httpStatus === 404 || httpStatus === 403) {\r\n        return {\r\n            backoffCount: 1,\r\n            allowRequestsAfter: Date.now() + ONE_DAY,\r\n            httpStatus\r\n        };\r\n    }\r\n    else {\r\n        /**\r\n         * For all other error codes, the time when it is ok to retry again\r\n         * is based on exponential backoff.\r\n         */\r\n        const backoffCount = throttleData ? throttleData.backoffCount : 0;\r\n        const backoffMillis = calculateBackoffMillis(backoffCount, 1000, 2);\r\n        return {\r\n            backoffCount: backoffCount + 1,\r\n            allowRequestsAfter: Date.now() + backoffMillis,\r\n            httpStatus\r\n        };\r\n    }\r\n}\r\nfunction throwIfThrottled(throttleData) {\r\n    if (throttleData) {\r\n        if (Date.now() - throttleData.allowRequestsAfter <= 0) {\r\n            // If before, throw.\r\n            throw ERROR_FACTORY.create(\"throttled\" /* THROTTLED */, {\r\n                time: getDurationString(throttleData.allowRequestsAfter - Date.now()),\r\n                httpStatus: throttleData.httpStatus\r\n            });\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Activate App Check for the given app. Can be called only once per app.\r\n * @param app - the {@link @firebase/app#FirebaseApp} to activate App Check for\r\n * @param options - App Check initialization options\r\n * @public\r\n */\r\nfunction initializeAppCheck(app = getApp(), options) {\r\n    app = getModularInstance(app);\r\n    const provider = _getProvider(app, 'app-check');\r\n    // Ensure initializeDebugMode() is only called once.\r\n    if (!getDebugState().initialized) {\r\n        initializeDebugMode();\r\n    }\r\n    // Log a message containing the debug token when `initializeAppCheck()`\r\n    // is called in debug mode.\r\n    if (isDebugMode()) {\r\n        // Do not block initialization to get the token for the message.\r\n        void getDebugToken().then(token => \r\n        // Not using logger because I don't think we ever want this accidentally hidden.\r\n        console.log(`App Check debug token: ${token}. You will need to add it to your app's App Check settings in the Firebase console for it to work.`));\r\n    }\r\n    if (provider.isInitialized()) {\r\n        const existingInstance = provider.getImmediate();\r\n        const initialOptions = provider.getOptions();\r\n        if (initialOptions.isTokenAutoRefreshEnabled ===\r\n            options.isTokenAutoRefreshEnabled &&\r\n            initialOptions.provider.isEqual(options.provider)) {\r\n            return existingInstance;\r\n        }\r\n        else {\r\n            throw ERROR_FACTORY.create(\"already-initialized\" /* ALREADY_INITIALIZED */, {\r\n                appName: app.name\r\n            });\r\n        }\r\n    }\r\n    const appCheck = provider.initialize({ options });\r\n    _activate(app, options.provider, options.isTokenAutoRefreshEnabled);\r\n    // If isTokenAutoRefreshEnabled is false, do not send any requests to the\r\n    // exchange endpoint without an explicit call from the user either directly\r\n    // or through another Firebase library (storage, functions, etc.)\r\n    if (getState(app).isTokenAutoRefreshEnabled) {\r\n        // Adding a listener will start the refresher and fetch a token if needed.\r\n        // This gets a token ready and prevents a delay when an internal library\r\n        // requests the token.\r\n        // Listener function does not need to do anything, its base functionality\r\n        // of calling getToken() already fetches token and writes it to memory/storage.\r\n        addTokenListener(appCheck, \"INTERNAL\" /* INTERNAL */, () => { });\r\n    }\r\n    return appCheck;\r\n}\r\n/**\r\n * Activate App Check\r\n * @param app - Firebase app to activate App Check for.\r\n * @param provider - reCAPTCHA v3 provider or\r\n * custom token provider.\r\n * @param isTokenAutoRefreshEnabled - If true, the SDK automatically\r\n * refreshes App Check tokens as needed. If undefined, defaults to the\r\n * value of `app.automaticDataCollectionEnabled`, which defaults to\r\n * false and can be set in the app config.\r\n */\r\nfunction _activate(app, provider, isTokenAutoRefreshEnabled) {\r\n    const state = getState(app);\r\n    const newState = Object.assign(Object.assign({}, state), { activated: true });\r\n    newState.provider = provider; // Read cached token from storage if it exists and store it in memory.\r\n    newState.cachedTokenPromise = readTokenFromStorage(app).then(cachedToken => {\r\n        if (cachedToken && isValid(cachedToken)) {\r\n            setState(app, Object.assign(Object.assign({}, getState(app)), { token: cachedToken }));\r\n            // notify all listeners with the cached token\r\n            notifyTokenListeners(app, { token: cachedToken.token });\r\n        }\r\n        return cachedToken;\r\n    });\r\n    // Use value of global `automaticDataCollectionEnabled` (which\r\n    // itself defaults to false if not specified in config) if\r\n    // `isTokenAutoRefreshEnabled` param was not provided by user.\r\n    newState.isTokenAutoRefreshEnabled =\r\n        isTokenAutoRefreshEnabled === undefined\r\n            ? app.automaticDataCollectionEnabled\r\n            : isTokenAutoRefreshEnabled;\r\n    setState(app, newState);\r\n    newState.provider.initialize(app);\r\n}\r\n/**\r\n * Set whether App Check will automatically refresh tokens as needed.\r\n *\r\n * @param appCheckInstance - The App Check service instance.\r\n * @param isTokenAutoRefreshEnabled - If true, the SDK automatically\r\n * refreshes App Check tokens as needed. This overrides any value set\r\n * during `initializeAppCheck()`.\r\n * @public\r\n */\r\nfunction setTokenAutoRefreshEnabled(appCheckInstance, isTokenAutoRefreshEnabled) {\r\n    const app = appCheckInstance.app;\r\n    const state = getState(app);\r\n    // This will exist if any product libraries have called\r\n    // `addTokenListener()`\r\n    if (state.tokenRefresher) {\r\n        if (isTokenAutoRefreshEnabled === true) {\r\n            state.tokenRefresher.start();\r\n        }\r\n        else {\r\n            state.tokenRefresher.stop();\r\n        }\r\n    }\r\n    setState(app, Object.assign(Object.assign({}, state), { isTokenAutoRefreshEnabled }));\r\n}\r\n/**\r\n * Get the current App Check token. Attaches to the most recent\r\n * in-flight request if one is present. Returns null if no token\r\n * is present and no token requests are in-flight.\r\n *\r\n * @param appCheckInstance - The App Check service instance.\r\n * @param forceRefresh - If true, will always try to fetch a fresh token.\r\n * If false, will use a cached token if found in storage.\r\n * @public\r\n */\r\nasync function getToken(appCheckInstance, forceRefresh) {\r\n    const result = await getToken$2(appCheckInstance, forceRefresh);\r\n    if (result.error) {\r\n        throw result.error;\r\n    }\r\n    return { token: result.token };\r\n}\r\n/**\r\n * Wraps `addTokenListener`/`removeTokenListener` methods in an `Observer`\r\n * pattern for public use.\r\n */\r\nfunction onTokenChanged(appCheckInstance, onNextOrObserver, onError, \r\n/**\r\n * NOTE: Although an `onCompletion` callback can be provided, it will\r\n * never be called because the token stream is never-ending.\r\n * It is added only for API consistency with the observer pattern, which\r\n * we follow in JS APIs.\r\n */\r\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\nonCompletion) {\r\n    let nextFn = () => { };\r\n    let errorFn = () => { };\r\n    if (onNextOrObserver.next != null) {\r\n        nextFn = onNextOrObserver.next.bind(onNextOrObserver);\r\n    }\r\n    else {\r\n        nextFn = onNextOrObserver;\r\n    }\r\n    if (onNextOrObserver.error != null) {\r\n        errorFn = onNextOrObserver.error.bind(onNextOrObserver);\r\n    }\r\n    else if (onError) {\r\n        errorFn = onError;\r\n    }\r\n    addTokenListener(appCheckInstance, \"EXTERNAL\" /* EXTERNAL */, nextFn, errorFn);\r\n    return () => removeTokenListener(appCheckInstance.app, nextFn);\r\n}\n\n/**\r\n * Firebase App Check\r\n *\r\n * @packageDocumentation\r\n */\r\nconst APP_CHECK_NAME = 'app-check';\r\nconst APP_CHECK_NAME_INTERNAL = 'app-check-internal';\r\nfunction registerAppCheck() {\r\n    // The public interface\r\n    _registerComponent(new Component(APP_CHECK_NAME, container => {\r\n        // getImmediate for FirebaseApp will always succeed\r\n        const app = container.getProvider('app').getImmediate();\r\n        const heartbeatServiceProvider = container.getProvider('heartbeat');\r\n        return factory(app, heartbeatServiceProvider);\r\n    }, \"PUBLIC\" /* PUBLIC */)\r\n        .setInstantiationMode(\"EXPLICIT\" /* EXPLICIT */)\r\n        /**\r\n         * Initialize app-check-internal after app-check is initialized to make AppCheck available to\r\n         * other Firebase SDKs\r\n         */\r\n        .setInstanceCreatedCallback((container, _identifier, _appcheckService) => {\r\n        container.getProvider(APP_CHECK_NAME_INTERNAL).initialize();\r\n    }));\r\n    // The internal interface used by other Firebase products\r\n    _registerComponent(new Component(APP_CHECK_NAME_INTERNAL, container => {\r\n        const appCheck = container.getProvider('app-check').getImmediate();\r\n        return internalFactory(appCheck);\r\n    }, \"PUBLIC\" /* PUBLIC */).setInstantiationMode(\"EXPLICIT\" /* EXPLICIT */));\r\n    registerVersion(name, version);\r\n}\r\nregisterAppCheck();\n\nexport { CustomProvider, ReCaptchaEnterpriseProvider, ReCaptchaV3Provider, getToken, initializeAppCheck, onTokenChanged, setTokenAutoRefreshEnabled };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}