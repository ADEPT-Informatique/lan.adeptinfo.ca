{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Felix/Desktop/lan.adeptinfo.ca/lan-adept/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { Component, ComponentContainer } from '@firebase/component';\nimport { Logger, setUserLogHandler, setLogLevel as setLogLevel$1 } from '@firebase/logger';\nimport { ErrorFactory, deepEqual, base64urlEncodeWithoutPadding, isIndexedDBAvailable, validateIndexedDBOpenable } from '@firebase/util';\nexport { FirebaseError } from '@firebase/util';\nimport { openDB } from 'idb';\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nclass PlatformLoggerServiceImpl {\n  constructor(container) {\n    this.container = container;\n  } // In initial implementation, this will be called by installations on\n  // auth token refresh, and installations will send this string.\n\n\n  getPlatformInfoString() {\n    const providers = this.container.getProviders(); // Loop through providers and get library/version pairs from any that are\n    // version components.\n\n    return providers.map(provider => {\n      if (isVersionServiceProvider(provider)) {\n        const service = provider.getImmediate();\n        return `${service.library}/${service.version}`;\n      } else {\n        return null;\n      }\n    }).filter(logString => logString).join(' ');\n  }\n\n}\n/**\r\n *\r\n * @param provider check if this provider provides a VersionService\r\n *\r\n * NOTE: Using Provider<'app-version'> is a hack to indicate that the provider\r\n * provides VersionService. The provider is not necessarily a 'app-version'\r\n * provider.\r\n */\n\n\nfunction isVersionServiceProvider(provider) {\n  const component = provider.getComponent();\n  return (component === null || component === void 0 ? void 0 : component.type) === \"VERSION\"\n  /* VERSION */\n  ;\n}\n\nconst name$o = \"@firebase/app\";\nconst version$1 = \"0.7.29\";\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nconst logger = new Logger('@firebase/app');\nconst name$n = \"@firebase/app-compat\";\nconst name$m = \"@firebase/analytics-compat\";\nconst name$l = \"@firebase/analytics\";\nconst name$k = \"@firebase/app-check-compat\";\nconst name$j = \"@firebase/app-check\";\nconst name$i = \"@firebase/auth\";\nconst name$h = \"@firebase/auth-compat\";\nconst name$g = \"@firebase/database\";\nconst name$f = \"@firebase/database-compat\";\nconst name$e = \"@firebase/functions\";\nconst name$d = \"@firebase/functions-compat\";\nconst name$c = \"@firebase/installations\";\nconst name$b = \"@firebase/installations-compat\";\nconst name$a = \"@firebase/messaging\";\nconst name$9 = \"@firebase/messaging-compat\";\nconst name$8 = \"@firebase/performance\";\nconst name$7 = \"@firebase/performance-compat\";\nconst name$6 = \"@firebase/remote-config\";\nconst name$5 = \"@firebase/remote-config-compat\";\nconst name$4 = \"@firebase/storage\";\nconst name$3 = \"@firebase/storage-compat\";\nconst name$2 = \"@firebase/firestore\";\nconst name$1 = \"@firebase/firestore-compat\";\nconst name = \"firebase\";\nconst version = \"9.9.1\";\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * The default app name\r\n *\r\n * @internal\r\n */\n\nconst DEFAULT_ENTRY_NAME = '[DEFAULT]';\nconst PLATFORM_LOG_STRING = {\n  [name$o]: 'fire-core',\n  [name$n]: 'fire-core-compat',\n  [name$l]: 'fire-analytics',\n  [name$m]: 'fire-analytics-compat',\n  [name$j]: 'fire-app-check',\n  [name$k]: 'fire-app-check-compat',\n  [name$i]: 'fire-auth',\n  [name$h]: 'fire-auth-compat',\n  [name$g]: 'fire-rtdb',\n  [name$f]: 'fire-rtdb-compat',\n  [name$e]: 'fire-fn',\n  [name$d]: 'fire-fn-compat',\n  [name$c]: 'fire-iid',\n  [name$b]: 'fire-iid-compat',\n  [name$a]: 'fire-fcm',\n  [name$9]: 'fire-fcm-compat',\n  [name$8]: 'fire-perf',\n  [name$7]: 'fire-perf-compat',\n  [name$6]: 'fire-rc',\n  [name$5]: 'fire-rc-compat',\n  [name$4]: 'fire-gcs',\n  [name$3]: 'fire-gcs-compat',\n  [name$2]: 'fire-fst',\n  [name$1]: 'fire-fst-compat',\n  'fire-js': 'fire-js',\n  [name]: 'fire-js-all'\n};\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * @internal\r\n */\n\nconst _apps = new Map();\n/**\r\n * Registered components.\r\n *\r\n * @internal\r\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\nconst _components = new Map();\n/**\r\n * @param component - the component being added to this app's container\r\n *\r\n * @internal\r\n */\n\n\nfunction _addComponent(app, component) {\n  try {\n    app.container.addComponent(component);\n  } catch (e) {\n    logger.debug(`Component ${component.name} failed to register with FirebaseApp ${app.name}`, e);\n  }\n}\n/**\r\n *\r\n * @internal\r\n */\n\n\nfunction _addOrOverwriteComponent(app, component) {\n  app.container.addOrOverwriteComponent(component);\n}\n/**\r\n *\r\n * @param component - the component to register\r\n * @returns whether or not the component is registered successfully\r\n *\r\n * @internal\r\n */\n\n\nfunction _registerComponent(component) {\n  const componentName = component.name;\n\n  if (_components.has(componentName)) {\n    logger.debug(`There were multiple attempts to register component ${componentName}.`);\n    return false;\n  }\n\n  _components.set(componentName, component); // add the component to existing app instances\n\n\n  for (const app of _apps.values()) {\n    _addComponent(app, component);\n  }\n\n  return true;\n}\n/**\r\n *\r\n * @param app - FirebaseApp instance\r\n * @param name - service name\r\n *\r\n * @returns the provider for the service with the matching name\r\n *\r\n * @internal\r\n */\n\n\nfunction _getProvider(app, name) {\n  const heartbeatController = app.container.getProvider('heartbeat').getImmediate({\n    optional: true\n  });\n\n  if (heartbeatController) {\n    void heartbeatController.triggerHeartbeat();\n  }\n\n  return app.container.getProvider(name);\n}\n/**\r\n *\r\n * @param app - FirebaseApp instance\r\n * @param name - service name\r\n * @param instanceIdentifier - service instance identifier in case the service supports multiple instances\r\n *\r\n * @internal\r\n */\n\n\nfunction _removeServiceInstance(app, name, instanceIdentifier = DEFAULT_ENTRY_NAME) {\n  _getProvider(app, name).clearInstance(instanceIdentifier);\n}\n/**\r\n * Test only\r\n *\r\n * @internal\r\n */\n\n\nfunction _clearComponents() {\n  _components.clear();\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nconst ERRORS = {\n  [\"no-app\"\n  /* NO_APP */\n  ]: \"No Firebase App '{$appName}' has been created - \" + 'call Firebase App.initializeApp()',\n  [\"bad-app-name\"\n  /* BAD_APP_NAME */\n  ]: \"Illegal App name: '{$appName}\",\n  [\"duplicate-app\"\n  /* DUPLICATE_APP */\n  ]: \"Firebase App named '{$appName}' already exists with different options or config\",\n  [\"app-deleted\"\n  /* APP_DELETED */\n  ]: \"Firebase App named '{$appName}' already deleted\",\n  [\"invalid-app-argument\"\n  /* INVALID_APP_ARGUMENT */\n  ]: 'firebase.{$appName}() takes either no argument or a ' + 'Firebase App instance.',\n  [\"invalid-log-argument\"\n  /* INVALID_LOG_ARGUMENT */\n  ]: 'First argument to `onLog` must be null or a function.',\n  [\"storage-open\"\n  /* STORAGE_OPEN */\n  ]: 'Error thrown when opening storage. Original error: {$originalErrorMessage}.',\n  [\"storage-get\"\n  /* STORAGE_GET */\n  ]: 'Error thrown when reading from storage. Original error: {$originalErrorMessage}.',\n  [\"storage-set\"\n  /* STORAGE_WRITE */\n  ]: 'Error thrown when writing to storage. Original error: {$originalErrorMessage}.',\n  [\"storage-delete\"\n  /* STORAGE_DELETE */\n  ]: 'Error thrown when deleting from storage. Original error: {$originalErrorMessage}.'\n};\nconst ERROR_FACTORY = new ErrorFactory('app', 'Firebase', ERRORS);\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nclass FirebaseAppImpl {\n  constructor(options, config, container) {\n    this._isDeleted = false;\n    this._options = Object.assign({}, options);\n    this._config = Object.assign({}, config);\n    this._name = config.name;\n    this._automaticDataCollectionEnabled = config.automaticDataCollectionEnabled;\n    this._container = container;\n    this.container.addComponent(new Component('app', () => this, \"PUBLIC\"\n    /* PUBLIC */\n    ));\n  }\n\n  get automaticDataCollectionEnabled() {\n    this.checkDestroyed();\n    return this._automaticDataCollectionEnabled;\n  }\n\n  set automaticDataCollectionEnabled(val) {\n    this.checkDestroyed();\n    this._automaticDataCollectionEnabled = val;\n  }\n\n  get name() {\n    this.checkDestroyed();\n    return this._name;\n  }\n\n  get options() {\n    this.checkDestroyed();\n    return this._options;\n  }\n\n  get config() {\n    this.checkDestroyed();\n    return this._config;\n  }\n\n  get container() {\n    return this._container;\n  }\n\n  get isDeleted() {\n    return this._isDeleted;\n  }\n\n  set isDeleted(val) {\n    this._isDeleted = val;\n  }\n  /**\r\n   * This function will throw an Error if the App has already been deleted -\r\n   * use before performing API actions on the App.\r\n   */\n\n\n  checkDestroyed() {\n    if (this.isDeleted) {\n      throw ERROR_FACTORY.create(\"app-deleted\"\n      /* APP_DELETED */\n      , {\n        appName: this._name\n      });\n    }\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * The current SDK version.\r\n *\r\n * @public\r\n */\n\n\nconst SDK_VERSION = version;\n\nfunction initializeApp(options, rawConfig = {}) {\n  if (typeof rawConfig !== 'object') {\n    const name = rawConfig;\n    rawConfig = {\n      name\n    };\n  }\n\n  const config = Object.assign({\n    name: DEFAULT_ENTRY_NAME,\n    automaticDataCollectionEnabled: false\n  }, rawConfig);\n  const name = config.name;\n\n  if (typeof name !== 'string' || !name) {\n    throw ERROR_FACTORY.create(\"bad-app-name\"\n    /* BAD_APP_NAME */\n    , {\n      appName: String(name)\n    });\n  }\n\n  const existingApp = _apps.get(name);\n\n  if (existingApp) {\n    // return the existing app if options and config deep equal the ones in the existing app.\n    if (deepEqual(options, existingApp.options) && deepEqual(config, existingApp.config)) {\n      return existingApp;\n    } else {\n      throw ERROR_FACTORY.create(\"duplicate-app\"\n      /* DUPLICATE_APP */\n      , {\n        appName: name\n      });\n    }\n  }\n\n  const container = new ComponentContainer(name);\n\n  for (const component of _components.values()) {\n    container.addComponent(component);\n  }\n\n  const newApp = new FirebaseAppImpl(options, config, container);\n\n  _apps.set(name, newApp);\n\n  return newApp;\n}\n/**\r\n * Retrieves a {@link @firebase/app#FirebaseApp} instance.\r\n *\r\n * When called with no arguments, the default app is returned. When an app name\r\n * is provided, the app corresponding to that name is returned.\r\n *\r\n * An exception is thrown if the app being retrieved has not yet been\r\n * initialized.\r\n *\r\n * @example\r\n * ```javascript\r\n * // Return the default app\r\n * const app = getApp();\r\n * ```\r\n *\r\n * @example\r\n * ```javascript\r\n * // Return a named app\r\n * const otherApp = getApp(\"otherApp\");\r\n * ```\r\n *\r\n * @param name - Optional name of the app to return. If no name is\r\n *   provided, the default is `\"[DEFAULT]\"`.\r\n *\r\n * @returns The app corresponding to the provided app name.\r\n *   If no app name is provided, the default app is returned.\r\n *\r\n * @public\r\n */\n\n\nfunction getApp(name = DEFAULT_ENTRY_NAME) {\n  const app = _apps.get(name);\n\n  if (!app) {\n    throw ERROR_FACTORY.create(\"no-app\"\n    /* NO_APP */\n    , {\n      appName: name\n    });\n  }\n\n  return app;\n}\n/**\r\n * A (read-only) array of all initialized apps.\r\n * @public\r\n */\n\n\nfunction getApps() {\n  return Array.from(_apps.values());\n}\n/**\r\n * Renders this app unusable and frees the resources of all associated\r\n * services.\r\n *\r\n * @example\r\n * ```javascript\r\n * deleteApp(app)\r\n *   .then(function() {\r\n *     console.log(\"App deleted successfully\");\r\n *   })\r\n *   .catch(function(error) {\r\n *     console.log(\"Error deleting app:\", error);\r\n *   });\r\n * ```\r\n *\r\n * @public\r\n */\n\n\nfunction deleteApp(_x) {\n  return _deleteApp.apply(this, arguments);\n}\n/**\r\n * Registers a library's name and version for platform logging purposes.\r\n * @param library - Name of 1p or 3p library (e.g. firestore, angularfire)\r\n * @param version - Current version of that library.\r\n * @param variant - Bundle variant, e.g., node, rn, etc.\r\n *\r\n * @public\r\n */\n\n\nfunction _deleteApp() {\n  _deleteApp = _asyncToGenerator(function* (app) {\n    const name = app.name;\n\n    if (_apps.has(name)) {\n      _apps.delete(name);\n\n      yield Promise.all(app.container.getProviders().map(provider => provider.delete()));\n      app.isDeleted = true;\n    }\n  });\n  return _deleteApp.apply(this, arguments);\n}\n\nfunction registerVersion(libraryKeyOrName, version, variant) {\n  var _a; // TODO: We can use this check to whitelist strings when/if we set up\n  // a good whitelist system.\n\n\n  let library = (_a = PLATFORM_LOG_STRING[libraryKeyOrName]) !== null && _a !== void 0 ? _a : libraryKeyOrName;\n\n  if (variant) {\n    library += `-${variant}`;\n  }\n\n  const libraryMismatch = library.match(/\\s|\\//);\n  const versionMismatch = version.match(/\\s|\\//);\n\n  if (libraryMismatch || versionMismatch) {\n    const warning = [`Unable to register library \"${library}\" with version \"${version}\":`];\n\n    if (libraryMismatch) {\n      warning.push(`library name \"${library}\" contains illegal characters (whitespace or \"/\")`);\n    }\n\n    if (libraryMismatch && versionMismatch) {\n      warning.push('and');\n    }\n\n    if (versionMismatch) {\n      warning.push(`version name \"${version}\" contains illegal characters (whitespace or \"/\")`);\n    }\n\n    logger.warn(warning.join(' '));\n    return;\n  }\n\n  _registerComponent(new Component(`${library}-version`, () => ({\n    library,\n    version\n  }), \"VERSION\"\n  /* VERSION */\n  ));\n}\n/**\r\n * Sets log handler for all Firebase SDKs.\r\n * @param logCallback - An optional custom log handler that executes user code whenever\r\n * the Firebase SDK makes a logging call.\r\n *\r\n * @public\r\n */\n\n\nfunction onLog(logCallback, options) {\n  if (logCallback !== null && typeof logCallback !== 'function') {\n    throw ERROR_FACTORY.create(\"invalid-log-argument\"\n    /* INVALID_LOG_ARGUMENT */\n    );\n  }\n\n  setUserLogHandler(logCallback, options);\n}\n/**\r\n * Sets log level for all Firebase SDKs.\r\n *\r\n * All of the log types above the current log level are captured (i.e. if\r\n * you set the log level to `info`, errors are logged, but `debug` and\r\n * `verbose` logs are not).\r\n *\r\n * @public\r\n */\n\n\nfunction setLogLevel(logLevel) {\n  setLogLevel$1(logLevel);\n}\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nconst DB_NAME = 'firebase-heartbeat-database';\nconst DB_VERSION = 1;\nconst STORE_NAME = 'firebase-heartbeat-store';\nlet dbPromise = null;\n\nfunction getDbPromise() {\n  if (!dbPromise) {\n    dbPromise = openDB(DB_NAME, DB_VERSION, {\n      upgrade: (db, oldVersion) => {\n        // We don't use 'break' in this switch statement, the fall-through\n        // behavior is what we want, because if there are multiple versions between\n        // the old version and the current version, we want ALL the migrations\n        // that correspond to those versions to run, not only the last one.\n        // eslint-disable-next-line default-case\n        switch (oldVersion) {\n          case 0:\n            db.createObjectStore(STORE_NAME);\n        }\n      }\n    }).catch(e => {\n      throw ERROR_FACTORY.create(\"storage-open\"\n      /* STORAGE_OPEN */\n      , {\n        originalErrorMessage: e.message\n      });\n    });\n  }\n\n  return dbPromise;\n}\n\nfunction readHeartbeatsFromIndexedDB(_x2) {\n  return _readHeartbeatsFromIndexedDB.apply(this, arguments);\n}\n\nfunction _readHeartbeatsFromIndexedDB() {\n  _readHeartbeatsFromIndexedDB = _asyncToGenerator(function* (app) {\n    var _a;\n\n    try {\n      const db = yield getDbPromise();\n      return db.transaction(STORE_NAME).objectStore(STORE_NAME).get(computeKey(app));\n    } catch (e) {\n      throw ERROR_FACTORY.create(\"storage-get\"\n      /* STORAGE_GET */\n      , {\n        originalErrorMessage: (_a = e) === null || _a === void 0 ? void 0 : _a.message\n      });\n    }\n  });\n  return _readHeartbeatsFromIndexedDB.apply(this, arguments);\n}\n\nfunction writeHeartbeatsToIndexedDB(_x3, _x4) {\n  return _writeHeartbeatsToIndexedDB.apply(this, arguments);\n}\n\nfunction _writeHeartbeatsToIndexedDB() {\n  _writeHeartbeatsToIndexedDB = _asyncToGenerator(function* (app, heartbeatObject) {\n    var _a;\n\n    try {\n      const db = yield getDbPromise();\n      const tx = db.transaction(STORE_NAME, 'readwrite');\n      const objectStore = tx.objectStore(STORE_NAME);\n      yield objectStore.put(heartbeatObject, computeKey(app));\n      return tx.done;\n    } catch (e) {\n      throw ERROR_FACTORY.create(\"storage-set\"\n      /* STORAGE_WRITE */\n      , {\n        originalErrorMessage: (_a = e) === null || _a === void 0 ? void 0 : _a.message\n      });\n    }\n  });\n  return _writeHeartbeatsToIndexedDB.apply(this, arguments);\n}\n\nfunction computeKey(app) {\n  return `${app.name}!${app.options.appId}`;\n}\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nconst MAX_HEADER_BYTES = 1024; // 30 days\n\nconst STORED_HEARTBEAT_RETENTION_MAX_MILLIS = 30 * 24 * 60 * 60 * 1000;\n\nclass HeartbeatServiceImpl {\n  constructor(container) {\n    this.container = container;\n    /**\r\n     * In-memory cache for heartbeats, used by getHeartbeatsHeader() to generate\r\n     * the header string.\r\n     * Stores one record per date. This will be consolidated into the standard\r\n     * format of one record per user agent string before being sent as a header.\r\n     * Populated from indexedDB when the controller is instantiated and should\r\n     * be kept in sync with indexedDB.\r\n     * Leave public for easier testing.\r\n     */\n\n    this._heartbeatsCache = null;\n    const app = this.container.getProvider('app').getImmediate();\n    this._storage = new HeartbeatStorageImpl(app);\n    this._heartbeatsCachePromise = this._storage.read().then(result => {\n      this._heartbeatsCache = result;\n      return result;\n    });\n  }\n  /**\r\n   * Called to report a heartbeat. The function will generate\r\n   * a HeartbeatsByUserAgent object, update heartbeatsCache, and persist it\r\n   * to IndexedDB.\r\n   * Note that we only store one heartbeat per day. So if a heartbeat for today is\r\n   * already logged, subsequent calls to this function in the same day will be ignored.\r\n   */\n\n\n  triggerHeartbeat() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const platformLogger = _this.container.getProvider('platform-logger').getImmediate(); // This is the \"Firebase user agent\" string from the platform logger\n      // service, not the browser user agent.\n\n\n      const agent = platformLogger.getPlatformInfoString();\n      const date = getUTCDateString();\n\n      if (_this._heartbeatsCache === null) {\n        _this._heartbeatsCache = yield _this._heartbeatsCachePromise;\n      } // Do not store a heartbeat if one is already stored for this day\n      // or if a header has already been sent today.\n\n\n      if (_this._heartbeatsCache.lastSentHeartbeatDate === date || _this._heartbeatsCache.heartbeats.some(singleDateHeartbeat => singleDateHeartbeat.date === date)) {\n        return;\n      } else {\n        // There is no entry for this date. Create one.\n        _this._heartbeatsCache.heartbeats.push({\n          date,\n          agent\n        });\n      } // Remove entries older than 30 days.\n\n\n      _this._heartbeatsCache.heartbeats = _this._heartbeatsCache.heartbeats.filter(singleDateHeartbeat => {\n        const hbTimestamp = new Date(singleDateHeartbeat.date).valueOf();\n        const now = Date.now();\n        return now - hbTimestamp <= STORED_HEARTBEAT_RETENTION_MAX_MILLIS;\n      });\n      return _this._storage.overwrite(_this._heartbeatsCache);\n    })();\n  }\n  /**\r\n   * Returns a base64 encoded string which can be attached to the heartbeat-specific header directly.\r\n   * It also clears all heartbeats from memory as well as in IndexedDB.\r\n   *\r\n   * NOTE: Consuming product SDKs should not send the header if this method\r\n   * returns an empty string.\r\n   */\n\n\n  getHeartbeatsHeader() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this2._heartbeatsCache === null) {\n        yield _this2._heartbeatsCachePromise;\n      } // If it's still null or the array is empty, there is no data to send.\n\n\n      if (_this2._heartbeatsCache === null || _this2._heartbeatsCache.heartbeats.length === 0) {\n        return '';\n      }\n\n      const date = getUTCDateString(); // Extract as many heartbeats from the cache as will fit under the size limit.\n\n      const {\n        heartbeatsToSend,\n        unsentEntries\n      } = extractHeartbeatsForHeader(_this2._heartbeatsCache.heartbeats);\n      const headerString = base64urlEncodeWithoutPadding(JSON.stringify({\n        version: 2,\n        heartbeats: heartbeatsToSend\n      })); // Store last sent date to prevent another being logged/sent for the same day.\n\n      _this2._heartbeatsCache.lastSentHeartbeatDate = date;\n\n      if (unsentEntries.length > 0) {\n        // Store any unsent entries if they exist.\n        _this2._heartbeatsCache.heartbeats = unsentEntries; // This seems more likely than emptying the array (below) to lead to some odd state\n        // since the cache isn't empty and this will be called again on the next request,\n        // and is probably safest if we await it.\n\n        yield _this2._storage.overwrite(_this2._heartbeatsCache);\n      } else {\n        _this2._heartbeatsCache.heartbeats = []; // Do not wait for this, to reduce latency.\n\n        void _this2._storage.overwrite(_this2._heartbeatsCache);\n      }\n\n      return headerString;\n    })();\n  }\n\n}\n\nfunction getUTCDateString() {\n  const today = new Date(); // Returns date format 'YYYY-MM-DD'\n\n  return today.toISOString().substring(0, 10);\n}\n\nfunction extractHeartbeatsForHeader(heartbeatsCache, maxSize = MAX_HEADER_BYTES) {\n  // Heartbeats grouped by user agent in the standard format to be sent in\n  // the header.\n  const heartbeatsToSend = []; // Single date format heartbeats that are not sent.\n\n  let unsentEntries = heartbeatsCache.slice();\n\n  for (const singleDateHeartbeat of heartbeatsCache) {\n    // Look for an existing entry with the same user agent.\n    const heartbeatEntry = heartbeatsToSend.find(hb => hb.agent === singleDateHeartbeat.agent);\n\n    if (!heartbeatEntry) {\n      // If no entry for this user agent exists, create one.\n      heartbeatsToSend.push({\n        agent: singleDateHeartbeat.agent,\n        dates: [singleDateHeartbeat.date]\n      });\n\n      if (countBytes(heartbeatsToSend) > maxSize) {\n        // If the header would exceed max size, remove the added heartbeat\n        // entry and stop adding to the header.\n        heartbeatsToSend.pop();\n        break;\n      }\n    } else {\n      heartbeatEntry.dates.push(singleDateHeartbeat.date); // If the header would exceed max size, remove the added date\n      // and stop adding to the header.\n\n      if (countBytes(heartbeatsToSend) > maxSize) {\n        heartbeatEntry.dates.pop();\n        break;\n      }\n    } // Pop unsent entry from queue. (Skipped if adding the entry exceeded\n    // quota and the loop breaks early.)\n\n\n    unsentEntries = unsentEntries.slice(1);\n  }\n\n  return {\n    heartbeatsToSend,\n    unsentEntries\n  };\n}\n\nclass HeartbeatStorageImpl {\n  constructor(app) {\n    this.app = app;\n    this._canUseIndexedDBPromise = this.runIndexedDBEnvironmentCheck();\n  }\n\n  runIndexedDBEnvironmentCheck() {\n    return _asyncToGenerator(function* () {\n      if (!isIndexedDBAvailable()) {\n        return false;\n      } else {\n        return validateIndexedDBOpenable().then(() => true).catch(() => false);\n      }\n    })();\n  }\n  /**\r\n   * Read all heartbeats.\r\n   */\n\n\n  read() {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      const canUseIndexedDB = yield _this3._canUseIndexedDBPromise;\n\n      if (!canUseIndexedDB) {\n        return {\n          heartbeats: []\n        };\n      } else {\n        const idbHeartbeatObject = yield readHeartbeatsFromIndexedDB(_this3.app);\n        return idbHeartbeatObject || {\n          heartbeats: []\n        };\n      }\n    })();\n  } // overwrite the storage with the provided heartbeats\n\n\n  overwrite(heartbeatsObject) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      var _a;\n\n      const canUseIndexedDB = yield _this4._canUseIndexedDBPromise;\n\n      if (!canUseIndexedDB) {\n        return;\n      } else {\n        const existingHeartbeatsObject = yield _this4.read();\n        return writeHeartbeatsToIndexedDB(_this4.app, {\n          lastSentHeartbeatDate: (_a = heartbeatsObject.lastSentHeartbeatDate) !== null && _a !== void 0 ? _a : existingHeartbeatsObject.lastSentHeartbeatDate,\n          heartbeats: heartbeatsObject.heartbeats\n        });\n      }\n    })();\n  } // add heartbeats\n\n\n  add(heartbeatsObject) {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      var _a;\n\n      const canUseIndexedDB = yield _this5._canUseIndexedDBPromise;\n\n      if (!canUseIndexedDB) {\n        return;\n      } else {\n        const existingHeartbeatsObject = yield _this5.read();\n        return writeHeartbeatsToIndexedDB(_this5.app, {\n          lastSentHeartbeatDate: (_a = heartbeatsObject.lastSentHeartbeatDate) !== null && _a !== void 0 ? _a : existingHeartbeatsObject.lastSentHeartbeatDate,\n          heartbeats: [...existingHeartbeatsObject.heartbeats, ...heartbeatsObject.heartbeats]\n        });\n      }\n    })();\n  }\n\n}\n/**\r\n * Calculate bytes of a HeartbeatsByUserAgent array after being wrapped\r\n * in a platform logging header JSON object, stringified, and converted\r\n * to base 64.\r\n */\n\n\nfunction countBytes(heartbeatsCache) {\n  // base64 has a restricted set of characters, all of which should be 1 byte.\n  return base64urlEncodeWithoutPadding( // heartbeatsCache wrapper properties\n  JSON.stringify({\n    version: 2,\n    heartbeats: heartbeatsCache\n  })).length;\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction registerCoreComponents(variant) {\n  _registerComponent(new Component('platform-logger', container => new PlatformLoggerServiceImpl(container), \"PRIVATE\"\n  /* PRIVATE */\n  ));\n\n  _registerComponent(new Component('heartbeat', container => new HeartbeatServiceImpl(container), \"PRIVATE\"\n  /* PRIVATE */\n  )); // Register `app` package.\n\n\n  registerVersion(name$o, version$1, variant); // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n\n  registerVersion(name$o, version$1, 'esm2017'); // Register platform SDK identifier (no version).\n\n  registerVersion('fire-js', '');\n}\n/**\r\n * Firebase App\r\n *\r\n * @remarks This package coordinates the communication between the different Firebase components\r\n * @packageDocumentation\r\n */\n\n\nregisterCoreComponents('');\nexport { SDK_VERSION, DEFAULT_ENTRY_NAME as _DEFAULT_ENTRY_NAME, _addComponent, _addOrOverwriteComponent, _apps, _clearComponents, _components, _getProvider, _registerComponent, _removeServiceInstance, deleteApp, getApp, getApps, initializeApp, onLog, registerVersion, setLogLevel };","map":{"version":3,"names":["Component","ComponentContainer","Logger","setUserLogHandler","setLogLevel","setLogLevel$1","ErrorFactory","deepEqual","base64urlEncodeWithoutPadding","isIndexedDBAvailable","validateIndexedDBOpenable","FirebaseError","openDB","PlatformLoggerServiceImpl","constructor","container","getPlatformInfoString","providers","getProviders","map","provider","isVersionServiceProvider","service","getImmediate","library","version","filter","logString","join","component","getComponent","type","name$o","version$1","logger","name$n","name$m","name$l","name$k","name$j","name$i","name$h","name$g","name$f","name$e","name$d","name$c","name$b","name$a","name$9","name$8","name$7","name$6","name$5","name$4","name$3","name$2","name$1","name","DEFAULT_ENTRY_NAME","PLATFORM_LOG_STRING","_apps","Map","_components","_addComponent","app","addComponent","e","debug","_addOrOverwriteComponent","addOrOverwriteComponent","_registerComponent","componentName","has","set","values","_getProvider","heartbeatController","getProvider","optional","triggerHeartbeat","_removeServiceInstance","instanceIdentifier","clearInstance","_clearComponents","clear","ERRORS","ERROR_FACTORY","FirebaseAppImpl","options","config","_isDeleted","_options","Object","assign","_config","_name","_automaticDataCollectionEnabled","automaticDataCollectionEnabled","_container","checkDestroyed","val","isDeleted","create","appName","SDK_VERSION","initializeApp","rawConfig","String","existingApp","get","newApp","getApp","getApps","Array","from","deleteApp","delete","Promise","all","registerVersion","libraryKeyOrName","variant","_a","libraryMismatch","match","versionMismatch","warning","push","warn","onLog","logCallback","logLevel","DB_NAME","DB_VERSION","STORE_NAME","dbPromise","getDbPromise","upgrade","db","oldVersion","createObjectStore","catch","originalErrorMessage","message","readHeartbeatsFromIndexedDB","transaction","objectStore","computeKey","writeHeartbeatsToIndexedDB","heartbeatObject","tx","put","done","appId","MAX_HEADER_BYTES","STORED_HEARTBEAT_RETENTION_MAX_MILLIS","HeartbeatServiceImpl","_heartbeatsCache","_storage","HeartbeatStorageImpl","_heartbeatsCachePromise","read","then","result","platformLogger","agent","date","getUTCDateString","lastSentHeartbeatDate","heartbeats","some","singleDateHeartbeat","hbTimestamp","Date","valueOf","now","overwrite","getHeartbeatsHeader","length","heartbeatsToSend","unsentEntries","extractHeartbeatsForHeader","headerString","JSON","stringify","today","toISOString","substring","heartbeatsCache","maxSize","slice","heartbeatEntry","find","hb","dates","countBytes","pop","_canUseIndexedDBPromise","runIndexedDBEnvironmentCheck","canUseIndexedDB","idbHeartbeatObject","heartbeatsObject","existingHeartbeatsObject","add","registerCoreComponents","_DEFAULT_ENTRY_NAME"],"sources":["C:/Users/Felix/Desktop/lan.adeptinfo.ca/lan-adept/node_modules/@firebase/app/dist/esm/index.esm2017.js"],"sourcesContent":["import { Component, ComponentContainer } from '@firebase/component';\nimport { Logger, setUserLogHandler, setLogLevel as setLogLevel$1 } from '@firebase/logger';\nimport { ErrorFactory, deepEqual, base64urlEncodeWithoutPadding, isIndexedDBAvailable, validateIndexedDBOpenable } from '@firebase/util';\nexport { FirebaseError } from '@firebase/util';\nimport { openDB } from 'idb';\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass PlatformLoggerServiceImpl {\r\n    constructor(container) {\r\n        this.container = container;\r\n    }\r\n    // In initial implementation, this will be called by installations on\r\n    // auth token refresh, and installations will send this string.\r\n    getPlatformInfoString() {\r\n        const providers = this.container.getProviders();\r\n        // Loop through providers and get library/version pairs from any that are\r\n        // version components.\r\n        return providers\r\n            .map(provider => {\r\n            if (isVersionServiceProvider(provider)) {\r\n                const service = provider.getImmediate();\r\n                return `${service.library}/${service.version}`;\r\n            }\r\n            else {\r\n                return null;\r\n            }\r\n        })\r\n            .filter(logString => logString)\r\n            .join(' ');\r\n    }\r\n}\r\n/**\r\n *\r\n * @param provider check if this provider provides a VersionService\r\n *\r\n * NOTE: Using Provider<'app-version'> is a hack to indicate that the provider\r\n * provides VersionService. The provider is not necessarily a 'app-version'\r\n * provider.\r\n */\r\nfunction isVersionServiceProvider(provider) {\r\n    const component = provider.getComponent();\r\n    return (component === null || component === void 0 ? void 0 : component.type) === \"VERSION\" /* VERSION */;\r\n}\n\nconst name$o = \"@firebase/app\";\nconst version$1 = \"0.7.29\";\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst logger = new Logger('@firebase/app');\n\nconst name$n = \"@firebase/app-compat\";\n\nconst name$m = \"@firebase/analytics-compat\";\n\nconst name$l = \"@firebase/analytics\";\n\nconst name$k = \"@firebase/app-check-compat\";\n\nconst name$j = \"@firebase/app-check\";\n\nconst name$i = \"@firebase/auth\";\n\nconst name$h = \"@firebase/auth-compat\";\n\nconst name$g = \"@firebase/database\";\n\nconst name$f = \"@firebase/database-compat\";\n\nconst name$e = \"@firebase/functions\";\n\nconst name$d = \"@firebase/functions-compat\";\n\nconst name$c = \"@firebase/installations\";\n\nconst name$b = \"@firebase/installations-compat\";\n\nconst name$a = \"@firebase/messaging\";\n\nconst name$9 = \"@firebase/messaging-compat\";\n\nconst name$8 = \"@firebase/performance\";\n\nconst name$7 = \"@firebase/performance-compat\";\n\nconst name$6 = \"@firebase/remote-config\";\n\nconst name$5 = \"@firebase/remote-config-compat\";\n\nconst name$4 = \"@firebase/storage\";\n\nconst name$3 = \"@firebase/storage-compat\";\n\nconst name$2 = \"@firebase/firestore\";\n\nconst name$1 = \"@firebase/firestore-compat\";\n\nconst name = \"firebase\";\nconst version = \"9.9.1\";\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The default app name\r\n *\r\n * @internal\r\n */\r\nconst DEFAULT_ENTRY_NAME = '[DEFAULT]';\r\nconst PLATFORM_LOG_STRING = {\r\n    [name$o]: 'fire-core',\r\n    [name$n]: 'fire-core-compat',\r\n    [name$l]: 'fire-analytics',\r\n    [name$m]: 'fire-analytics-compat',\r\n    [name$j]: 'fire-app-check',\r\n    [name$k]: 'fire-app-check-compat',\r\n    [name$i]: 'fire-auth',\r\n    [name$h]: 'fire-auth-compat',\r\n    [name$g]: 'fire-rtdb',\r\n    [name$f]: 'fire-rtdb-compat',\r\n    [name$e]: 'fire-fn',\r\n    [name$d]: 'fire-fn-compat',\r\n    [name$c]: 'fire-iid',\r\n    [name$b]: 'fire-iid-compat',\r\n    [name$a]: 'fire-fcm',\r\n    [name$9]: 'fire-fcm-compat',\r\n    [name$8]: 'fire-perf',\r\n    [name$7]: 'fire-perf-compat',\r\n    [name$6]: 'fire-rc',\r\n    [name$5]: 'fire-rc-compat',\r\n    [name$4]: 'fire-gcs',\r\n    [name$3]: 'fire-gcs-compat',\r\n    [name$2]: 'fire-fst',\r\n    [name$1]: 'fire-fst-compat',\r\n    'fire-js': 'fire-js',\r\n    [name]: 'fire-js-all'\r\n};\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @internal\r\n */\r\nconst _apps = new Map();\r\n/**\r\n * Registered components.\r\n *\r\n * @internal\r\n */\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nconst _components = new Map();\r\n/**\r\n * @param component - the component being added to this app's container\r\n *\r\n * @internal\r\n */\r\nfunction _addComponent(app, component) {\r\n    try {\r\n        app.container.addComponent(component);\r\n    }\r\n    catch (e) {\r\n        logger.debug(`Component ${component.name} failed to register with FirebaseApp ${app.name}`, e);\r\n    }\r\n}\r\n/**\r\n *\r\n * @internal\r\n */\r\nfunction _addOrOverwriteComponent(app, component) {\r\n    app.container.addOrOverwriteComponent(component);\r\n}\r\n/**\r\n *\r\n * @param component - the component to register\r\n * @returns whether or not the component is registered successfully\r\n *\r\n * @internal\r\n */\r\nfunction _registerComponent(component) {\r\n    const componentName = component.name;\r\n    if (_components.has(componentName)) {\r\n        logger.debug(`There were multiple attempts to register component ${componentName}.`);\r\n        return false;\r\n    }\r\n    _components.set(componentName, component);\r\n    // add the component to existing app instances\r\n    for (const app of _apps.values()) {\r\n        _addComponent(app, component);\r\n    }\r\n    return true;\r\n}\r\n/**\r\n *\r\n * @param app - FirebaseApp instance\r\n * @param name - service name\r\n *\r\n * @returns the provider for the service with the matching name\r\n *\r\n * @internal\r\n */\r\nfunction _getProvider(app, name) {\r\n    const heartbeatController = app.container\r\n        .getProvider('heartbeat')\r\n        .getImmediate({ optional: true });\r\n    if (heartbeatController) {\r\n        void heartbeatController.triggerHeartbeat();\r\n    }\r\n    return app.container.getProvider(name);\r\n}\r\n/**\r\n *\r\n * @param app - FirebaseApp instance\r\n * @param name - service name\r\n * @param instanceIdentifier - service instance identifier in case the service supports multiple instances\r\n *\r\n * @internal\r\n */\r\nfunction _removeServiceInstance(app, name, instanceIdentifier = DEFAULT_ENTRY_NAME) {\r\n    _getProvider(app, name).clearInstance(instanceIdentifier);\r\n}\r\n/**\r\n * Test only\r\n *\r\n * @internal\r\n */\r\nfunction _clearComponents() {\r\n    _components.clear();\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst ERRORS = {\r\n    [\"no-app\" /* NO_APP */]: \"No Firebase App '{$appName}' has been created - \" +\r\n        'call Firebase App.initializeApp()',\r\n    [\"bad-app-name\" /* BAD_APP_NAME */]: \"Illegal App name: '{$appName}\",\r\n    [\"duplicate-app\" /* DUPLICATE_APP */]: \"Firebase App named '{$appName}' already exists with different options or config\",\r\n    [\"app-deleted\" /* APP_DELETED */]: \"Firebase App named '{$appName}' already deleted\",\r\n    [\"invalid-app-argument\" /* INVALID_APP_ARGUMENT */]: 'firebase.{$appName}() takes either no argument or a ' +\r\n        'Firebase App instance.',\r\n    [\"invalid-log-argument\" /* INVALID_LOG_ARGUMENT */]: 'First argument to `onLog` must be null or a function.',\r\n    [\"storage-open\" /* STORAGE_OPEN */]: 'Error thrown when opening storage. Original error: {$originalErrorMessage}.',\r\n    [\"storage-get\" /* STORAGE_GET */]: 'Error thrown when reading from storage. Original error: {$originalErrorMessage}.',\r\n    [\"storage-set\" /* STORAGE_WRITE */]: 'Error thrown when writing to storage. Original error: {$originalErrorMessage}.',\r\n    [\"storage-delete\" /* STORAGE_DELETE */]: 'Error thrown when deleting from storage. Original error: {$originalErrorMessage}.'\r\n};\r\nconst ERROR_FACTORY = new ErrorFactory('app', 'Firebase', ERRORS);\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass FirebaseAppImpl {\r\n    constructor(options, config, container) {\r\n        this._isDeleted = false;\r\n        this._options = Object.assign({}, options);\r\n        this._config = Object.assign({}, config);\r\n        this._name = config.name;\r\n        this._automaticDataCollectionEnabled =\r\n            config.automaticDataCollectionEnabled;\r\n        this._container = container;\r\n        this.container.addComponent(new Component('app', () => this, \"PUBLIC\" /* PUBLIC */));\r\n    }\r\n    get automaticDataCollectionEnabled() {\r\n        this.checkDestroyed();\r\n        return this._automaticDataCollectionEnabled;\r\n    }\r\n    set automaticDataCollectionEnabled(val) {\r\n        this.checkDestroyed();\r\n        this._automaticDataCollectionEnabled = val;\r\n    }\r\n    get name() {\r\n        this.checkDestroyed();\r\n        return this._name;\r\n    }\r\n    get options() {\r\n        this.checkDestroyed();\r\n        return this._options;\r\n    }\r\n    get config() {\r\n        this.checkDestroyed();\r\n        return this._config;\r\n    }\r\n    get container() {\r\n        return this._container;\r\n    }\r\n    get isDeleted() {\r\n        return this._isDeleted;\r\n    }\r\n    set isDeleted(val) {\r\n        this._isDeleted = val;\r\n    }\r\n    /**\r\n     * This function will throw an Error if the App has already been deleted -\r\n     * use before performing API actions on the App.\r\n     */\r\n    checkDestroyed() {\r\n        if (this.isDeleted) {\r\n            throw ERROR_FACTORY.create(\"app-deleted\" /* APP_DELETED */, { appName: this._name });\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The current SDK version.\r\n *\r\n * @public\r\n */\r\nconst SDK_VERSION = version;\r\nfunction initializeApp(options, rawConfig = {}) {\r\n    if (typeof rawConfig !== 'object') {\r\n        const name = rawConfig;\r\n        rawConfig = { name };\r\n    }\r\n    const config = Object.assign({ name: DEFAULT_ENTRY_NAME, automaticDataCollectionEnabled: false }, rawConfig);\r\n    const name = config.name;\r\n    if (typeof name !== 'string' || !name) {\r\n        throw ERROR_FACTORY.create(\"bad-app-name\" /* BAD_APP_NAME */, {\r\n            appName: String(name)\r\n        });\r\n    }\r\n    const existingApp = _apps.get(name);\r\n    if (existingApp) {\r\n        // return the existing app if options and config deep equal the ones in the existing app.\r\n        if (deepEqual(options, existingApp.options) &&\r\n            deepEqual(config, existingApp.config)) {\r\n            return existingApp;\r\n        }\r\n        else {\r\n            throw ERROR_FACTORY.create(\"duplicate-app\" /* DUPLICATE_APP */, { appName: name });\r\n        }\r\n    }\r\n    const container = new ComponentContainer(name);\r\n    for (const component of _components.values()) {\r\n        container.addComponent(component);\r\n    }\r\n    const newApp = new FirebaseAppImpl(options, config, container);\r\n    _apps.set(name, newApp);\r\n    return newApp;\r\n}\r\n/**\r\n * Retrieves a {@link @firebase/app#FirebaseApp} instance.\r\n *\r\n * When called with no arguments, the default app is returned. When an app name\r\n * is provided, the app corresponding to that name is returned.\r\n *\r\n * An exception is thrown if the app being retrieved has not yet been\r\n * initialized.\r\n *\r\n * @example\r\n * ```javascript\r\n * // Return the default app\r\n * const app = getApp();\r\n * ```\r\n *\r\n * @example\r\n * ```javascript\r\n * // Return a named app\r\n * const otherApp = getApp(\"otherApp\");\r\n * ```\r\n *\r\n * @param name - Optional name of the app to return. If no name is\r\n *   provided, the default is `\"[DEFAULT]\"`.\r\n *\r\n * @returns The app corresponding to the provided app name.\r\n *   If no app name is provided, the default app is returned.\r\n *\r\n * @public\r\n */\r\nfunction getApp(name = DEFAULT_ENTRY_NAME) {\r\n    const app = _apps.get(name);\r\n    if (!app) {\r\n        throw ERROR_FACTORY.create(\"no-app\" /* NO_APP */, { appName: name });\r\n    }\r\n    return app;\r\n}\r\n/**\r\n * A (read-only) array of all initialized apps.\r\n * @public\r\n */\r\nfunction getApps() {\r\n    return Array.from(_apps.values());\r\n}\r\n/**\r\n * Renders this app unusable and frees the resources of all associated\r\n * services.\r\n *\r\n * @example\r\n * ```javascript\r\n * deleteApp(app)\r\n *   .then(function() {\r\n *     console.log(\"App deleted successfully\");\r\n *   })\r\n *   .catch(function(error) {\r\n *     console.log(\"Error deleting app:\", error);\r\n *   });\r\n * ```\r\n *\r\n * @public\r\n */\r\nasync function deleteApp(app) {\r\n    const name = app.name;\r\n    if (_apps.has(name)) {\r\n        _apps.delete(name);\r\n        await Promise.all(app.container\r\n            .getProviders()\r\n            .map(provider => provider.delete()));\r\n        app.isDeleted = true;\r\n    }\r\n}\r\n/**\r\n * Registers a library's name and version for platform logging purposes.\r\n * @param library - Name of 1p or 3p library (e.g. firestore, angularfire)\r\n * @param version - Current version of that library.\r\n * @param variant - Bundle variant, e.g., node, rn, etc.\r\n *\r\n * @public\r\n */\r\nfunction registerVersion(libraryKeyOrName, version, variant) {\r\n    var _a;\r\n    // TODO: We can use this check to whitelist strings when/if we set up\r\n    // a good whitelist system.\r\n    let library = (_a = PLATFORM_LOG_STRING[libraryKeyOrName]) !== null && _a !== void 0 ? _a : libraryKeyOrName;\r\n    if (variant) {\r\n        library += `-${variant}`;\r\n    }\r\n    const libraryMismatch = library.match(/\\s|\\//);\r\n    const versionMismatch = version.match(/\\s|\\//);\r\n    if (libraryMismatch || versionMismatch) {\r\n        const warning = [\r\n            `Unable to register library \"${library}\" with version \"${version}\":`\r\n        ];\r\n        if (libraryMismatch) {\r\n            warning.push(`library name \"${library}\" contains illegal characters (whitespace or \"/\")`);\r\n        }\r\n        if (libraryMismatch && versionMismatch) {\r\n            warning.push('and');\r\n        }\r\n        if (versionMismatch) {\r\n            warning.push(`version name \"${version}\" contains illegal characters (whitespace or \"/\")`);\r\n        }\r\n        logger.warn(warning.join(' '));\r\n        return;\r\n    }\r\n    _registerComponent(new Component(`${library}-version`, () => ({ library, version }), \"VERSION\" /* VERSION */));\r\n}\r\n/**\r\n * Sets log handler for all Firebase SDKs.\r\n * @param logCallback - An optional custom log handler that executes user code whenever\r\n * the Firebase SDK makes a logging call.\r\n *\r\n * @public\r\n */\r\nfunction onLog(logCallback, options) {\r\n    if (logCallback !== null && typeof logCallback !== 'function') {\r\n        throw ERROR_FACTORY.create(\"invalid-log-argument\" /* INVALID_LOG_ARGUMENT */);\r\n    }\r\n    setUserLogHandler(logCallback, options);\r\n}\r\n/**\r\n * Sets log level for all Firebase SDKs.\r\n *\r\n * All of the log types above the current log level are captured (i.e. if\r\n * you set the log level to `info`, errors are logged, but `debug` and\r\n * `verbose` logs are not).\r\n *\r\n * @public\r\n */\r\nfunction setLogLevel(logLevel) {\r\n    setLogLevel$1(logLevel);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst DB_NAME = 'firebase-heartbeat-database';\r\nconst DB_VERSION = 1;\r\nconst STORE_NAME = 'firebase-heartbeat-store';\r\nlet dbPromise = null;\r\nfunction getDbPromise() {\r\n    if (!dbPromise) {\r\n        dbPromise = openDB(DB_NAME, DB_VERSION, {\r\n            upgrade: (db, oldVersion) => {\r\n                // We don't use 'break' in this switch statement, the fall-through\r\n                // behavior is what we want, because if there are multiple versions between\r\n                // the old version and the current version, we want ALL the migrations\r\n                // that correspond to those versions to run, not only the last one.\r\n                // eslint-disable-next-line default-case\r\n                switch (oldVersion) {\r\n                    case 0:\r\n                        db.createObjectStore(STORE_NAME);\r\n                }\r\n            }\r\n        }).catch(e => {\r\n            throw ERROR_FACTORY.create(\"storage-open\" /* STORAGE_OPEN */, {\r\n                originalErrorMessage: e.message\r\n            });\r\n        });\r\n    }\r\n    return dbPromise;\r\n}\r\nasync function readHeartbeatsFromIndexedDB(app) {\r\n    var _a;\r\n    try {\r\n        const db = await getDbPromise();\r\n        return db\r\n            .transaction(STORE_NAME)\r\n            .objectStore(STORE_NAME)\r\n            .get(computeKey(app));\r\n    }\r\n    catch (e) {\r\n        throw ERROR_FACTORY.create(\"storage-get\" /* STORAGE_GET */, {\r\n            originalErrorMessage: (_a = e) === null || _a === void 0 ? void 0 : _a.message\r\n        });\r\n    }\r\n}\r\nasync function writeHeartbeatsToIndexedDB(app, heartbeatObject) {\r\n    var _a;\r\n    try {\r\n        const db = await getDbPromise();\r\n        const tx = db.transaction(STORE_NAME, 'readwrite');\r\n        const objectStore = tx.objectStore(STORE_NAME);\r\n        await objectStore.put(heartbeatObject, computeKey(app));\r\n        return tx.done;\r\n    }\r\n    catch (e) {\r\n        throw ERROR_FACTORY.create(\"storage-set\" /* STORAGE_WRITE */, {\r\n            originalErrorMessage: (_a = e) === null || _a === void 0 ? void 0 : _a.message\r\n        });\r\n    }\r\n}\r\nfunction computeKey(app) {\r\n    return `${app.name}!${app.options.appId}`;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst MAX_HEADER_BYTES = 1024;\r\n// 30 days\r\nconst STORED_HEARTBEAT_RETENTION_MAX_MILLIS = 30 * 24 * 60 * 60 * 1000;\r\nclass HeartbeatServiceImpl {\r\n    constructor(container) {\r\n        this.container = container;\r\n        /**\r\n         * In-memory cache for heartbeats, used by getHeartbeatsHeader() to generate\r\n         * the header string.\r\n         * Stores one record per date. This will be consolidated into the standard\r\n         * format of one record per user agent string before being sent as a header.\r\n         * Populated from indexedDB when the controller is instantiated and should\r\n         * be kept in sync with indexedDB.\r\n         * Leave public for easier testing.\r\n         */\r\n        this._heartbeatsCache = null;\r\n        const app = this.container.getProvider('app').getImmediate();\r\n        this._storage = new HeartbeatStorageImpl(app);\r\n        this._heartbeatsCachePromise = this._storage.read().then(result => {\r\n            this._heartbeatsCache = result;\r\n            return result;\r\n        });\r\n    }\r\n    /**\r\n     * Called to report a heartbeat. The function will generate\r\n     * a HeartbeatsByUserAgent object, update heartbeatsCache, and persist it\r\n     * to IndexedDB.\r\n     * Note that we only store one heartbeat per day. So if a heartbeat for today is\r\n     * already logged, subsequent calls to this function in the same day will be ignored.\r\n     */\r\n    async triggerHeartbeat() {\r\n        const platformLogger = this.container\r\n            .getProvider('platform-logger')\r\n            .getImmediate();\r\n        // This is the \"Firebase user agent\" string from the platform logger\r\n        // service, not the browser user agent.\r\n        const agent = platformLogger.getPlatformInfoString();\r\n        const date = getUTCDateString();\r\n        if (this._heartbeatsCache === null) {\r\n            this._heartbeatsCache = await this._heartbeatsCachePromise;\r\n        }\r\n        // Do not store a heartbeat if one is already stored for this day\r\n        // or if a header has already been sent today.\r\n        if (this._heartbeatsCache.lastSentHeartbeatDate === date ||\r\n            this._heartbeatsCache.heartbeats.some(singleDateHeartbeat => singleDateHeartbeat.date === date)) {\r\n            return;\r\n        }\r\n        else {\r\n            // There is no entry for this date. Create one.\r\n            this._heartbeatsCache.heartbeats.push({ date, agent });\r\n        }\r\n        // Remove entries older than 30 days.\r\n        this._heartbeatsCache.heartbeats = this._heartbeatsCache.heartbeats.filter(singleDateHeartbeat => {\r\n            const hbTimestamp = new Date(singleDateHeartbeat.date).valueOf();\r\n            const now = Date.now();\r\n            return now - hbTimestamp <= STORED_HEARTBEAT_RETENTION_MAX_MILLIS;\r\n        });\r\n        return this._storage.overwrite(this._heartbeatsCache);\r\n    }\r\n    /**\r\n     * Returns a base64 encoded string which can be attached to the heartbeat-specific header directly.\r\n     * It also clears all heartbeats from memory as well as in IndexedDB.\r\n     *\r\n     * NOTE: Consuming product SDKs should not send the header if this method\r\n     * returns an empty string.\r\n     */\r\n    async getHeartbeatsHeader() {\r\n        if (this._heartbeatsCache === null) {\r\n            await this._heartbeatsCachePromise;\r\n        }\r\n        // If it's still null or the array is empty, there is no data to send.\r\n        if (this._heartbeatsCache === null ||\r\n            this._heartbeatsCache.heartbeats.length === 0) {\r\n            return '';\r\n        }\r\n        const date = getUTCDateString();\r\n        // Extract as many heartbeats from the cache as will fit under the size limit.\r\n        const { heartbeatsToSend, unsentEntries } = extractHeartbeatsForHeader(this._heartbeatsCache.heartbeats);\r\n        const headerString = base64urlEncodeWithoutPadding(JSON.stringify({ version: 2, heartbeats: heartbeatsToSend }));\r\n        // Store last sent date to prevent another being logged/sent for the same day.\r\n        this._heartbeatsCache.lastSentHeartbeatDate = date;\r\n        if (unsentEntries.length > 0) {\r\n            // Store any unsent entries if they exist.\r\n            this._heartbeatsCache.heartbeats = unsentEntries;\r\n            // This seems more likely than emptying the array (below) to lead to some odd state\r\n            // since the cache isn't empty and this will be called again on the next request,\r\n            // and is probably safest if we await it.\r\n            await this._storage.overwrite(this._heartbeatsCache);\r\n        }\r\n        else {\r\n            this._heartbeatsCache.heartbeats = [];\r\n            // Do not wait for this, to reduce latency.\r\n            void this._storage.overwrite(this._heartbeatsCache);\r\n        }\r\n        return headerString;\r\n    }\r\n}\r\nfunction getUTCDateString() {\r\n    const today = new Date();\r\n    // Returns date format 'YYYY-MM-DD'\r\n    return today.toISOString().substring(0, 10);\r\n}\r\nfunction extractHeartbeatsForHeader(heartbeatsCache, maxSize = MAX_HEADER_BYTES) {\r\n    // Heartbeats grouped by user agent in the standard format to be sent in\r\n    // the header.\r\n    const heartbeatsToSend = [];\r\n    // Single date format heartbeats that are not sent.\r\n    let unsentEntries = heartbeatsCache.slice();\r\n    for (const singleDateHeartbeat of heartbeatsCache) {\r\n        // Look for an existing entry with the same user agent.\r\n        const heartbeatEntry = heartbeatsToSend.find(hb => hb.agent === singleDateHeartbeat.agent);\r\n        if (!heartbeatEntry) {\r\n            // If no entry for this user agent exists, create one.\r\n            heartbeatsToSend.push({\r\n                agent: singleDateHeartbeat.agent,\r\n                dates: [singleDateHeartbeat.date]\r\n            });\r\n            if (countBytes(heartbeatsToSend) > maxSize) {\r\n                // If the header would exceed max size, remove the added heartbeat\r\n                // entry and stop adding to the header.\r\n                heartbeatsToSend.pop();\r\n                break;\r\n            }\r\n        }\r\n        else {\r\n            heartbeatEntry.dates.push(singleDateHeartbeat.date);\r\n            // If the header would exceed max size, remove the added date\r\n            // and stop adding to the header.\r\n            if (countBytes(heartbeatsToSend) > maxSize) {\r\n                heartbeatEntry.dates.pop();\r\n                break;\r\n            }\r\n        }\r\n        // Pop unsent entry from queue. (Skipped if adding the entry exceeded\r\n        // quota and the loop breaks early.)\r\n        unsentEntries = unsentEntries.slice(1);\r\n    }\r\n    return {\r\n        heartbeatsToSend,\r\n        unsentEntries\r\n    };\r\n}\r\nclass HeartbeatStorageImpl {\r\n    constructor(app) {\r\n        this.app = app;\r\n        this._canUseIndexedDBPromise = this.runIndexedDBEnvironmentCheck();\r\n    }\r\n    async runIndexedDBEnvironmentCheck() {\r\n        if (!isIndexedDBAvailable()) {\r\n            return false;\r\n        }\r\n        else {\r\n            return validateIndexedDBOpenable()\r\n                .then(() => true)\r\n                .catch(() => false);\r\n        }\r\n    }\r\n    /**\r\n     * Read all heartbeats.\r\n     */\r\n    async read() {\r\n        const canUseIndexedDB = await this._canUseIndexedDBPromise;\r\n        if (!canUseIndexedDB) {\r\n            return { heartbeats: [] };\r\n        }\r\n        else {\r\n            const idbHeartbeatObject = await readHeartbeatsFromIndexedDB(this.app);\r\n            return idbHeartbeatObject || { heartbeats: [] };\r\n        }\r\n    }\r\n    // overwrite the storage with the provided heartbeats\r\n    async overwrite(heartbeatsObject) {\r\n        var _a;\r\n        const canUseIndexedDB = await this._canUseIndexedDBPromise;\r\n        if (!canUseIndexedDB) {\r\n            return;\r\n        }\r\n        else {\r\n            const existingHeartbeatsObject = await this.read();\r\n            return writeHeartbeatsToIndexedDB(this.app, {\r\n                lastSentHeartbeatDate: (_a = heartbeatsObject.lastSentHeartbeatDate) !== null && _a !== void 0 ? _a : existingHeartbeatsObject.lastSentHeartbeatDate,\r\n                heartbeats: heartbeatsObject.heartbeats\r\n            });\r\n        }\r\n    }\r\n    // add heartbeats\r\n    async add(heartbeatsObject) {\r\n        var _a;\r\n        const canUseIndexedDB = await this._canUseIndexedDBPromise;\r\n        if (!canUseIndexedDB) {\r\n            return;\r\n        }\r\n        else {\r\n            const existingHeartbeatsObject = await this.read();\r\n            return writeHeartbeatsToIndexedDB(this.app, {\r\n                lastSentHeartbeatDate: (_a = heartbeatsObject.lastSentHeartbeatDate) !== null && _a !== void 0 ? _a : existingHeartbeatsObject.lastSentHeartbeatDate,\r\n                heartbeats: [\r\n                    ...existingHeartbeatsObject.heartbeats,\r\n                    ...heartbeatsObject.heartbeats\r\n                ]\r\n            });\r\n        }\r\n    }\r\n}\r\n/**\r\n * Calculate bytes of a HeartbeatsByUserAgent array after being wrapped\r\n * in a platform logging header JSON object, stringified, and converted\r\n * to base 64.\r\n */\r\nfunction countBytes(heartbeatsCache) {\r\n    // base64 has a restricted set of characters, all of which should be 1 byte.\r\n    return base64urlEncodeWithoutPadding(\r\n    // heartbeatsCache wrapper properties\r\n    JSON.stringify({ version: 2, heartbeats: heartbeatsCache })).length;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction registerCoreComponents(variant) {\r\n    _registerComponent(new Component('platform-logger', container => new PlatformLoggerServiceImpl(container), \"PRIVATE\" /* PRIVATE */));\r\n    _registerComponent(new Component('heartbeat', container => new HeartbeatServiceImpl(container), \"PRIVATE\" /* PRIVATE */));\r\n    // Register `app` package.\r\n    registerVersion(name$o, version$1, variant);\r\n    // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\r\n    registerVersion(name$o, version$1, 'esm2017');\r\n    // Register platform SDK identifier (no version).\r\n    registerVersion('fire-js', '');\r\n}\n\n/**\r\n * Firebase App\r\n *\r\n * @remarks This package coordinates the communication between the different Firebase components\r\n * @packageDocumentation\r\n */\r\nregisterCoreComponents('');\n\nexport { SDK_VERSION, DEFAULT_ENTRY_NAME as _DEFAULT_ENTRY_NAME, _addComponent, _addOrOverwriteComponent, _apps, _clearComponents, _components, _getProvider, _registerComponent, _removeServiceInstance, deleteApp, getApp, getApps, initializeApp, onLog, registerVersion, setLogLevel };\n"],"mappings":";AAAA,SAASA,SAAT,EAAoBC,kBAApB,QAA8C,qBAA9C;AACA,SAASC,MAAT,EAAiBC,iBAAjB,EAAoCC,WAAW,IAAIC,aAAnD,QAAwE,kBAAxE;AACA,SAASC,YAAT,EAAuBC,SAAvB,EAAkCC,6BAAlC,EAAiEC,oBAAjE,EAAuFC,yBAAvF,QAAwH,gBAAxH;AACA,SAASC,aAAT,QAA8B,gBAA9B;AACA,SAASC,MAAT,QAAuB,KAAvB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,yBAAN,CAAgC;EAC5BC,WAAW,CAACC,SAAD,EAAY;IACnB,KAAKA,SAAL,GAAiBA,SAAjB;EACH,CAH2B,CAI5B;EACA;;;EACAC,qBAAqB,GAAG;IACpB,MAAMC,SAAS,GAAG,KAAKF,SAAL,CAAeG,YAAf,EAAlB,CADoB,CAEpB;IACA;;IACA,OAAOD,SAAS,CACXE,GADE,CACEC,QAAQ,IAAI;MACjB,IAAIC,wBAAwB,CAACD,QAAD,CAA5B,EAAwC;QACpC,MAAME,OAAO,GAAGF,QAAQ,CAACG,YAAT,EAAhB;QACA,OAAQ,GAAED,OAAO,CAACE,OAAQ,IAAGF,OAAO,CAACG,OAAQ,EAA7C;MACH,CAHD,MAIK;QACD,OAAO,IAAP;MACH;IACJ,CATM,EAUFC,MAVE,CAUKC,SAAS,IAAIA,SAVlB,EAWFC,IAXE,CAWG,GAXH,CAAP;EAYH;;AAtB2B;AAwBhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASP,wBAAT,CAAkCD,QAAlC,EAA4C;EACxC,MAAMS,SAAS,GAAGT,QAAQ,CAACU,YAAT,EAAlB;EACA,OAAO,CAACD,SAAS,KAAK,IAAd,IAAsBA,SAAS,KAAK,KAAK,CAAzC,GAA6C,KAAK,CAAlD,GAAsDA,SAAS,CAACE,IAAjE,MAA2E;EAAU;EAA5F;AACH;;AAED,MAAMC,MAAM,GAAG,eAAf;AACA,MAAMC,SAAS,GAAG,QAAlB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,MAAM,GAAG,IAAIhC,MAAJ,CAAW,eAAX,CAAf;AAEA,MAAMiC,MAAM,GAAG,sBAAf;AAEA,MAAMC,MAAM,GAAG,4BAAf;AAEA,MAAMC,MAAM,GAAG,qBAAf;AAEA,MAAMC,MAAM,GAAG,4BAAf;AAEA,MAAMC,MAAM,GAAG,qBAAf;AAEA,MAAMC,MAAM,GAAG,gBAAf;AAEA,MAAMC,MAAM,GAAG,uBAAf;AAEA,MAAMC,MAAM,GAAG,oBAAf;AAEA,MAAMC,MAAM,GAAG,2BAAf;AAEA,MAAMC,MAAM,GAAG,qBAAf;AAEA,MAAMC,MAAM,GAAG,4BAAf;AAEA,MAAMC,MAAM,GAAG,yBAAf;AAEA,MAAMC,MAAM,GAAG,gCAAf;AAEA,MAAMC,MAAM,GAAG,qBAAf;AAEA,MAAMC,MAAM,GAAG,4BAAf;AAEA,MAAMC,MAAM,GAAG,uBAAf;AAEA,MAAMC,MAAM,GAAG,8BAAf;AAEA,MAAMC,MAAM,GAAG,yBAAf;AAEA,MAAMC,MAAM,GAAG,gCAAf;AAEA,MAAMC,MAAM,GAAG,mBAAf;AAEA,MAAMC,MAAM,GAAG,0BAAf;AAEA,MAAMC,MAAM,GAAG,qBAAf;AAEA,MAAMC,MAAM,GAAG,4BAAf;AAEA,MAAMC,IAAI,GAAG,UAAb;AACA,MAAMjC,OAAO,GAAG,OAAhB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMkC,kBAAkB,GAAG,WAA3B;AACA,MAAMC,mBAAmB,GAAG;EACxB,CAAC5B,MAAD,GAAU,WADc;EAExB,CAACG,MAAD,GAAU,kBAFc;EAGxB,CAACE,MAAD,GAAU,gBAHc;EAIxB,CAACD,MAAD,GAAU,uBAJc;EAKxB,CAACG,MAAD,GAAU,gBALc;EAMxB,CAACD,MAAD,GAAU,uBANc;EAOxB,CAACE,MAAD,GAAU,WAPc;EAQxB,CAACC,MAAD,GAAU,kBARc;EASxB,CAACC,MAAD,GAAU,WATc;EAUxB,CAACC,MAAD,GAAU,kBAVc;EAWxB,CAACC,MAAD,GAAU,SAXc;EAYxB,CAACC,MAAD,GAAU,gBAZc;EAaxB,CAACC,MAAD,GAAU,UAbc;EAcxB,CAACC,MAAD,GAAU,iBAdc;EAexB,CAACC,MAAD,GAAU,UAfc;EAgBxB,CAACC,MAAD,GAAU,iBAhBc;EAiBxB,CAACC,MAAD,GAAU,WAjBc;EAkBxB,CAACC,MAAD,GAAU,kBAlBc;EAmBxB,CAACC,MAAD,GAAU,SAnBc;EAoBxB,CAACC,MAAD,GAAU,gBApBc;EAqBxB,CAACC,MAAD,GAAU,UArBc;EAsBxB,CAACC,MAAD,GAAU,iBAtBc;EAuBxB,CAACC,MAAD,GAAU,UAvBc;EAwBxB,CAACC,MAAD,GAAU,iBAxBc;EAyBxB,WAAW,SAzBa;EA0BxB,CAACC,IAAD,GAAQ;AA1BgB,CAA5B;AA6BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;;AACA,MAAMG,KAAK,GAAG,IAAIC,GAAJ,EAAd;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMC,WAAW,GAAG,IAAID,GAAJ,EAApB;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASE,aAAT,CAAuBC,GAAvB,EAA4BpC,SAA5B,EAAuC;EACnC,IAAI;IACAoC,GAAG,CAAClD,SAAJ,CAAcmD,YAAd,CAA2BrC,SAA3B;EACH,CAFD,CAGA,OAAOsC,CAAP,EAAU;IACNjC,MAAM,CAACkC,KAAP,CAAc,aAAYvC,SAAS,CAAC6B,IAAK,wCAAuCO,GAAG,CAACP,IAAK,EAAzF,EAA4FS,CAA5F;EACH;AACJ;AACD;AACA;AACA;AACA;;;AACA,SAASE,wBAAT,CAAkCJ,GAAlC,EAAuCpC,SAAvC,EAAkD;EAC9CoC,GAAG,CAAClD,SAAJ,CAAcuD,uBAAd,CAAsCzC,SAAtC;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS0C,kBAAT,CAA4B1C,SAA5B,EAAuC;EACnC,MAAM2C,aAAa,GAAG3C,SAAS,CAAC6B,IAAhC;;EACA,IAAIK,WAAW,CAACU,GAAZ,CAAgBD,aAAhB,CAAJ,EAAoC;IAChCtC,MAAM,CAACkC,KAAP,CAAc,sDAAqDI,aAAc,GAAjF;IACA,OAAO,KAAP;EACH;;EACDT,WAAW,CAACW,GAAZ,CAAgBF,aAAhB,EAA+B3C,SAA/B,EANmC,CAOnC;;;EACA,KAAK,MAAMoC,GAAX,IAAkBJ,KAAK,CAACc,MAAN,EAAlB,EAAkC;IAC9BX,aAAa,CAACC,GAAD,EAAMpC,SAAN,CAAb;EACH;;EACD,OAAO,IAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS+C,YAAT,CAAsBX,GAAtB,EAA2BP,IAA3B,EAAiC;EAC7B,MAAMmB,mBAAmB,GAAGZ,GAAG,CAAClD,SAAJ,CACvB+D,WADuB,CACX,WADW,EAEvBvD,YAFuB,CAEV;IAAEwD,QAAQ,EAAE;EAAZ,CAFU,CAA5B;;EAGA,IAAIF,mBAAJ,EAAyB;IACrB,KAAKA,mBAAmB,CAACG,gBAApB,EAAL;EACH;;EACD,OAAOf,GAAG,CAAClD,SAAJ,CAAc+D,WAAd,CAA0BpB,IAA1B,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASuB,sBAAT,CAAgChB,GAAhC,EAAqCP,IAArC,EAA2CwB,kBAAkB,GAAGvB,kBAAhE,EAAoF;EAChFiB,YAAY,CAACX,GAAD,EAAMP,IAAN,CAAZ,CAAwByB,aAAxB,CAAsCD,kBAAtC;AACH;AACD;AACA;AACA;AACA;AACA;;;AACA,SAASE,gBAAT,GAA4B;EACxBrB,WAAW,CAACsB,KAAZ;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMC,MAAM,GAAG;EACX,CAAC;EAAS;EAAV,GAAyB,qDACrB,mCAFO;EAGX,CAAC;EAAe;EAAhB,GAAqC,+BAH1B;EAIX,CAAC;EAAgB;EAAjB,GAAuC,iFAJ5B;EAKX,CAAC;EAAc;EAAf,GAAmC,iDALxB;EAMX,CAAC;EAAuB;EAAxB,GAAqD,yDACjD,wBAPO;EAQX,CAAC;EAAuB;EAAxB,GAAqD,uDAR1C;EASX,CAAC;EAAe;EAAhB,GAAqC,6EAT1B;EAUX,CAAC;EAAc;EAAf,GAAmC,kFAVxB;EAWX,CAAC;EAAc;EAAf,GAAqC,gFAX1B;EAYX,CAAC;EAAiB;EAAlB,GAAyC;AAZ9B,CAAf;AAcA,MAAMC,aAAa,GAAG,IAAIjF,YAAJ,CAAiB,KAAjB,EAAwB,UAAxB,EAAoCgF,MAApC,CAAtB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAME,eAAN,CAAsB;EAClB1E,WAAW,CAAC2E,OAAD,EAAUC,MAAV,EAAkB3E,SAAlB,EAA6B;IACpC,KAAK4E,UAAL,GAAkB,KAAlB;IACA,KAAKC,QAAL,GAAgBC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBL,OAAlB,CAAhB;IACA,KAAKM,OAAL,GAAeF,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,MAAlB,CAAf;IACA,KAAKM,KAAL,GAAaN,MAAM,CAAChC,IAApB;IACA,KAAKuC,+BAAL,GACIP,MAAM,CAACQ,8BADX;IAEA,KAAKC,UAAL,GAAkBpF,SAAlB;IACA,KAAKA,SAAL,CAAemD,YAAf,CAA4B,IAAIlE,SAAJ,CAAc,KAAd,EAAqB,MAAM,IAA3B,EAAiC;IAAS;IAA1C,CAA5B;EACH;;EACiC,IAA9BkG,8BAA8B,GAAG;IACjC,KAAKE,cAAL;IACA,OAAO,KAAKH,+BAAZ;EACH;;EACiC,IAA9BC,8BAA8B,CAACG,GAAD,EAAM;IACpC,KAAKD,cAAL;IACA,KAAKH,+BAAL,GAAuCI,GAAvC;EACH;;EACO,IAAJ3C,IAAI,GAAG;IACP,KAAK0C,cAAL;IACA,OAAO,KAAKJ,KAAZ;EACH;;EACU,IAAPP,OAAO,GAAG;IACV,KAAKW,cAAL;IACA,OAAO,KAAKR,QAAZ;EACH;;EACS,IAANF,MAAM,GAAG;IACT,KAAKU,cAAL;IACA,OAAO,KAAKL,OAAZ;EACH;;EACY,IAAThF,SAAS,GAAG;IACZ,OAAO,KAAKoF,UAAZ;EACH;;EACY,IAATG,SAAS,GAAG;IACZ,OAAO,KAAKX,UAAZ;EACH;;EACY,IAATW,SAAS,CAACD,GAAD,EAAM;IACf,KAAKV,UAAL,GAAkBU,GAAlB;EACH;EACD;AACJ;AACA;AACA;;;EACID,cAAc,GAAG;IACb,IAAI,KAAKE,SAAT,EAAoB;MAChB,MAAMf,aAAa,CAACgB,MAAd,CAAqB;MAAc;MAAnC,EAAsD;QAAEC,OAAO,EAAE,KAAKR;MAAhB,CAAtD,CAAN;IACH;EACJ;;AAhDiB;AAmDtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMS,WAAW,GAAGhF,OAApB;;AACA,SAASiF,aAAT,CAAuBjB,OAAvB,EAAgCkB,SAAS,GAAG,EAA5C,EAAgD;EAC5C,IAAI,OAAOA,SAAP,KAAqB,QAAzB,EAAmC;IAC/B,MAAMjD,IAAI,GAAGiD,SAAb;IACAA,SAAS,GAAG;MAAEjD;IAAF,CAAZ;EACH;;EACD,MAAMgC,MAAM,GAAGG,MAAM,CAACC,MAAP,CAAc;IAAEpC,IAAI,EAAEC,kBAAR;IAA4BuC,8BAA8B,EAAE;EAA5D,CAAd,EAAmFS,SAAnF,CAAf;EACA,MAAMjD,IAAI,GAAGgC,MAAM,CAAChC,IAApB;;EACA,IAAI,OAAOA,IAAP,KAAgB,QAAhB,IAA4B,CAACA,IAAjC,EAAuC;IACnC,MAAM6B,aAAa,CAACgB,MAAd,CAAqB;IAAe;IAApC,EAAwD;MAC1DC,OAAO,EAAEI,MAAM,CAAClD,IAAD;IAD2C,CAAxD,CAAN;EAGH;;EACD,MAAMmD,WAAW,GAAGhD,KAAK,CAACiD,GAAN,CAAUpD,IAAV,CAApB;;EACA,IAAImD,WAAJ,EAAiB;IACb;IACA,IAAItG,SAAS,CAACkF,OAAD,EAAUoB,WAAW,CAACpB,OAAtB,CAAT,IACAlF,SAAS,CAACmF,MAAD,EAASmB,WAAW,CAACnB,MAArB,CADb,EAC2C;MACvC,OAAOmB,WAAP;IACH,CAHD,MAIK;MACD,MAAMtB,aAAa,CAACgB,MAAd,CAAqB;MAAgB;MAArC,EAA0D;QAAEC,OAAO,EAAE9C;MAAX,CAA1D,CAAN;IACH;EACJ;;EACD,MAAM3C,SAAS,GAAG,IAAId,kBAAJ,CAAuByD,IAAvB,CAAlB;;EACA,KAAK,MAAM7B,SAAX,IAAwBkC,WAAW,CAACY,MAAZ,EAAxB,EAA8C;IAC1C5D,SAAS,CAACmD,YAAV,CAAuBrC,SAAvB;EACH;;EACD,MAAMkF,MAAM,GAAG,IAAIvB,eAAJ,CAAoBC,OAApB,EAA6BC,MAA7B,EAAqC3E,SAArC,CAAf;;EACA8C,KAAK,CAACa,GAAN,CAAUhB,IAAV,EAAgBqD,MAAhB;;EACA,OAAOA,MAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,MAAT,CAAgBtD,IAAI,GAAGC,kBAAvB,EAA2C;EACvC,MAAMM,GAAG,GAAGJ,KAAK,CAACiD,GAAN,CAAUpD,IAAV,CAAZ;;EACA,IAAI,CAACO,GAAL,EAAU;IACN,MAAMsB,aAAa,CAACgB,MAAd,CAAqB;IAAS;IAA9B,EAA4C;MAAEC,OAAO,EAAE9C;IAAX,CAA5C,CAAN;EACH;;EACD,OAAOO,GAAP;AACH;AACD;AACA;AACA;AACA;;;AACA,SAASgD,OAAT,GAAmB;EACf,OAAOC,KAAK,CAACC,IAAN,CAAWtD,KAAK,CAACc,MAAN,EAAX,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;SACeyC,S;;;AAUf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iCAjBA,WAAyBnD,GAAzB,EAA8B;IAC1B,MAAMP,IAAI,GAAGO,GAAG,CAACP,IAAjB;;IACA,IAAIG,KAAK,CAACY,GAAN,CAAUf,IAAV,CAAJ,EAAqB;MACjBG,KAAK,CAACwD,MAAN,CAAa3D,IAAb;;MACA,MAAM4D,OAAO,CAACC,GAAR,CAAYtD,GAAG,CAAClD,SAAJ,CACbG,YADa,GAEbC,GAFa,CAETC,QAAQ,IAAIA,QAAQ,CAACiG,MAAT,EAFH,CAAZ,CAAN;MAGApD,GAAG,CAACqC,SAAJ,GAAgB,IAAhB;IACH;EACJ,C;;;;AASD,SAASkB,eAAT,CAAyBC,gBAAzB,EAA2ChG,OAA3C,EAAoDiG,OAApD,EAA6D;EACzD,IAAIC,EAAJ,CADyD,CAEzD;EACA;;;EACA,IAAInG,OAAO,GAAG,CAACmG,EAAE,GAAG/D,mBAAmB,CAAC6D,gBAAD,CAAzB,MAAiD,IAAjD,IAAyDE,EAAE,KAAK,KAAK,CAArE,GAAyEA,EAAzE,GAA8EF,gBAA5F;;EACA,IAAIC,OAAJ,EAAa;IACTlG,OAAO,IAAK,IAAGkG,OAAQ,EAAvB;EACH;;EACD,MAAME,eAAe,GAAGpG,OAAO,CAACqG,KAAR,CAAc,OAAd,CAAxB;EACA,MAAMC,eAAe,GAAGrG,OAAO,CAACoG,KAAR,CAAc,OAAd,CAAxB;;EACA,IAAID,eAAe,IAAIE,eAAvB,EAAwC;IACpC,MAAMC,OAAO,GAAG,CACX,+BAA8BvG,OAAQ,mBAAkBC,OAAQ,IADrD,CAAhB;;IAGA,IAAImG,eAAJ,EAAqB;MACjBG,OAAO,CAACC,IAAR,CAAc,iBAAgBxG,OAAQ,mDAAtC;IACH;;IACD,IAAIoG,eAAe,IAAIE,eAAvB,EAAwC;MACpCC,OAAO,CAACC,IAAR,CAAa,KAAb;IACH;;IACD,IAAIF,eAAJ,EAAqB;MACjBC,OAAO,CAACC,IAAR,CAAc,iBAAgBvG,OAAQ,mDAAtC;IACH;;IACDS,MAAM,CAAC+F,IAAP,CAAYF,OAAO,CAACnG,IAAR,CAAa,GAAb,CAAZ;IACA;EACH;;EACD2C,kBAAkB,CAAC,IAAIvE,SAAJ,CAAe,GAAEwB,OAAQ,UAAzB,EAAoC,OAAO;IAAEA,OAAF;IAAWC;EAAX,CAAP,CAApC,EAAkE;EAAU;EAA5E,CAAD,CAAlB;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASyG,KAAT,CAAeC,WAAf,EAA4B1C,OAA5B,EAAqC;EACjC,IAAI0C,WAAW,KAAK,IAAhB,IAAwB,OAAOA,WAAP,KAAuB,UAAnD,EAA+D;IAC3D,MAAM5C,aAAa,CAACgB,MAAd,CAAqB;IAAuB;IAA5C,CAAN;EACH;;EACDpG,iBAAiB,CAACgI,WAAD,EAAc1C,OAAd,CAAjB;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASrF,WAAT,CAAqBgI,QAArB,EAA+B;EAC3B/H,aAAa,CAAC+H,QAAD,CAAb;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMC,OAAO,GAAG,6BAAhB;AACA,MAAMC,UAAU,GAAG,CAAnB;AACA,MAAMC,UAAU,GAAG,0BAAnB;AACA,IAAIC,SAAS,GAAG,IAAhB;;AACA,SAASC,YAAT,GAAwB;EACpB,IAAI,CAACD,SAAL,EAAgB;IACZA,SAAS,GAAG5H,MAAM,CAACyH,OAAD,EAAUC,UAAV,EAAsB;MACpCI,OAAO,EAAE,CAACC,EAAD,EAAKC,UAAL,KAAoB;QACzB;QACA;QACA;QACA;QACA;QACA,QAAQA,UAAR;UACI,KAAK,CAAL;YACID,EAAE,CAACE,iBAAH,CAAqBN,UAArB;QAFR;MAIH;IAXmC,CAAtB,CAAN,CAYTO,KAZS,CAYH3E,CAAC,IAAI;MACV,MAAMoB,aAAa,CAACgB,MAAd,CAAqB;MAAe;MAApC,EAAwD;QAC1DwC,oBAAoB,EAAE5E,CAAC,CAAC6E;MADkC,CAAxD,CAAN;IAGH,CAhBW,CAAZ;EAiBH;;EACD,OAAOR,SAAP;AACH;;SACcS,2B;;;;;mDAAf,WAA2ChF,GAA3C,EAAgD;IAC5C,IAAI0D,EAAJ;;IACA,IAAI;MACA,MAAMgB,EAAE,SAASF,YAAY,EAA7B;MACA,OAAOE,EAAE,CACJO,WADE,CACUX,UADV,EAEFY,WAFE,CAEUZ,UAFV,EAGFzB,GAHE,CAGEsC,UAAU,CAACnF,GAAD,CAHZ,CAAP;IAIH,CAND,CAOA,OAAOE,CAAP,EAAU;MACN,MAAMoB,aAAa,CAACgB,MAAd,CAAqB;MAAc;MAAnC,EAAsD;QACxDwC,oBAAoB,EAAE,CAACpB,EAAE,GAAGxD,CAAN,MAAa,IAAb,IAAqBwD,EAAE,KAAK,KAAK,CAAjC,GAAqC,KAAK,CAA1C,GAA8CA,EAAE,CAACqB;MADf,CAAtD,CAAN;IAGH;EACJ,C;;;;SACcK,0B;;;;;kDAAf,WAA0CpF,GAA1C,EAA+CqF,eAA/C,EAAgE;IAC5D,IAAI3B,EAAJ;;IACA,IAAI;MACA,MAAMgB,EAAE,SAASF,YAAY,EAA7B;MACA,MAAMc,EAAE,GAAGZ,EAAE,CAACO,WAAH,CAAeX,UAAf,EAA2B,WAA3B,CAAX;MACA,MAAMY,WAAW,GAAGI,EAAE,CAACJ,WAAH,CAAeZ,UAAf,CAApB;MACA,MAAMY,WAAW,CAACK,GAAZ,CAAgBF,eAAhB,EAAiCF,UAAU,CAACnF,GAAD,CAA3C,CAAN;MACA,OAAOsF,EAAE,CAACE,IAAV;IACH,CAND,CAOA,OAAOtF,CAAP,EAAU;MACN,MAAMoB,aAAa,CAACgB,MAAd,CAAqB;MAAc;MAAnC,EAAwD;QAC1DwC,oBAAoB,EAAE,CAACpB,EAAE,GAAGxD,CAAN,MAAa,IAAb,IAAqBwD,EAAE,KAAK,KAAK,CAAjC,GAAqC,KAAK,CAA1C,GAA8CA,EAAE,CAACqB;MADb,CAAxD,CAAN;IAGH;EACJ,C;;;;AACD,SAASI,UAAT,CAAoBnF,GAApB,EAAyB;EACrB,OAAQ,GAAEA,GAAG,CAACP,IAAK,IAAGO,GAAG,CAACwB,OAAJ,CAAYiE,KAAM,EAAxC;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMC,gBAAgB,GAAG,IAAzB,C,CACA;;AACA,MAAMC,qCAAqC,GAAG,KAAK,EAAL,GAAU,EAAV,GAAe,EAAf,GAAoB,IAAlE;;AACA,MAAMC,oBAAN,CAA2B;EACvB/I,WAAW,CAACC,SAAD,EAAY;IACnB,KAAKA,SAAL,GAAiBA,SAAjB;IACA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IACQ,KAAK+I,gBAAL,GAAwB,IAAxB;IACA,MAAM7F,GAAG,GAAG,KAAKlD,SAAL,CAAe+D,WAAf,CAA2B,KAA3B,EAAkCvD,YAAlC,EAAZ;IACA,KAAKwI,QAAL,GAAgB,IAAIC,oBAAJ,CAAyB/F,GAAzB,CAAhB;IACA,KAAKgG,uBAAL,GAA+B,KAAKF,QAAL,CAAcG,IAAd,GAAqBC,IAArB,CAA0BC,MAAM,IAAI;MAC/D,KAAKN,gBAAL,GAAwBM,MAAxB;MACA,OAAOA,MAAP;IACH,CAH8B,CAA/B;EAIH;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;EACUpF,gBAAgB,GAAG;IAAA;;IAAA;MACrB,MAAMqF,cAAc,GAAG,KAAI,CAACtJ,SAAL,CAClB+D,WADkB,CACN,iBADM,EAElBvD,YAFkB,EAAvB,CADqB,CAIrB;MACA;;;MACA,MAAM+I,KAAK,GAAGD,cAAc,CAACrJ,qBAAf,EAAd;MACA,MAAMuJ,IAAI,GAAGC,gBAAgB,EAA7B;;MACA,IAAI,KAAI,CAACV,gBAAL,KAA0B,IAA9B,EAAoC;QAChC,KAAI,CAACA,gBAAL,SAA8B,KAAI,CAACG,uBAAnC;MACH,CAVoB,CAWrB;MACA;;;MACA,IAAI,KAAI,CAACH,gBAAL,CAAsBW,qBAAtB,KAAgDF,IAAhD,IACA,KAAI,CAACT,gBAAL,CAAsBY,UAAtB,CAAiCC,IAAjC,CAAsCC,mBAAmB,IAAIA,mBAAmB,CAACL,IAApB,KAA6BA,IAA1F,CADJ,EACqG;QACjG;MACH,CAHD,MAIK;QACD;QACA,KAAI,CAACT,gBAAL,CAAsBY,UAAtB,CAAiC1C,IAAjC,CAAsC;UAAEuC,IAAF;UAAQD;QAAR,CAAtC;MACH,CApBoB,CAqBrB;;;MACA,KAAI,CAACR,gBAAL,CAAsBY,UAAtB,GAAmC,KAAI,CAACZ,gBAAL,CAAsBY,UAAtB,CAAiChJ,MAAjC,CAAwCkJ,mBAAmB,IAAI;QAC9F,MAAMC,WAAW,GAAG,IAAIC,IAAJ,CAASF,mBAAmB,CAACL,IAA7B,EAAmCQ,OAAnC,EAApB;QACA,MAAMC,GAAG,GAAGF,IAAI,CAACE,GAAL,EAAZ;QACA,OAAOA,GAAG,GAAGH,WAAN,IAAqBjB,qCAA5B;MACH,CAJkC,CAAnC;MAKA,OAAO,KAAI,CAACG,QAAL,CAAckB,SAAd,CAAwB,KAAI,CAACnB,gBAA7B,CAAP;IA3BqB;EA4BxB;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;EACUoB,mBAAmB,GAAG;IAAA;;IAAA;MACxB,IAAI,MAAI,CAACpB,gBAAL,KAA0B,IAA9B,EAAoC;QAChC,MAAM,MAAI,CAACG,uBAAX;MACH,CAHuB,CAIxB;;;MACA,IAAI,MAAI,CAACH,gBAAL,KAA0B,IAA1B,IACA,MAAI,CAACA,gBAAL,CAAsBY,UAAtB,CAAiCS,MAAjC,KAA4C,CADhD,EACmD;QAC/C,OAAO,EAAP;MACH;;MACD,MAAMZ,IAAI,GAAGC,gBAAgB,EAA7B,CATwB,CAUxB;;MACA,MAAM;QAAEY,gBAAF;QAAoBC;MAApB,IAAsCC,0BAA0B,CAAC,MAAI,CAACxB,gBAAL,CAAsBY,UAAvB,CAAtE;MACA,MAAMa,YAAY,GAAG/K,6BAA6B,CAACgL,IAAI,CAACC,SAAL,CAAe;QAAEhK,OAAO,EAAE,CAAX;QAAciJ,UAAU,EAAEU;MAA1B,CAAf,CAAD,CAAlD,CAZwB,CAaxB;;MACA,MAAI,CAACtB,gBAAL,CAAsBW,qBAAtB,GAA8CF,IAA9C;;MACA,IAAIc,aAAa,CAACF,MAAd,GAAuB,CAA3B,EAA8B;QAC1B;QACA,MAAI,CAACrB,gBAAL,CAAsBY,UAAtB,GAAmCW,aAAnC,CAF0B,CAG1B;QACA;QACA;;QACA,MAAM,MAAI,CAACtB,QAAL,CAAckB,SAAd,CAAwB,MAAI,CAACnB,gBAA7B,CAAN;MACH,CAPD,MAQK;QACD,MAAI,CAACA,gBAAL,CAAsBY,UAAtB,GAAmC,EAAnC,CADC,CAED;;QACA,KAAK,MAAI,CAACX,QAAL,CAAckB,SAAd,CAAwB,MAAI,CAACnB,gBAA7B,CAAL;MACH;;MACD,OAAOyB,YAAP;IA5BwB;EA6B3B;;AA5FsB;;AA8F3B,SAASf,gBAAT,GAA4B;EACxB,MAAMkB,KAAK,GAAG,IAAIZ,IAAJ,EAAd,CADwB,CAExB;;EACA,OAAOY,KAAK,CAACC,WAAN,GAAoBC,SAApB,CAA8B,CAA9B,EAAiC,EAAjC,CAAP;AACH;;AACD,SAASN,0BAAT,CAAoCO,eAApC,EAAqDC,OAAO,GAAGnC,gBAA/D,EAAiF;EAC7E;EACA;EACA,MAAMyB,gBAAgB,GAAG,EAAzB,CAH6E,CAI7E;;EACA,IAAIC,aAAa,GAAGQ,eAAe,CAACE,KAAhB,EAApB;;EACA,KAAK,MAAMnB,mBAAX,IAAkCiB,eAAlC,EAAmD;IAC/C;IACA,MAAMG,cAAc,GAAGZ,gBAAgB,CAACa,IAAjB,CAAsBC,EAAE,IAAIA,EAAE,CAAC5B,KAAH,KAAaM,mBAAmB,CAACN,KAA7D,CAAvB;;IACA,IAAI,CAAC0B,cAAL,EAAqB;MACjB;MACAZ,gBAAgB,CAACpD,IAAjB,CAAsB;QAClBsC,KAAK,EAAEM,mBAAmB,CAACN,KADT;QAElB6B,KAAK,EAAE,CAACvB,mBAAmB,CAACL,IAArB;MAFW,CAAtB;;MAIA,IAAI6B,UAAU,CAAChB,gBAAD,CAAV,GAA+BU,OAAnC,EAA4C;QACxC;QACA;QACAV,gBAAgB,CAACiB,GAAjB;QACA;MACH;IACJ,CAZD,MAaK;MACDL,cAAc,CAACG,KAAf,CAAqBnE,IAArB,CAA0B4C,mBAAmB,CAACL,IAA9C,EADC,CAED;MACA;;MACA,IAAI6B,UAAU,CAAChB,gBAAD,CAAV,GAA+BU,OAAnC,EAA4C;QACxCE,cAAc,CAACG,KAAf,CAAqBE,GAArB;QACA;MACH;IACJ,CAxB8C,CAyB/C;IACA;;;IACAhB,aAAa,GAAGA,aAAa,CAACU,KAAd,CAAoB,CAApB,CAAhB;EACH;;EACD,OAAO;IACHX,gBADG;IAEHC;EAFG,CAAP;AAIH;;AACD,MAAMrB,oBAAN,CAA2B;EACvBlJ,WAAW,CAACmD,GAAD,EAAM;IACb,KAAKA,GAAL,GAAWA,GAAX;IACA,KAAKqI,uBAAL,GAA+B,KAAKC,4BAAL,EAA/B;EACH;;EACKA,4BAA4B,GAAG;IAAA;MACjC,IAAI,CAAC9L,oBAAoB,EAAzB,EAA6B;QACzB,OAAO,KAAP;MACH,CAFD,MAGK;QACD,OAAOC,yBAAyB,GAC3ByJ,IADE,CACG,MAAM,IADT,EAEFrB,KAFE,CAEI,MAAM,KAFV,CAAP;MAGH;IARgC;EASpC;EACD;AACJ;AACA;;;EACUoB,IAAI,GAAG;IAAA;;IAAA;MACT,MAAMsC,eAAe,SAAS,MAAI,CAACF,uBAAnC;;MACA,IAAI,CAACE,eAAL,EAAsB;QAClB,OAAO;UAAE9B,UAAU,EAAE;QAAd,CAAP;MACH,CAFD,MAGK;QACD,MAAM+B,kBAAkB,SAASxD,2BAA2B,CAAC,MAAI,CAAChF,GAAN,CAA5D;QACA,OAAOwI,kBAAkB,IAAI;UAAE/B,UAAU,EAAE;QAAd,CAA7B;MACH;IARQ;EASZ,CA3BsB,CA4BvB;;;EACMO,SAAS,CAACyB,gBAAD,EAAmB;IAAA;;IAAA;MAC9B,IAAI/E,EAAJ;;MACA,MAAM6E,eAAe,SAAS,MAAI,CAACF,uBAAnC;;MACA,IAAI,CAACE,eAAL,EAAsB;QAClB;MACH,CAFD,MAGK;QACD,MAAMG,wBAAwB,SAAS,MAAI,CAACzC,IAAL,EAAvC;QACA,OAAOb,0BAA0B,CAAC,MAAI,CAACpF,GAAN,EAAW;UACxCwG,qBAAqB,EAAE,CAAC9C,EAAE,GAAG+E,gBAAgB,CAACjC,qBAAvB,MAAkD,IAAlD,IAA0D9C,EAAE,KAAK,KAAK,CAAtE,GAA0EA,EAA1E,GAA+EgF,wBAAwB,CAAClC,qBADvF;UAExCC,UAAU,EAAEgC,gBAAgB,CAAChC;QAFW,CAAX,CAAjC;MAIH;IAZ6B;EAajC,CA1CsB,CA2CvB;;;EACMkC,GAAG,CAACF,gBAAD,EAAmB;IAAA;;IAAA;MACxB,IAAI/E,EAAJ;;MACA,MAAM6E,eAAe,SAAS,MAAI,CAACF,uBAAnC;;MACA,IAAI,CAACE,eAAL,EAAsB;QAClB;MACH,CAFD,MAGK;QACD,MAAMG,wBAAwB,SAAS,MAAI,CAACzC,IAAL,EAAvC;QACA,OAAOb,0BAA0B,CAAC,MAAI,CAACpF,GAAN,EAAW;UACxCwG,qBAAqB,EAAE,CAAC9C,EAAE,GAAG+E,gBAAgB,CAACjC,qBAAvB,MAAkD,IAAlD,IAA0D9C,EAAE,KAAK,KAAK,CAAtE,GAA0EA,EAA1E,GAA+EgF,wBAAwB,CAAClC,qBADvF;UAExCC,UAAU,EAAE,CACR,GAAGiC,wBAAwB,CAACjC,UADpB,EAER,GAAGgC,gBAAgB,CAAChC,UAFZ;QAF4B,CAAX,CAAjC;MAOH;IAfuB;EAgB3B;;AA5DsB;AA8D3B;AACA;AACA;AACA;AACA;;;AACA,SAAS0B,UAAT,CAAoBP,eAApB,EAAqC;EACjC;EACA,OAAOrL,6BAA6B,EACpC;EACAgL,IAAI,CAACC,SAAL,CAAe;IAAEhK,OAAO,EAAE,CAAX;IAAciJ,UAAU,EAAEmB;EAA1B,CAAf,CAFoC,CAA7B,CAEsDV,MAF7D;AAGH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS0B,sBAAT,CAAgCnF,OAAhC,EAAyC;EACrCnD,kBAAkB,CAAC,IAAIvE,SAAJ,CAAc,iBAAd,EAAiCe,SAAS,IAAI,IAAIF,yBAAJ,CAA8BE,SAA9B,CAA9C,EAAwF;EAAU;EAAlG,CAAD,CAAlB;;EACAwD,kBAAkB,CAAC,IAAIvE,SAAJ,CAAc,WAAd,EAA2Be,SAAS,IAAI,IAAI8I,oBAAJ,CAAyB9I,SAAzB,CAAxC,EAA6E;EAAU;EAAvF,CAAD,CAAlB,CAFqC,CAGrC;;;EACAyG,eAAe,CAACxF,MAAD,EAASC,SAAT,EAAoByF,OAApB,CAAf,CAJqC,CAKrC;;EACAF,eAAe,CAACxF,MAAD,EAASC,SAAT,EAAoB,SAApB,CAAf,CANqC,CAOrC;;EACAuF,eAAe,CAAC,SAAD,EAAY,EAAZ,CAAf;AACH;AAED;AACA;AACA;AACA;AACA;AACA;;;AACAqF,sBAAsB,CAAC,EAAD,CAAtB;AAEA,SAASpG,WAAT,EAAsB9C,kBAAkB,IAAImJ,mBAA5C,EAAiE9I,aAAjE,EAAgFK,wBAAhF,EAA0GR,KAA1G,EAAiHuB,gBAAjH,EAAmIrB,WAAnI,EAAgJa,YAAhJ,EAA8JL,kBAA9J,EAAkLU,sBAAlL,EAA0MmC,SAA1M,EAAqNJ,MAArN,EAA6NC,OAA7N,EAAsOP,aAAtO,EAAqPwB,KAArP,EAA4PV,eAA5P,EAA6QpH,WAA7Q"},"metadata":{},"sourceType":"module"}